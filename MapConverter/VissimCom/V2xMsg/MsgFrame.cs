namespace MsgFrame
{
    ///<summary>
    /// This class is for internal use only (it is used internally in the generated code).
    ///</summary>
    internal partial class _InternalMetadata : Oss.Asn1.Internal.SchemaMetadata
    {
        internal static class CommonMetaData
        {
            internal static Oss.Asn1.Internal.PerStringMetadata S0 = new Oss.Asn1.Internal.PerStringMetadata {
                Alphabet = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u0009"+
                    "\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015"+
                    "\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f"+
                    " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+
                    "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f",
                InverseTable = new byte[] {
                    0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                    0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,
                    0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
                    0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,
                    0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,
                    0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
                    0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
                    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,
                    0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,
                    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,
                    0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,
                    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,
                    0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,
                    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,
                    0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F                    
                },
                MinChar = 0,
                MaxChar = 127,
                BitWidthAligned = 8,
                BitWidthUnaligned = 7,
                EncodeValueAligned = true,
                EncodeValueUnaligned = true,
                CharTreeDataPresent = false,
                CharTreeData = null
            };
        }

        internal static class PerCodecMetaData
        {
            public static int[] SortedEnum0 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
            };
            public static int[] SortedEnum1 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
            };
            public static int[] SortedEnum2 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedEnum3 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedEnum4 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedEnum5 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedEnum6 = { 
                0,
                1,
                2
            };
            public static int[] SortedEnum7 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedEnum8 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedEnum9 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedEnum10 = { 
                0,
                1,
                2
            };
            public static int[] SortedEnum11 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedEnum12 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39
            };
            public static int[] SortedEnum13 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            };
            public static int[] SortedExtensionEnum13 = { 
            };
            public static int UnknownExtensionEnum13 = -1;
            public static int[] SortedEnum14 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum14 = { 
            };
            public static int UnknownExtensionEnum14 = -1;
            public static int[] SortedEnum15 = { 
                0,
                1,
                2,
                3,
                4
            };
            public static int[] SortedExtensionEnum15 = { 
            };
            public static int UnknownExtensionEnum15 = -1;
            public static int[] SortedEnum16 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum16 = { 
            };
            public static int UnknownExtensionEnum16 = -1;
            public static int[] SortedEnum17 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            };
            public static int[] SortedEnum18 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                19,
                20,
                21,
                23,
                30,
                31,
                32
            };
            public static int[] SortedExtensionEnum18 = { 
            };
            public static int UnknownExtensionEnum18 = -1;
            public static int[] SortedEnum19 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum19 = { 
            };
            public static int UnknownExtensionEnum19 = -1;
            public static int[] SortedEnum20 = { 
                0,
                1,
                2
            };
            public static int[] SortedExtensionEnum20 = { 
            };
            public static int UnknownExtensionEnum20 = -1;
            public static int[] SortedEnum21 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum21 = { 
            };
            public static int UnknownExtensionEnum21 = -1;
            public static int[] SortedEnum22 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum22 = { 
            };
            public static int UnknownExtensionEnum22 = -1;
            public static int[] SortedEnum23 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum23 = { 
            };
            public static int UnknownExtensionEnum23 = -1;
            public static int[] SortedEnum24 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6
            };
            public static int[] SortedExtensionEnum24 = { 
            };
            public static int UnknownExtensionEnum24 = -1;
            public static int[] SortedEnum25 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedEnum26 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedEnum27 = { 
                0,
                1,
                2,
                3,
                4
            };
            public static int[] SortedExtensionEnum27 = { 
            };
            public static int UnknownExtensionEnum27 = -1;
            public static int[] SortedEnum28 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum28 = { 
            };
            public static int UnknownExtensionEnum28 = -1;
            public static int[] SortedEnum29 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum29 = { 
            };
            public static int UnknownExtensionEnum29 = -1;
            public static int[] SortedEnum30 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum30 = { 
            };
            public static int UnknownExtensionEnum30 = -1;
            public static int[] SortedEnum31 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum31 = { 
            };
            public static int UnknownExtensionEnum31 = -1;
            public static int[] SortedEnum32 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6
            };
            public static int[] SortedExtensionEnum32 = { 
            };
            public static int UnknownExtensionEnum32 = -1;
            public static int[] SortedEnum33 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6
            };
            public static int[] SortedExtensionEnum33 = { 
            };
            public static int UnknownExtensionEnum33 = -1;
            public static int[] SortedEnum34 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum34 = { 
            };
            public static int UnknownExtensionEnum34 = -1;
            public static int[] SortedEnum35 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum35 = { 
            };
            public static int UnknownExtensionEnum35 = -1;
            public static int[] SortedEnum36 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13
            };
            public static int[] SortedEnum37 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            };
            public static int[] SortedExtensionEnum37 = { 
            };
            public static int UnknownExtensionEnum37 = -1;
            public static int[] SortedEnum38 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12
            };
            public static int[] SortedExtensionEnum38 = { 
            };
            public static int UnknownExtensionEnum38 = -1;
            public static int[] SortedEnum39 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum39 = { 
            };
            public static int UnknownExtensionEnum39 = -1;
            public static int[] SortedEnum40 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum40 = { 
            };
            public static int UnknownExtensionEnum40 = -1;
            public static int[] SortedEnum41 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum41 = { 
            };
            public static int UnknownExtensionEnum41 = -1;
            public static int[] SortedEnum42 = { 
                0,
                1,
                2,
                3
            };
            public static int[] SortedExtensionEnum42 = { 
            };
            public static int UnknownExtensionEnum42 = -1;
            public static int[] SortedEnum43 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedExtensionEnum43 = { 
            };
            public static int UnknownExtensionEnum43 = -1;
            public static int[] SortedEnum44 = { 
                0,
                1,
                2
            };
            public static int[] SortedExtensionEnum44 = { 
            };
            public static int UnknownExtensionEnum44 = -1;
            public static int[] SortedEnum45 = { 
                0,
                1,
                2
            };
            public static int[] SortedExtensionEnum45 = { 
            };
            public static int UnknownExtensionEnum45 = -1;
            public static int[] SortedEnum46 = { 
                0,
                1,
                2,
                3,
                4
            };
            public static int[] SortedEnum47 = { 
                0,
                1,
                2
            };
            public static int[] SortedEnum48 = { 
                0,
                1,
                2,
                3,
                4,
                5
            };
            public static int[] SortedExtensionEnum48 = { 
            };
            public static int UnknownExtensionEnum48 = -1;
            public static int[] SortedEnum49 = { 
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7
            };
            public static int[] SortedExtensionEnum49 = { 
            };
            public static int UnknownExtensionEnum49 = -1;
            public static int[] SortedEnum50 = { 
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8
            };
            public static int[] SortedExtensionEnum50 = { 
            };
            public static int UnknownExtensionEnum50 = -1;
        }

        internal static readonly byte[] CodecMetadata = new byte[]
        {
            (byte)0x1f, (byte)0x72, (byte)0x6f, (byte)0xbd, (byte)0xb8,
            (byte)0x8d, (byte)0xc5, (byte)0x7a, (byte)0x45, (byte)0x8d,
            (byte)0xb9, (byte)0xb3, (byte)0x1a, (byte)0x1b, (byte)0xae,
            (byte)0x08, (byte)0x4f, (byte)0xdf, (byte)0xbe, (byte)0x4f,
            (byte)0x7b, (byte)0x42, (byte)0x1d, (byte)0xb9, (byte)0xcc,
            (byte)0xc5, (byte)0x3c, (byte)0xf6, (byte)0xb4, (byte)0x38,
            (byte)0xc6, (byte)0x93, (byte)0x0b, (byte)0xec, (byte)0xa7,
            (byte)0x67, (byte)0x91, (byte)0x73, (byte)0x29, (byte)0xfa,
            (byte)0x4a, (byte)0x52, (byte)0x26, (byte)0x54, (byte)0xff,
            (byte)0xb4, (byte)0x8a, (byte)0xf5, (byte)0x9a, (byte)0xcc,
            (byte)0xb9, (byte)0x1d, (byte)0x42, (byte)0x73, (byte)0xb0,
            (byte)0x1b, (byte)0x18, (byte)0xea, (byte)0xa2, (byte)0x0b,
            (byte)0xe6, (byte)0x1a, (byte)0x7d, (byte)0xce, (byte)0x92,
            (byte)0xa7, (byte)0x42, (byte)0xde, (byte)0x82
        };


        private _InternalMetadata(byte[] codecMetadata) : base(codecMetadata)
        {
        }

        static _InternalMetadata()
        {
        }

        internal static readonly _InternalMetadata Instance = new _InternalMetadata(CodecMetadata);
    }
    /// <summary>
    /// Represents an ASN.1 codec capable of encoding and decoding data according to Unaligned Packed Encoding Rules (UPER)
    /// </summary>
    public class PerUnalignedCodec : Oss.Asn1.BinaryCodec
    {
        /// <summary>
        /// Initializes a new instance of MsgFrame.PerUnalignedCodec
        /// </summary>
        public PerUnalignedCodec() : base(_InternalMetadata.Instance)
        {
            base.EncoderOptions = new Oss.Asn1.PerEncoderOptions();
            base.DecoderOptions = new Oss.Asn1.BaseDecoderOptions();
            Encoder = new Oss.Asn1.Internal.PerEncoder(false, this.EncoderOptions);
            Decoder = new Oss.Asn1.Internal.PerDecoder(false, false, this.DecoderOptions);
        }

        /// <summary>
        /// Returns an object which can be used to modify the encoding options.
        /// </summary>
        public new Oss.Asn1.PerEncoderOptions EncoderOptions
        {
            get { return base.EncoderOptions as Oss.Asn1.PerEncoderOptions; }
        }

        /// <summary>
        /// Returns the encoding rules implemented by this codec instance.
        /// </summary>
        public override Oss.Asn1.EncodingRules EncodingRules
        {
            get { return Oss.Asn1.EncodingRules.PerUnaligned; }
        }

        /// <summary>
        /// Encodes a PDU object using UPER and writes the encoded data to a Stream.
        /// </summary>
        /// <param name="pdu">The PDU object to be encoded.</param>
        /// <param name="stream">The output stream in which the encoded data is written.</param>
        /// <returns>The size of the encoded data written to the stream, in bytes.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        public override int Encode(Oss.Asn1.BasePdu pdu, System.IO.Stream stream)
        {
            return Encoder.EncodePdu(pdu, stream);
        }

        /// <summary>
        /// Encodes a PDU object using UPER and stores the encoded data into a BitString object.
        /// </summary>
        /// <param name="pdu">The PDU object to be encoded.</param>
        /// <param name="bstr">The output BitString object in which the encoded data is written.</param>
        /// <returns>The size of the encoded data written to the BitString object, in bits.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        public int Encode(Oss.Asn1.BasePdu pdu, Oss.Asn1.BitString bstr)
        {
            return Encoder.EncodePdu(pdu, bstr);
        }

        /// <summary>
        /// Encodes a PDU object into a buffer.
        /// </summary>
        /// <param name="pdu">The PDU object to be encoded.</param>
        /// <param name="buffer">The buffer in which the encoded data is written.</param>
        /// <returns>The size of the encoded data written to the buffer, in bytes.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        /// <exception cref="Oss.Asn1.Asn1OutputFullException">Thrown if buffer is too small.</exception>
        public override int Encode(Oss.Asn1.BasePdu pdu, byte[] buffer)
        {
            return Encoder.EncodePdu(pdu, buffer, 0);
        }

        /// <summary>
        /// Encodes a PDU object into a buffer, at the specified starting position.
        /// </summary>
        /// <param name="pdu">The PDU object to be encoded.</param>
        /// <param name="buffer">The buffer in which the encoded data is written.</param>
        /// <param name="index">The buffer position at which to begin writing the encoded data.</param>
        /// <returns>The size of the encoded data written to the buffer, in bytes.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        /// <exception cref="Oss.Asn1.Asn1OutputFullException">Thrown if buffer is too small.</exception>
        public override int Encode(Oss.Asn1.BasePdu pdu, byte[] buffer, int index)
        {
            return Encoder.EncodePdu(pdu, buffer, index);
        }

        /// <summary>
        /// Encodes a PDU into a new buffer.
        /// </summary>
        /// <param name="pdu">The PDU object to be encoded.</param>
        /// <returns>The new buffer containing the encoded data.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the PDU cannot be encoded.</exception>
        public override byte[] Encode(Oss.Asn1.BasePdu pdu)
        {
            return Encoder.EncodePdu(pdu);
        }

        /// <summary>
        /// Decodes a PDU object from a Stream, using UPER.
        /// </summary>
        /// <param name="stream">The input stream from which the encoded data is read.</param>
        /// <param name="pdu">The PDU object in which the decoded data is stored.</param>
        /// <returns>The number of bytes read from the stream.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        public override int Decode(System.IO.Stream stream, Oss.Asn1.BasePdu pdu)
        {
            return Decoder.DecodePdu(stream, pdu);
        }

        /// <summary>
        /// Decodes a PDU object from a BitString object, using UPER.
        /// An exception is thrown if trailing bits are left in the input BitString object after decoding.
        /// </summary>
        /// <param name="bstr">The input BitString object containing the encoded data.</param>
        /// <param name="pdu">The PDU object in which the decoded data is stored.</param>
        /// <returns>The number of bits read from the input BitString object.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        public int Decode(Oss.Asn1.BitString bstr, Oss.Asn1.BasePdu pdu)
        {
            return Decoder.DecodePdu(bstr, pdu);
        }

        /// <summary>
        /// Decodes a PDU object from a buffer, using UPER.
        /// </summary>
        /// <param name="buffer">The input buffer containing the encoded data.</param>
        /// <param name="pdu">The PDU object in which the decoded data is stored.</param>
        /// <returns>The number of bytes read from the buffer.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        public override int Decode(byte[] buffer, Oss.Asn1.BasePdu pdu)
        {
            return Decoder.DecodePdu(buffer, 0, pdu);
        }

        /// <summary>
        /// Decodes a PDU object from a buffer, using UPER.
        /// </summary>
        /// <param name="buffer">The input buffer containing the encoded data.</param>
        /// <param name="index">The buffer position at which to begin reading the encoded data.</param>
        /// <param name="pdu">The PDU object in which the decoded data is stored.</param>
        /// <returns>The number of bytes read from the buffer.</returns>
        /// <exception cref="Oss.Asn1.Asn1InvalidEncodingException">Thrown if the PDU cannot be decoded.</exception>
        public override int Decode(byte[] buffer, int index, Oss.Asn1.BasePdu pdu)
        {
            return Decoder.DecodePdu(buffer, index, pdu);
        }

        protected readonly Oss.Asn1.Internal.PerEncoder Encoder;
        protected readonly Oss.Asn1.Internal.PerDecoder Decoder;
    }
    /// <summary>
    /// Represents schema type 'MessageFrame' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class MessageFrame : Oss.Asn1.BasePdu
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            BsmFrameChosen = 1,
            MapframeChosen = 2,
            RsmFrameChosen = 3,
            SpatFrameChosen = 4,
            RsiFrameChosen = 5,
            TestDataChosen = 6,
            RtcmDataChosen = 7,
            PamDataChosen = 8,
            PmmDataChosen = 9,
            PsmDataChosen = 10,
            RscDataChosen = 11,
            SsmDataChosen = 12,
            VirDataChosen = 13,
            VpmDataChosen = 14
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'bsmFrame'</summary>
        public BasicSafetyMessage BsmFrame {
            get {
                if (_id == Id.BsmFrameChosen)
                    return (_contained as BasicSafetyMessage);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.BsmFrameChosen;
            }
        }
        /// <summary>Gets or selects alternative 'mapframe'</summary>
        public MapData Mapframe {
            get {
                if (_id == Id.MapframeChosen)
                    return (_contained as MapData);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.MapframeChosen;
            }
        }
        /// <summary>Gets or selects alternative 'rsmFrame'</summary>
        public RoadsideSafetyMessage RsmFrame {
            get {
                if (_id == Id.RsmFrameChosen)
                    return (_contained as RoadsideSafetyMessage);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.RsmFrameChosen;
            }
        }
        /// <summary>Gets or selects alternative 'spatFrame'</summary>
        public SPAT SpatFrame {
            get {
                if (_id == Id.SpatFrameChosen)
                    return (_contained as SPAT);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SpatFrameChosen;
            }
        }
        /// <summary>Gets or selects alternative 'rsiFrame'</summary>
        public RoadSideInformation RsiFrame {
            get {
                if (_id == Id.RsiFrameChosen)
                    return (_contained as RoadSideInformation);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.RsiFrameChosen;
            }
        }
        /// <summary>Gets or selects alternative 'testData'</summary>
        public TestMsg TestData {
            get {
                if (_id == Id.TestDataChosen)
                    return (_contained as TestMsg);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.TestDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'rtcmData'</summary>
        public RTCMcorrections RtcmData {
            get {
                if (_id == Id.RtcmDataChosen)
                    return (_contained as RTCMcorrections);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.RtcmDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'pamData'</summary>
        public MsgFrame.PAMData PamData {
            get {
                if (_id == Id.PamDataChosen)
                    return (_contained as MsgFrame.PAMData);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PamDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'pmmData'</summary>
        public PlatooningManagementMessage PmmData {
            get {
                if (_id == Id.PmmDataChosen)
                    return (_contained as PlatooningManagementMessage);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PmmDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'psmData'</summary>
        public PersonalSafetyMessage PsmData {
            get {
                if (_id == Id.PsmDataChosen)
                    return (_contained as PersonalSafetyMessage);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PsmDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'rscData'</summary>
        public RoadsideCoordination RscData {
            get {
                if (_id == Id.RscDataChosen)
                    return (_contained as RoadsideCoordination);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.RscDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'ssmData'</summary>
        public SensorSharingMsg SsmData {
            get {
                if (_id == Id.SsmDataChosen)
                    return (_contained as SensorSharingMsg);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SsmDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'virData'</summary>
        public VehIntentionAndRequest VirData {
            get {
                if (_id == Id.VirDataChosen)
                    return (_contained as VehIntentionAndRequest);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.VirDataChosen;
            }
        }
        /// <summary>Gets or selects alternative 'vpmData'</summary>
        public VehiclePaymentMessage VpmData {
            get {
                if (_id == Id.VpmDataChosen)
                    return (_contained as VehiclePaymentMessage);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.VpmDataChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MessageFrame that = right as MessageFrame;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MessageFrame";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case MessageFrame.Id.BsmFrameChosen:
                    try {
                        if (this.BsmFrame == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.BsmFrame.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "BsmFrame", "BasicSafetyMessage", "bsmFrame", "BasicSafetyMessage", false); throw;
                    }
                    break;
                case MessageFrame.Id.MapframeChosen:
                    try {
                        if (this.Mapframe == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.Mapframe.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Mapframe", "MapData", "mapframe", "MapData", false); throw;
                    }
                    break;
                case MessageFrame.Id.RsmFrameChosen:
                    try {
                        if (this.RsmFrame == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.RsmFrame.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RsmFrame", "RoadsideSafetyMessage", "rsmFrame", "RoadsideSafetyMessage", false); throw;
                    }
                    break;
                case MessageFrame.Id.SpatFrameChosen:
                    try {
                        if (this.SpatFrame == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SpatFrame.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpatFrame", "SPAT", "spatFrame", "SPAT", false); throw;
                    }
                    break;
                case MessageFrame.Id.RsiFrameChosen:
                    try {
                        if (this.RsiFrame == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.RsiFrame.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RsiFrame", "RoadSideInformation", "rsiFrame", "RoadSideInformation", false); throw;
                    }
                    break;
                case MessageFrame.Id.TestDataChosen:
                    try {
                        if (this.TestData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.TestData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TestData", "TestMsg", "testData", "TestMsg", false); throw;
                    }
                    break;
                case MessageFrame.Id.RtcmDataChosen:
                    try {
                        if (this.RtcmData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.RtcmData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmData", "RTCMcorrections", "rtcmData", "RTCMcorrections", false); throw;
                    }
                    break;
                case MessageFrame.Id.PamDataChosen:
                    try {
                        if (this.PamData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PamData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PamData", "MsgFrame.PAMData", "pamData", "PAMData", false); throw;
                    }
                    break;
                case MessageFrame.Id.PmmDataChosen:
                    try {
                        if (this.PmmData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PmmData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PmmData", "PlatooningManagementMessage", "pmmData", "PlatooningManagementMessage", false); throw;
                    }
                    break;
                case MessageFrame.Id.PsmDataChosen:
                    try {
                        if (this.PsmData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PsmData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PsmData", "PersonalSafetyMessage", "psmData", "PersonalSafetyMessage", false); throw;
                    }
                    break;
                case MessageFrame.Id.RscDataChosen:
                    try {
                        if (this.RscData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.RscData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RscData", "RoadsideCoordination", "rscData", "RoadsideCoordination", false); throw;
                    }
                    break;
                case MessageFrame.Id.SsmDataChosen:
                    try {
                        if (this.SsmData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SsmData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SsmData", "SensorSharingMsg", "ssmData", "SensorSharingMsg", false); throw;
                    }
                    break;
                case MessageFrame.Id.VirDataChosen:
                    try {
                        if (this.VirData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.VirData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VirData", "VehIntentionAndRequest", "virData", "VehIntentionAndRequest", false); throw;
                    }
                    break;
                case MessageFrame.Id.VpmDataChosen:
                    try {
                        if (this.VpmData == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.VpmData.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VpmData", "VehiclePaymentMessage", "vpmData", "VehiclePaymentMessage", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MessageFrame", null, "MessageFrame", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MessageFrame obj0 = new MessageFrame();
            switch (this.Selected) {
                case MessageFrame.Id.BsmFrameChosen:
                {
                    obj0.BsmFrame = Oss.Asn1.Internal.CopyUtil.CopyType(this.BsmFrame);
                    break;
                }
                case MessageFrame.Id.MapframeChosen:
                {
                    obj0.Mapframe = Oss.Asn1.Internal.CopyUtil.CopyType(this.Mapframe);
                    break;
                }
                case MessageFrame.Id.RsmFrameChosen:
                {
                    obj0.RsmFrame = Oss.Asn1.Internal.CopyUtil.CopyType(this.RsmFrame);
                    break;
                }
                case MessageFrame.Id.SpatFrameChosen:
                {
                    obj0.SpatFrame = Oss.Asn1.Internal.CopyUtil.CopyType(this.SpatFrame);
                    break;
                }
                case MessageFrame.Id.RsiFrameChosen:
                {
                    obj0.RsiFrame = Oss.Asn1.Internal.CopyUtil.CopyType(this.RsiFrame);
                    break;
                }
                case MessageFrame.Id.TestDataChosen:
                {
                    obj0.TestData = Oss.Asn1.Internal.CopyUtil.CopyType(this.TestData);
                    break;
                }
                case MessageFrame.Id.RtcmDataChosen:
                {
                    obj0.RtcmData = Oss.Asn1.Internal.CopyUtil.CopyType(this.RtcmData);
                    break;
                }
                case MessageFrame.Id.PamDataChosen:
                {
                    obj0.PamData = Oss.Asn1.Internal.CopyUtil.CopyType(this.PamData);
                    break;
                }
                case MessageFrame.Id.PmmDataChosen:
                {
                    obj0.PmmData = Oss.Asn1.Internal.CopyUtil.CopyType(this.PmmData);
                    break;
                }
                case MessageFrame.Id.PsmDataChosen:
                {
                    obj0.PsmData = Oss.Asn1.Internal.CopyUtil.CopyType(this.PsmData);
                    break;
                }
                case MessageFrame.Id.RscDataChosen:
                {
                    obj0.RscData = Oss.Asn1.Internal.CopyUtil.CopyType(this.RscData);
                    break;
                }
                case MessageFrame.Id.SsmDataChosen:
                {
                    obj0.SsmData = Oss.Asn1.Internal.CopyUtil.CopyType(this.SsmData);
                    break;
                }
                case MessageFrame.Id.VirDataChosen:
                {
                    obj0.VirData = Oss.Asn1.Internal.CopyUtil.CopyType(this.VirData);
                    break;
                }
                case MessageFrame.Id.VpmDataChosen:
                {
                    obj0.VpmData = Oss.Asn1.Internal.CopyUtil.CopyType(this.VpmData);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case MessageFrame.Id.VpmDataChosen:
                    {
                        VehiclePaymentMessage data1 = this.VpmData;

                        prt.Write("vpmData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.VirDataChosen:
                    {
                        VehIntentionAndRequest data1 = this.VirData;

                        prt.Write("virData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.SsmDataChosen:
                    {
                        SensorSharingMsg data1 = this.SsmData;

                        prt.Write("ssmData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.RscDataChosen:
                    {
                        RoadsideCoordination data1 = this.RscData;

                        prt.Write("rscData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.PsmDataChosen:
                    {
                        PersonalSafetyMessage data1 = this.PsmData;

                        prt.Write("psmData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.PmmDataChosen:
                    {
                        PlatooningManagementMessage data1 = this.PmmData;

                        prt.Write("pmmData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.PamDataChosen:
                    {
                        MsgFrame.PAMData data1 = this.PamData;

                        prt.Write("pamData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.RtcmDataChosen:
                    {
                        RTCMcorrections data1 = this.RtcmData;

                        prt.Write("rtcmData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.TestDataChosen:
                    {
                        TestMsg data1 = this.TestData;

                        prt.Write("testData : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.RsiFrameChosen:
                    {
                        RoadSideInformation data1 = this.RsiFrame;

                        prt.Write("rsiFrame : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.SpatFrameChosen:
                    {
                        SPAT data1 = this.SpatFrame;

                        prt.Write("spatFrame : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.RsmFrameChosen:
                    {
                        RoadsideSafetyMessage data1 = this.RsmFrame;

                        prt.Write("rsmFrame : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.MapframeChosen:
                    {
                        MapData data1 = this.Mapframe;

                        prt.Write("mapframe : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case MessageFrame.Id.BsmFrameChosen:
                    {
                        BasicSafetyMessage data1 = this.BsmFrame;

                        prt.Write("bsmFrame : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 14)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 15);
                else
                {
                    enc.Output.Write4BitInt((int)this.Selected - 1);
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case MessageFrame.Id.BsmFrameChosen:
                        try {
                            BasicSafetyMessage data1 = this.BsmFrame;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "BsmFrame", "BasicSafetyMessage", "bsmFrame", "BasicSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.MapframeChosen:
                        try {
                            MapData data1 = this.Mapframe;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Mapframe", "MapData", "mapframe", "MapData", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RsmFrameChosen:
                        try {
                            RoadsideSafetyMessage data1 = this.RsmFrame;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RsmFrame", "RoadsideSafetyMessage", "rsmFrame", "RoadsideSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.SpatFrameChosen:
                        try {
                            SPAT data1 = this.SpatFrame;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SpatFrame", "SPAT", "spatFrame", "SPAT", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RsiFrameChosen:
                        try {
                            RoadSideInformation data1 = this.RsiFrame;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RsiFrame", "RoadSideInformation", "rsiFrame", "RoadSideInformation", false); throw;
                        }
                        break;
                    case MessageFrame.Id.TestDataChosen:
                        try {
                            TestMsg data1 = this.TestData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TestData", "TestMsg", "testData", "TestMsg", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RtcmDataChosen:
                        try {
                            RTCMcorrections data1 = this.RtcmData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmData", "RTCMcorrections", "rtcmData", "RTCMcorrections", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PamDataChosen:
                        try {
                            MsgFrame.PAMData data1 = this.PamData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PamData", "MsgFrame.PAMData", "pamData", "PAMData", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PmmDataChosen:
                        try {
                            PlatooningManagementMessage data1 = this.PmmData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PmmData", "PlatooningManagementMessage", "pmmData", "PlatooningManagementMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PsmDataChosen:
                        try {
                            PersonalSafetyMessage data1 = this.PsmData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PsmData", "PersonalSafetyMessage", "psmData", "PersonalSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RscDataChosen:
                        try {
                            RoadsideCoordination data1 = this.RscData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RscData", "RoadsideCoordination", "rscData", "RoadsideCoordination", false); throw;
                        }
                        break;
                    case MessageFrame.Id.SsmDataChosen:
                        try {
                            SensorSharingMsg data1 = this.SsmData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SsmData", "SensorSharingMsg", "ssmData", "SensorSharingMsg", false); throw;
                        }
                        break;
                    case MessageFrame.Id.VirDataChosen:
                        try {
                            VehIntentionAndRequest data1 = this.VirData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "VirData", "VehIntentionAndRequest", "virData", "VehIntentionAndRequest", false); throw;
                        }
                        break;
                    case MessageFrame.Id.VpmDataChosen:
                        try {
                            VehiclePaymentMessage data1 = this.VpmData;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "VpmData", "VehiclePaymentMessage", "vpmData", "VehiclePaymentMessage", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MessageFrame", null, "MessageFrame", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 15;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = dec.Input.Read4BitInt() + 1;
                    if (choice_alt0 > 14)
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                switch ((MessageFrame.Id)choice_alt0)
                {
                    case MessageFrame.Id.BsmFrameChosen:
                        try {
                            BasicSafetyMessage data1 = new BasicSafetyMessage();

                            dec.DecodeType(data1);
                            this.BsmFrame = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "BsmFrame", "BasicSafetyMessage", "bsmFrame", "BasicSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.MapframeChosen:
                        try {
                            MapData data1 = new MapData();

                            dec.DecodeType(data1);
                            this.Mapframe = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Mapframe", "MapData", "mapframe", "MapData", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RsmFrameChosen:
                        try {
                            RoadsideSafetyMessage data1 = new RoadsideSafetyMessage();

                            dec.DecodeType(data1);
                            this.RsmFrame = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RsmFrame", "RoadsideSafetyMessage", "rsmFrame", "RoadsideSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.SpatFrameChosen:
                        try {
                            SPAT data1 = new SPAT();

                            dec.DecodeType(data1);
                            this.SpatFrame = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SpatFrame", "SPAT", "spatFrame", "SPAT", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RsiFrameChosen:
                        try {
                            RoadSideInformation data1 = new RoadSideInformation();

                            dec.DecodeType(data1);
                            this.RsiFrame = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RsiFrame", "RoadSideInformation", "rsiFrame", "RoadSideInformation", false); throw;
                        }
                        break;
                    case MessageFrame.Id.TestDataChosen:
                        try {
                            TestMsg data1 = new TestMsg();

                            dec.DecodeType(data1);
                            this.TestData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TestData", "TestMsg", "testData", "TestMsg", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RtcmDataChosen:
                        try {
                            RTCMcorrections data1 = new RTCMcorrections();

                            dec.DecodeType(data1);
                            this.RtcmData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmData", "RTCMcorrections", "rtcmData", "RTCMcorrections", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PamDataChosen:
                        try {
                            MsgFrame.PAMData data1 = new MsgFrame.PAMData();

                            dec.DecodeType(data1);
                            this.PamData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PamData", "MsgFrame.PAMData", "pamData", "PAMData", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PmmDataChosen:
                        try {
                            PlatooningManagementMessage data1 = new PlatooningManagementMessage();

                            dec.DecodeType(data1);
                            this.PmmData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PmmData", "PlatooningManagementMessage", "pmmData", "PlatooningManagementMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.PsmDataChosen:
                        try {
                            PersonalSafetyMessage data1 = new PersonalSafetyMessage();

                            dec.DecodeType(data1);
                            this.PsmData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PsmData", "PersonalSafetyMessage", "psmData", "PersonalSafetyMessage", false); throw;
                        }
                        break;
                    case MessageFrame.Id.RscDataChosen:
                        try {
                            RoadsideCoordination data1 = new RoadsideCoordination();

                            dec.DecodeType(data1);
                            this.RscData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "RscData", "RoadsideCoordination", "rscData", "RoadsideCoordination", false); throw;
                        }
                        break;
                    case MessageFrame.Id.SsmDataChosen:
                        try {
                            SensorSharingMsg data1 = new SensorSharingMsg();

                            dec.DecodeType(data1);
                            this.SsmData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SsmData", "SensorSharingMsg", "ssmData", "SensorSharingMsg", false); throw;
                        }
                        break;
                    case MessageFrame.Id.VirDataChosen:
                        try {
                            VehIntentionAndRequest data1 = new VehIntentionAndRequest();

                            dec.DecodeType(data1);
                            this.VirData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "VirData", "VehIntentionAndRequest", "virData", "VehIntentionAndRequest", false); throw;
                        }
                        break;
                    case MessageFrame.Id.VpmDataChosen:
                        try {
                            VehiclePaymentMessage data1 = new VehiclePaymentMessage();

                            dec.DecodeType(data1);
                            this.VpmData = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "VpmData", "VehiclePaymentMessage", "vpmData", "VehiclePaymentMessage", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MessageFrame", null, "MessageFrame", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'BasicSafetyMessage' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class BasicSafetyMessage : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'plateNo'</summary>
        public byte[] PlateNo { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }
        /// <summary>Field 'accuracy'</summary>
        public PositionConfidenceSet Accuracy { get; set; }
        /// <summary>Field 'transmission'</summary>
        public TransmissionState Transmission { get; set; }
        /// <summary>Field 'speed'</summary>
        public int Speed { get; set; }
        /// <summary>Field 'heading'</summary>
        public int Heading { get; set; }
        /// <summary>Field 'angle'</summary>
        public long? Angle { get; set; }
        /// <summary>Field 'motionCfd'</summary>
        public MotionConfidenceSet MotionCfd { get; set; }
        /// <summary>Field 'accelSet'</summary>
        public AccelerationSet4Way AccelSet { get; set; }
        /// <summary>Field 'brakes'</summary>
        public BrakeSystemStatus Brakes { get; set; }
        /// <summary>Field 'size'</summary>
        public VehicleSize Size { get; set; }
        /// <summary>Field 'vehicleClass'</summary>
        public VehicleClassification VehicleClass { get; set; }
        /// <summary>Field 'safetyExt'</summary>
        public VehicleSafetyExtensions SafetyExt { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            BasicSafetyMessage that = right as BasicSafetyMessage;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (PlateNo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(PlateNo, that.PlateNo))
                    return false;
            } else if (that.PlateNo != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (Accuracy != null) {
                if (!Accuracy.Equals(that.Accuracy))
                    return false;
            } else if (that.Accuracy != null)
                return false;
            if (Transmission != that.Transmission)
                return false;
            if (Speed != that.Speed)
                return false;
            if (Heading != that.Heading)
                return false;
            if (Angle != null) {
                if (Angle != that.Angle)
                    return false;
            } else if (that.Angle != null)
                return false;
            if (MotionCfd != null) {
                if (!MotionCfd.Equals(that.MotionCfd))
                    return false;
            } else if (that.MotionCfd != null)
                return false;
            if (AccelSet != null) {
                if (!AccelSet.Equals(that.AccelSet))
                    return false;
            } else if (that.AccelSet != null)
                return false;
            if (Brakes != null) {
                if (!Brakes.Equals(that.Brakes))
                    return false;
            } else if (that.Brakes != null)
                return false;
            if (Size != null) {
                if (!Size.Equals(that.Size))
                    return false;
            } else if (that.Size != null)
                return false;
            if (VehicleClass != null) {
                if (!VehicleClass.Equals(that.VehicleClass))
                    return false;
            } else if (that.VehicleClass != null)
                return false;
            if (SafetyExt != null) {
                if (!SafetyExt.Equals(that.SafetyExt))
                    return false;
            } else if (that.SafetyExt != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            if (PlateNo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(PlateNo);
            hash ^= SecMark.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (Accuracy != null)
                hash ^= Accuracy.GetHashCode();
            hash ^= Transmission.GetHashCode();
            hash ^= Speed.GetHashCode();
            hash ^= Heading.GetHashCode();
            if (Angle != null)
                hash ^= Angle.GetHashCode();
            if (MotionCfd != null)
                hash ^= MotionCfd.GetHashCode();
            if (AccelSet != null)
                hash ^= AccelSet.GetHashCode();
            if (Brakes != null)
                hash ^= Brakes.GetHashCode();
            if (Size != null)
                hash ^= Size.GetHashCode();
            if (VehicleClass != null)
                hash ^= VehicleClass.GetHashCode();
            if (SafetyExt != null)
                hash ^= SafetyExt.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "BasicSafetyMessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.PlateNo != null) {
                        if (this.PlateNo.Length < 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PlateNo.Length > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.Accuracy == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Accuracy.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    switch (this.Transmission)
                    {
                        case TransmissionState.Neutral:
                        case TransmissionState.Park:
                        case TransmissionState.ForwardGears:
                        case TransmissionState.ReverseGears:
                        case TransmissionState.Reserved1:
                        case TransmissionState.Reserved2:
                        case TransmissionState.Reserved3:
                        case TransmissionState.Unavailable:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Speed > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Heading > 28800)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Angle != null) {
                        if (this.Angle.Value < -126)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Angle.Value > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle.Value", "long", "angle", "SteeringWheelAngle", false); throw;
                }
                try {
                    if (this.MotionCfd != null) {
                        this.MotionCfd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
                try {
                    if (this.AccelSet == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.AccelSet.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.Brakes == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Brakes.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Brakes", "BrakeSystemStatus", "brakes", "BrakeSystemStatus", false); throw;
                }
                try {
                    if (this.Size == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Size.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                try {
                    if (this.VehicleClass == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.VehicleClass.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                try {
                    if (this.SafetyExt != null) {
                        this.SafetyExt.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SafetyExt", "VehicleSafetyExtensions", "safetyExt", "VehicleSafetyExtensions", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BasicSafetyMessage", null, "BasicSafetyMessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            BasicSafetyMessage obj0 = new BasicSafetyMessage();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.PlateNo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.PlateNo);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.Accuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.Accuracy);
            }
            {
                obj0.Transmission = this.Transmission;
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.Angle = this.Angle;
            }
            {
                obj0.MotionCfd = Oss.Asn1.Internal.CopyUtil.CopyType(this.MotionCfd);
            }
            {
                obj0.AccelSet = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccelSet);
            }
            {
                obj0.Brakes = Oss.Asn1.Internal.CopyUtil.CopyType(this.Brakes);
            }
            {
                obj0.Size = Oss.Asn1.Internal.CopyUtil.CopyType(this.Size);
            }
            {
                obj0.VehicleClass = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleClass);
            }
            {
                obj0.SafetyExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.SafetyExt);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    byte[] data1 = this.PlateNo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("plateNo ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("accuracy ");
                    if (this.Accuracy == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Accuracy);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("transmission ");
                    switch (this.Transmission) {
                    case TransmissionState.Neutral:
                        prt.Write("neutral");
                        break;
                    case TransmissionState.Park:
                        prt.Write("park");
                        break;
                    case TransmissionState.ForwardGears:
                        prt.Write("forwardGears");
                        break;
                    case TransmissionState.ReverseGears:
                        prt.Write("reverseGears");
                        break;
                    case TransmissionState.Reserved1:
                        prt.Write("reserved1");
                        break;
                    case TransmissionState.Reserved2:
                        prt.Write("reserved2");
                        break;
                    case TransmissionState.Reserved3:
                        prt.Write("reserved3");
                        break;
                    case TransmissionState.Unavailable:
                        prt.Write("unavailable");
                        break;
                    default:
                        prt.Write((int)this.Transmission);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("speed ");
                    prt.Write(this.Speed);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("heading ");
                    prt.Write(this.Heading);
                }
                {
                    long? data1 = this.Angle;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("angle ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MotionConfidenceSet data1 = this.MotionCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("motionCfd ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("accelSet ");
                    if (this.AccelSet == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.AccelSet);
                    }
                }
                {
                    BrakeSystemStatus data1 = this.Brakes;

                    prt.WriteLine(",");
                    prt.Write("brakes ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("size ");
                    if (this.Size == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Size);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleClass ");
                    if (this.VehicleClass == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.VehicleClass);
                    }
                }
                {
                    VehicleSafetyExtensions data1 = this.SafetyExt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("safetyExt ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.PlateNo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Angle != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.MotionCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.SafetyExt != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.PlateNo != null)
                    {
                        enc.EncodeOctetString(this.PlateNo, 4, 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    enc.EncodeType(this.Accuracy);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.Transmission, _InternalMetadata.PerCodecMetaData.SortedEnum2);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (enc.BitCount(this.Speed - 0) > 13 || this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed);
                    enc.EncodeConstrainedInteger((this.Speed - (0)), 13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (enc.BitCount(this.Heading - 0) > 15 || this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading);
                    enc.EncodeConstrainedInteger((this.Heading - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Angle != null)
                    {
                        if (enc.BitCount(this.Angle.Value - -126) > 8 || this.Angle.Value < -126)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Angle.Value);
                        enc.Output.Write8BitInt((int)(this.Angle.Value - (-126)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle.Value", "long", "angle", "SteeringWheelAngle", false); throw;
                }
                try {
                    if (this.MotionCfd != null)
                    {
                        enc.EncodeType(this.MotionCfd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
                try {
                    enc.EncodeType(this.AccelSet);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    enc.EncodeType(this.Brakes);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Brakes", "BrakeSystemStatus", "brakes", "BrakeSystemStatus", false); throw;
                }
                try {
                    enc.EncodeType(this.Size);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                try {
                    enc.EncodeType(this.VehicleClass);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                try {
                    VehicleSafetyExtensions data1 = this.SafetyExt;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SafetyExt", "VehicleSafetyExtensions", "safetyExt", "VehicleSafetyExtensions", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BasicSafetyMessage", null, "BasicSafetyMessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.PlateNo = dec.DecodeOctetString(4, 16);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.PlateNo = null;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    PositionConfidenceSet data1 = new PositionConfidenceSet();

                    dec.DecodeType(data1);
                    this.Accuracy = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    this.Transmission = (TransmissionState)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum2);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    this.Speed = dec.DecodeConstrainedInteger(13, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    this.Heading = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Angle = -126 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle", "long", "angle", "SteeringWheelAngle", false); throw;
                    }
                }
                else
                {
                    this.Angle = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MotionConfidenceSet data1 = new MotionConfidenceSet();

                        dec.DecodeType(data1);
                        this.MotionCfd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.MotionCfd = null;
                }
                try {
                    AccelerationSet4Way data1 = new AccelerationSet4Way();

                    dec.DecodeType(data1);
                    this.AccelSet = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    BrakeSystemStatus data1 = new BrakeSystemStatus();

                    dec.DecodeType(data1);
                    this.Brakes = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Brakes", "BrakeSystemStatus", "brakes", "BrakeSystemStatus", false); throw;
                }
                try {
                    VehicleSize data1 = new VehicleSize();

                    dec.DecodeType(data1);
                    this.Size = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                try {
                    VehicleClassification data1 = new VehicleClassification();

                    dec.DecodeType(data1);
                    this.VehicleClass = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        VehicleSafetyExtensions data1 = new VehicleSafetyExtensions();

                        dec.DecodeType(data1);
                        this.SafetyExt = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SafetyExt", "VehicleSafetyExtensions", "safetyExt", "VehicleSafetyExtensions", false); throw;
                    }
                }
                else
                {
                    this.SafetyExt = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BasicSafetyMessage", null, "BasicSafetyMessage", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position3D' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Position3D : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }
        /// <summary>Field 'long'</summary>
        public long Long { get; set; }
        /// <summary>Field 'elevation'</summary>
        public long? Elevation { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Position3D that = right as Position3D;
            if (Lat != that.Lat)
                return false;
            if (Long != that.Long)
                return false;
            if (Elevation != null) {
                if (Elevation != that.Elevation)
                    return false;
            } else if (that.Elevation != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lat.GetHashCode();
            hash ^= Long.GetHashCode();
            if (Elevation != null)
                hash ^= Elevation.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position3D";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lat < -900000000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 900000001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
                try {
                    if (this.Long < -1799999999)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Long > 1800000001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Longitude", false); throw;
                }
                try {
                    if (this.Elevation != null) {
                        if (this.Elevation.Value < -4096)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Elevation.Value > 61439)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation.Value", "long", "elevation", "Elevation", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Position3D", null, "Position3D", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Position3D obj0 = new Position3D();
            {
                obj0.Lat = this.Lat;
            }
            {
                obj0.Long = this.Long;
            }
            {
                obj0.Elevation = this.Elevation;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("long ");
                    prt.Write(this.Long);
                }
                {
                    long? data1 = this.Elevation;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("elevation ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Elevation != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.Lat - -900000000) > 31 || this.Lat < -900000000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-900000000)), 31);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
                try {
                    if (enc.BitCount(this.Long - -1799999999) > 32 || this.Long < -1799999999)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Long);
                    enc.EncodeConstrainedLongInteger((long)(this.Long - (-1799999999)), 32);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Longitude", false); throw;
                }
                try {
                    if (this.Elevation != null)
                    {
                        if (enc.BitCount(this.Elevation.Value - -4096) > 16 || this.Elevation.Value < -4096)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Elevation.Value);
                        enc.EncodeConstrainedLongInteger((long)(this.Elevation.Value - (-4096)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation.Value", "long", "elevation", "Elevation", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Position3D", null, "Position3D", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(31, -900000000);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
                try {
                    this.Long = dec.DecodeConstrainedLongInteger(32, -1799999999);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Longitude", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Elevation = dec.DecodeConstrainedLongInteger(16, -4096);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation", "long", "elevation", "Elevation", false); throw;
                    }
                }
                else
                {
                    this.Elevation = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Position3D", null, "Position3D", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PositionConfidenceSet' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionConfidenceSet : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pos'</summary>
        public PositionConfidence Pos { get; set; }
        /// <summary>Field 'elevation'</summary>
        public ElevationConfidence? Elevation { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionConfidenceSet that = right as PositionConfidenceSet;
            if (Pos != that.Pos)
                return false;
            if (Elevation != null) {
                if (Elevation != that.Elevation)
                    return false;
            } else if (that.Elevation != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Pos.GetHashCode();
            if (Elevation != null)
                hash ^= Elevation.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PositionConfidenceSet";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.Pos)
                    {
                        case PositionConfidence.Unavailable:
                        case PositionConfidence.A500m:
                        case PositionConfidence.A200m:
                        case PositionConfidence.AlOOm:
                        case PositionConfidence.A50m:
                        case PositionConfidence.A20m:
                        case PositionConfidence.AlOm:
                        case PositionConfidence.A5m:
                        case PositionConfidence.A2m:
                        case PositionConfidence.Alm:
                        case PositionConfidence.A50cm:
                        case PositionConfidence.A20cm:
                        case PositionConfidence.AlOcm:
                        case PositionConfidence.A5cm:
                        case PositionConfidence.A2cm:
                        case PositionConfidence.Alcm:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionConfidence", "pos", "PositionConfidence", false); throw;
                }
                try {
                    if (this.Elevation != null) {
                        switch (this.Elevation.Value)
                        {
                            case ElevationConfidence.Unavailable:
                            case ElevationConfidence.Elev50000:
                            case ElevationConfidence.Elev20000:
                            case ElevationConfidence.Elev10000:
                            case ElevationConfidence.Elev05000:
                            case ElevationConfidence.Elev02000:
                            case ElevationConfidence.Elev01000:
                            case ElevationConfidence.Elev00500:
                            case ElevationConfidence.Elev00200:
                            case ElevationConfidence.Elev00100:
                            case ElevationConfidence.Elev00050:
                            case ElevationConfidence.Elev00020:
                            case ElevationConfidence.Elev00010:
                            case ElevationConfidence.Elev00005:
                            case ElevationConfidence.Elev00002:
                            case ElevationConfidence.Elev00001:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation.Value", "ElevationConfidence", "elevation", "ElevationConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionConfidenceSet", null, "PositionConfidenceSet", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionConfidenceSet obj0 = new PositionConfidenceSet();
            {
                obj0.Pos = this.Pos;
            }
            {
                obj0.Elevation = this.Elevation;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pos ");
                    switch (this.Pos) {
                    case PositionConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case PositionConfidence.A500m:
                        prt.Write("a500m");
                        break;
                    case PositionConfidence.A200m:
                        prt.Write("a200m");
                        break;
                    case PositionConfidence.AlOOm:
                        prt.Write("alOOm");
                        break;
                    case PositionConfidence.A50m:
                        prt.Write("a50m");
                        break;
                    case PositionConfidence.A20m:
                        prt.Write("a20m");
                        break;
                    case PositionConfidence.AlOm:
                        prt.Write("alOm");
                        break;
                    case PositionConfidence.A5m:
                        prt.Write("a5m");
                        break;
                    case PositionConfidence.A2m:
                        prt.Write("a2m");
                        break;
                    case PositionConfidence.Alm:
                        prt.Write("alm");
                        break;
                    case PositionConfidence.A50cm:
                        prt.Write("a50cm");
                        break;
                    case PositionConfidence.A20cm:
                        prt.Write("a20cm");
                        break;
                    case PositionConfidence.AlOcm:
                        prt.Write("alOcm");
                        break;
                    case PositionConfidence.A5cm:
                        prt.Write("a5cm");
                        break;
                    case PositionConfidence.A2cm:
                        prt.Write("a2cm");
                        break;
                    case PositionConfidence.Alcm:
                        prt.Write("alcm");
                        break;
                    default:
                        prt.Write((int)this.Pos);
                        break;
                    }
                }
                {
                    ElevationConfidence? data1 = this.Elevation;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("elevation ");
                        switch (data1.Value) {
                        case ElevationConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case ElevationConfidence.Elev50000:
                            prt.Write("elev-500-00");
                            break;
                        case ElevationConfidence.Elev20000:
                            prt.Write("elev-200-00");
                            break;
                        case ElevationConfidence.Elev10000:
                            prt.Write("elev-100-00");
                            break;
                        case ElevationConfidence.Elev05000:
                            prt.Write("elev-050-00");
                            break;
                        case ElevationConfidence.Elev02000:
                            prt.Write("elev-020-00");
                            break;
                        case ElevationConfidence.Elev01000:
                            prt.Write("elev-010-00");
                            break;
                        case ElevationConfidence.Elev00500:
                            prt.Write("elev-005-00");
                            break;
                        case ElevationConfidence.Elev00200:
                            prt.Write("elev-002-00");
                            break;
                        case ElevationConfidence.Elev00100:
                            prt.Write("elev-001-00");
                            break;
                        case ElevationConfidence.Elev00050:
                            prt.Write("elev-000-50");
                            break;
                        case ElevationConfidence.Elev00020:
                            prt.Write("elev-000-20");
                            break;
                        case ElevationConfidence.Elev00010:
                            prt.Write("elev-000-10");
                            break;
                        case ElevationConfidence.Elev00005:
                            prt.Write("elev-000-05");
                            break;
                        case ElevationConfidence.Elev00002:
                            prt.Write("elev-000-02");
                            break;
                        case ElevationConfidence.Elev00001:
                            prt.Write("elev-000-01");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Elevation != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeEnum((int)this.Pos, _InternalMetadata.PerCodecMetaData.SortedEnum0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionConfidence", "pos", "PositionConfidence", false); throw;
                }
                try {
                    if (this.Elevation != null)
                    {
                        enc.EncodeEnum((int)this.Elevation.Value, _InternalMetadata.PerCodecMetaData.SortedEnum1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation.Value", "ElevationConfidence", "elevation", "ElevationConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionConfidenceSet", null, "PositionConfidenceSet", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Pos = (PositionConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionConfidence", "pos", "PositionConfidence", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Elevation = (ElevationConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation", "ElevationConfidence", "elevation", "ElevationConfidence", false); throw;
                    }
                }
                else
                {
                    this.Elevation = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionConfidenceSet", null, "PositionConfidenceSet", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PositionConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum PositionConfidence
    {
        Unavailable = 0,
        A500m = 1,
        A200m = 2,
        AlOOm = 3,
        A50m = 4,
        A20m = 5,
        AlOm = 6,
        A5m = 7,
        A2m = 8,
        Alm = 9,
        A50cm = 10,
        A20cm = 11,
        AlOcm = 12,
        A5cm = 13,
        A2cm = 14,
        Alcm = 15
    }
    /// <summary>
    /// Represents schema type 'ElevationConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ElevationConfidence
    {
        Unavailable = 0,
        Elev50000 = 1,
        Elev20000 = 2,
        Elev10000 = 3,
        Elev05000 = 4,
        Elev02000 = 5,
        Elev01000 = 6,
        Elev00500 = 7,
        Elev00200 = 8,
        Elev00100 = 9,
        Elev00050 = 10,
        Elev00020 = 11,
        Elev00010 = 12,
        Elev00005 = 13,
        Elev00002 = 14,
        Elev00001 = 15
    }
    /// <summary>
    /// Represents schema type 'TransmissionState' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TransmissionState
    {
        Neutral = 0,
        Park = 1,
        ForwardGears = 2,
        ReverseGears = 3,
        Reserved1 = 4,
        Reserved2 = 5,
        Reserved3 = 6,
        Unavailable = 7
    }
    /// <summary>
    /// Represents schema type 'MotionConfidenceSet' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MotionConfidenceSet : Oss.Asn1.BaseType
    {
        /// <summary>Field 'speedCfd'</summary>
        public SpeedConfidence? SpeedCfd { get; set; }
        /// <summary>Field 'headingCfd'</summary>
        public HeadingConfidence? HeadingCfd { get; set; }
        /// <summary>Field 'steerCfd'</summary>
        public SteeringWheelAngleConfidence? SteerCfd { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MotionConfidenceSet that = right as MotionConfidenceSet;
            if (SpeedCfd != null) {
                if (SpeedCfd != that.SpeedCfd)
                    return false;
            } else if (that.SpeedCfd != null)
                return false;
            if (HeadingCfd != null) {
                if (HeadingCfd != that.HeadingCfd)
                    return false;
            } else if (that.HeadingCfd != null)
                return false;
            if (SteerCfd != null) {
                if (SteerCfd != that.SteerCfd)
                    return false;
            } else if (that.SteerCfd != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (SpeedCfd != null)
                hash ^= SpeedCfd.GetHashCode();
            if (HeadingCfd != null)
                hash ^= HeadingCfd.GetHashCode();
            if (SteerCfd != null)
                hash ^= SteerCfd.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MotionConfidenceSet";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SpeedCfd != null) {
                        switch (this.SpeedCfd.Value)
                        {
                            case SpeedConfidence.Unavailable:
                            case SpeedConfidence.Prec100ms:
                            case SpeedConfidence.Prec10ms:
                            case SpeedConfidence.Prec5ms:
                            case SpeedConfidence.Prec1ms:
                            case SpeedConfidence.Prec01ms:
                            case SpeedConfidence.Prec005ms:
                            case SpeedConfidence.Prec001ms:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.HeadingCfd != null) {
                        switch (this.HeadingCfd.Value)
                        {
                            case HeadingConfidence.Unavailable:
                            case HeadingConfidence.Precl0deg:
                            case HeadingConfidence.Prec05deg:
                            case HeadingConfidence.Prec0ldegId0:
                            case HeadingConfidence.Prec0LdegId:
                            case HeadingConfidence.Prec005deg:
                            case HeadingConfidence.PrecO0ldeg:
                            case HeadingConfidence.Prec00125deg:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.SteerCfd != null) {
                        switch (this.SteerCfd.Value)
                        {
                            case SteeringWheelAngleConfidence.Unavailable:
                            case SteeringWheelAngleConfidence.Prec2deg:
                            case SteeringWheelAngleConfidence.PrecIDeg:
                            case SteeringWheelAngleConfidence.Prec002deg:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SteerCfd.Value", "SteeringWheelAngleConfidence", "steerCfd", "SteeringWheelAngleConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotionConfidenceSet", null, "MotionConfidenceSet", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MotionConfidenceSet obj0 = new MotionConfidenceSet();
            {
                obj0.SpeedCfd = this.SpeedCfd;
            }
            {
                obj0.HeadingCfd = this.HeadingCfd;
            }
            {
                obj0.SteerCfd = this.SteerCfd;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    SpeedConfidence? data1 = this.SpeedCfd;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("speedCfd ");
                        switch (data1.Value) {
                        case SpeedConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SpeedConfidence.Prec100ms:
                            prt.Write("prec100ms");
                            break;
                        case SpeedConfidence.Prec10ms:
                            prt.Write("prec10ms");
                            break;
                        case SpeedConfidence.Prec5ms:
                            prt.Write("prec5ms");
                            break;
                        case SpeedConfidence.Prec1ms:
                            prt.Write("prec1ms");
                            break;
                        case SpeedConfidence.Prec01ms:
                            prt.Write("prec0-1ms");
                            break;
                        case SpeedConfidence.Prec005ms:
                            prt.Write("prec0-05ms");
                            break;
                        case SpeedConfidence.Prec001ms:
                            prt.Write("prec0-01ms");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    HeadingConfidence? data1 = this.HeadingCfd;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("headingCfd ");
                        switch (data1.Value) {
                        case HeadingConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case HeadingConfidence.Precl0deg:
                            prt.Write("precl0deg");
                            break;
                        case HeadingConfidence.Prec05deg:
                            prt.Write("prec05deg");
                            break;
                        case HeadingConfidence.Prec0ldegId0:
                            prt.Write("prec0ldeg");
                            break;
                        case HeadingConfidence.Prec0LdegId:
                            prt.Write("prec0-ldeg");
                            break;
                        case HeadingConfidence.Prec005deg:
                            prt.Write("prec0-05deg");
                            break;
                        case HeadingConfidence.PrecO0ldeg:
                            prt.Write("precO-0ldeg");
                            break;
                        case HeadingConfidence.Prec00125deg:
                            prt.Write("prec0-0125deg");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    SteeringWheelAngleConfidence? data1 = this.SteerCfd;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("steerCfd ");
                        switch (data1.Value) {
                        case SteeringWheelAngleConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SteeringWheelAngleConfidence.Prec2deg:
                            prt.Write("prec2deg");
                            break;
                        case SteeringWheelAngleConfidence.PrecIDeg:
                            prt.Write("precIDeg");
                            break;
                        case SteeringWheelAngleConfidence.Prec002deg:
                            prt.Write("prec0-02deg");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.SpeedCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.HeadingCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.SteerCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (this.SpeedCfd != null)
                    {
                        enc.EncodeEnum((int)this.SpeedCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum3);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.HeadingCfd != null)
                    {
                        enc.EncodeEnum((int)this.HeadingCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.SteerCfd != null)
                    {
                        enc.EncodeEnum((int)this.SteerCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum5);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SteerCfd.Value", "SteeringWheelAngleConfidence", "steerCfd", "SteeringWheelAngleConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotionConfidenceSet", null, "MotionConfidenceSet", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.SpeedCfd = (SpeedConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum3);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                    }
                }
                else
                {
                    this.SpeedCfd = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.HeadingCfd = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                    }
                }
                else
                {
                    this.HeadingCfd = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.SteerCfd = (SteeringWheelAngleConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum5);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SteerCfd", "SteeringWheelAngleConfidence", "steerCfd", "SteeringWheelAngleConfidence", false); throw;
                    }
                }
                else
                {
                    this.SteerCfd = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotionConfidenceSet", null, "MotionConfidenceSet", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SpeedConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SpeedConfidence
    {
        Unavailable = 0,
        Prec100ms = 1,
        Prec10ms = 2,
        Prec5ms = 3,
        Prec1ms = 4,
        Prec01ms = 5,
        Prec005ms = 6,
        Prec001ms = 7
    }
    /// <summary>
    /// Represents schema type 'HeadingConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum HeadingConfidence
    {
        Unavailable = 0,
        Precl0deg = 1,
        Prec05deg = 2,
        Prec0ldegId0 = 3,
        Prec0LdegId = 4,
        Prec005deg = 5,
        PrecO0ldeg = 6,
        Prec00125deg = 7
    }
    /// <summary>
    /// Represents schema type 'SteeringWheelAngleConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SteeringWheelAngleConfidence
    {
        Unavailable = 0,
        Prec2deg = 1,
        PrecIDeg = 2,
        Prec002deg = 3
    }
    /// <summary>
    /// Represents schema type 'AccelerationSet4Way' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AccelerationSet4Way : Oss.Asn1.BaseType
    {
        /// <summary>Field 'long'</summary>
        public long Long { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }
        /// <summary>Field 'vert'</summary>
        public long Vert { get; set; }
        /// <summary>Field 'yaw'</summary>
        public long Yaw { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AccelerationSet4Way that = right as AccelerationSet4Way;
            if (Long != that.Long)
                return false;
            if (Lat != that.Lat)
                return false;
            if (Vert != that.Vert)
                return false;
            if (Yaw != that.Yaw)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Long.GetHashCode();
            hash ^= Lat.GetHashCode();
            hash ^= Vert.GetHashCode();
            hash ^= Yaw.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AccelerationSet4Way";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Long < -2000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Long > 2001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Acceleration", false); throw;
                }
                try {
                    if (this.Lat < -2000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 2001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Acceleration", false); throw;
                }
                try {
                    if (this.Vert < -127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Vert > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vert", "long", "vert", "VerticalAcceleration", false); throw;
                }
                try {
                    if (this.Yaw < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Yaw > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccelerationSet4Way", null, "AccelerationSet4Way", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AccelerationSet4Way obj0 = new AccelerationSet4Way();
            {
                obj0.Long = this.Long;
            }
            {
                obj0.Lat = this.Lat;
            }
            {
                obj0.Vert = this.Vert;
            }
            {
                obj0.Yaw = this.Yaw;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("long ");
                    prt.Write(this.Long);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vert ");
                    prt.Write(this.Vert);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yaw ");
                    prt.Write(this.Yaw);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Long - -2000) > 12 || this.Long < -2000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Long);
                    enc.EncodeConstrainedLongInteger((long)(this.Long - (-2000)), 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Acceleration", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -2000) > 12 || this.Lat < -2000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-2000)), 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Acceleration", false); throw;
                }
                try {
                    if (enc.BitCount(this.Vert - -127) > 8 || this.Vert < -127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Vert);
                    enc.Output.Write8BitInt((int)(this.Vert - (-127)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vert", "long", "vert", "VerticalAcceleration", false); throw;
                }
                try {
                    if (enc.BitCount(this.Yaw - -32767) > 16 || this.Yaw < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Yaw);
                    enc.EncodeConstrainedLongInteger((long)(this.Yaw - (-32767)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccelerationSet4Way", null, "AccelerationSet4Way", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Long = dec.DecodeConstrainedLongInteger(12, -2000);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Long", "long", "long", "Acceleration", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(12, -2000);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Acceleration", false); throw;
                }
                try {
                    this.Vert = -127 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vert", "long", "vert", "VerticalAcceleration", false); throw;
                }
                try {
                    this.Yaw = dec.DecodeConstrainedLongInteger(16, -32767);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccelerationSet4Way", null, "AccelerationSet4Way", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'BrakeSystemStatus' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class BrakeSystemStatus : Oss.Asn1.BaseType
    {
        /// <summary>Field 'brakePadel'</summary>
        public BrakePedalStatus? BrakePadel { get; set; }
        /// <summary>Field 'wheelBrakes'</summary>
        public Oss.Asn1.BitStringWithNamedBits WheelBrakes { get; set; }
        /// <summary>Field 'traction'</summary>
        public TractionControlStatus? Traction { get; set; }
        /// <summary>Field 'abs'</summary>
        public AntiLockBrakeStatus? Abs { get; set; }
        /// <summary>Field 'scs'</summary>
        public StabilityControlStatus? Scs { get; set; }
        /// <summary>Field 'brakeBoost'</summary>
        public BrakeBoostApplied? BrakeBoost { get; set; }
        /// <summary>Field 'auxBrakes'</summary>
        public AuxiliaryBrakeStatus? AuxBrakes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            BrakeSystemStatus that = right as BrakeSystemStatus;
            if (BrakePadel != null) {
                if (BrakePadel != that.BrakePadel)
                    return false;
            } else if (that.BrakePadel != null)
                return false;
            if (WheelBrakes != null) {
                if (!WheelBrakes.Equals(that.WheelBrakes))
                    return false;
            } else if (that.WheelBrakes != null)
                return false;
            if (Traction != null) {
                if (Traction != that.Traction)
                    return false;
            } else if (that.Traction != null)
                return false;
            if (Abs != null) {
                if (Abs != that.Abs)
                    return false;
            } else if (that.Abs != null)
                return false;
            if (Scs != null) {
                if (Scs != that.Scs)
                    return false;
            } else if (that.Scs != null)
                return false;
            if (BrakeBoost != null) {
                if (BrakeBoost != that.BrakeBoost)
                    return false;
            } else if (that.BrakeBoost != null)
                return false;
            if (AuxBrakes != null) {
                if (AuxBrakes != that.AuxBrakes)
                    return false;
            } else if (that.AuxBrakes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (BrakePadel != null)
                hash ^= BrakePadel.GetHashCode();
            if (WheelBrakes != null)
                hash ^= WheelBrakes.GetHashCode();
            if (Traction != null)
                hash ^= Traction.GetHashCode();
            if (Abs != null)
                hash ^= Abs.GetHashCode();
            if (Scs != null)
                hash ^= Scs.GetHashCode();
            if (BrakeBoost != null)
                hash ^= BrakeBoost.GetHashCode();
            if (AuxBrakes != null)
                hash ^= AuxBrakes.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "BrakeSystemStatus";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.BrakePadel != null) {
                        switch (this.BrakePadel.Value)
                        {
                            case BrakePedalStatus.Unavailable:
                            case BrakePedalStatus.Off:
                            case BrakePedalStatus.On:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakePadel.Value", "BrakePedalStatus", "brakePadel", "BrakePedalStatus", false); throw;
                }
                try {
                    if (this.WheelBrakes != null) {
                        if (this.WheelBrakes.Count != 5)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WheelBrakes", "Oss.Asn1.BitStringWithNamedBits", "wheelBrakes", "BrakeAppliedStatus", false); throw;
                }
                try {
                    if (this.Traction != null) {
                        switch (this.Traction.Value)
                        {
                            case TractionControlStatus.Unavailable:
                            case TractionControlStatus.Off:
                            case TractionControlStatus.On:
                            case TractionControlStatus.Engaged:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Traction.Value", "TractionControlStatus", "traction", "TractionControlStatus", false); throw;
                }
                try {
                    if (this.Abs != null) {
                        switch (this.Abs.Value)
                        {
                            case AntiLockBrakeStatus.Unavailable:
                            case AntiLockBrakeStatus.Off:
                            case AntiLockBrakeStatus.On:
                            case AntiLockBrakeStatus.Engaged:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Abs.Value", "AntiLockBrakeStatus", "abs", "AntiLockBrakeStatus", false); throw;
                }
                try {
                    if (this.Scs != null) {
                        switch (this.Scs.Value)
                        {
                            case StabilityControlStatus.Unavailable:
                            case StabilityControlStatus.Off:
                            case StabilityControlStatus.On:
                            case StabilityControlStatus.Engaged:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Scs.Value", "StabilityControlStatus", "scs", "StabilityControlStatus", false); throw;
                }
                try {
                    if (this.BrakeBoost != null) {
                        switch (this.BrakeBoost.Value)
                        {
                            case BrakeBoostApplied.Unavailable:
                            case BrakeBoostApplied.Off:
                            case BrakeBoostApplied.On:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakeBoost.Value", "BrakeBoostApplied", "brakeBoost", "BrakeBoostApplied", false); throw;
                }
                try {
                    if (this.AuxBrakes != null) {
                        switch (this.AuxBrakes.Value)
                        {
                            case AuxiliaryBrakeStatus.Unavailable:
                            case AuxiliaryBrakeStatus.Off:
                            case AuxiliaryBrakeStatus.On:
                            case AuxiliaryBrakeStatus.Reserved:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxBrakes.Value", "AuxiliaryBrakeStatus", "auxBrakes", "AuxiliaryBrakeStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BrakeSystemStatus", null, "BrakeSystemStatus", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            BrakeSystemStatus obj0 = new BrakeSystemStatus();
            {
                obj0.BrakePadel = this.BrakePadel;
            }
            {
                obj0.WheelBrakes = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.WheelBrakes);
            }
            {
                obj0.Traction = this.Traction;
            }
            {
                obj0.Abs = this.Abs;
            }
            {
                obj0.Scs = this.Scs;
            }
            {
                obj0.BrakeBoost = this.BrakeBoost;
            }
            {
                obj0.AuxBrakes = this.AuxBrakes;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    BrakePedalStatus? data1 = this.BrakePadel;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("brakePadel ");
                        switch (data1.Value) {
                        case BrakePedalStatus.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case BrakePedalStatus.Off:
                            prt.Write("off");
                            break;
                        case BrakePedalStatus.On:
                            prt.Write("on");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.WheelBrakes;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("wheelBrakes ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unavailable";
                                    case (int)1: return "leftFront";
                                    case (int)2: return "leftRear";
                                    case (int)3: return "rightFront";
                                    case (int)4: return "rightRear";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    TractionControlStatus? data1 = this.Traction;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("traction ");
                        switch (data1.Value) {
                        case TractionControlStatus.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case TractionControlStatus.Off:
                            prt.Write("off");
                            break;
                        case TractionControlStatus.On:
                            prt.Write("on");
                            break;
                        case TractionControlStatus.Engaged:
                            prt.Write("engaged");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    AntiLockBrakeStatus? data1 = this.Abs;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("abs ");
                        switch (data1.Value) {
                        case AntiLockBrakeStatus.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case AntiLockBrakeStatus.Off:
                            prt.Write("off");
                            break;
                        case AntiLockBrakeStatus.On:
                            prt.Write("on");
                            break;
                        case AntiLockBrakeStatus.Engaged:
                            prt.Write("engaged");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    StabilityControlStatus? data1 = this.Scs;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("scs ");
                        switch (data1.Value) {
                        case StabilityControlStatus.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case StabilityControlStatus.Off:
                            prt.Write("off");
                            break;
                        case StabilityControlStatus.On:
                            prt.Write("on");
                            break;
                        case StabilityControlStatus.Engaged:
                            prt.Write("engaged");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    BrakeBoostApplied? data1 = this.BrakeBoost;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("brakeBoost ");
                        switch (data1.Value) {
                        case BrakeBoostApplied.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case BrakeBoostApplied.Off:
                            prt.Write("off");
                            break;
                        case BrakeBoostApplied.On:
                            prt.Write("on");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    AuxiliaryBrakeStatus? data1 = this.AuxBrakes;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("auxBrakes ");
                        switch (data1.Value) {
                        case AuxiliaryBrakeStatus.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case AuxiliaryBrakeStatus.Off:
                            prt.Write("off");
                            break;
                        case AuxiliaryBrakeStatus.On:
                            prt.Write("on");
                            break;
                        case AuxiliaryBrakeStatus.Reserved:
                            prt.Write("reserved");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.BrakePadel != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.WheelBrakes != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Traction != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Abs != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.Scs != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.BrakeBoost != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.AuxBrakes != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                enc.Output.WriteBits(optMask0, 0, 7);
                try {
                    if (this.BrakePadel != null)
                    {
                        enc.EncodeEnum((int)this.BrakePadel.Value, _InternalMetadata.PerCodecMetaData.SortedEnum6);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakePadel.Value", "BrakePedalStatus", "brakePadel", "BrakePedalStatus", false); throw;
                }
                try {
                    if (this.WheelBrakes != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges1, this.WheelBrakes.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.WheelBrakes, length1, 5);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WheelBrakes", "Oss.Asn1.BitStringWithNamedBits", "wheelBrakes", "BrakeAppliedStatus", false); throw;
                }
                try {
                    if (this.Traction != null)
                    {
                        enc.EncodeEnum((int)this.Traction.Value, _InternalMetadata.PerCodecMetaData.SortedEnum7);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Traction.Value", "TractionControlStatus", "traction", "TractionControlStatus", false); throw;
                }
                try {
                    if (this.Abs != null)
                    {
                        enc.EncodeEnum((int)this.Abs.Value, _InternalMetadata.PerCodecMetaData.SortedEnum8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Abs.Value", "AntiLockBrakeStatus", "abs", "AntiLockBrakeStatus", false); throw;
                }
                try {
                    if (this.Scs != null)
                    {
                        enc.EncodeEnum((int)this.Scs.Value, _InternalMetadata.PerCodecMetaData.SortedEnum9);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Scs.Value", "StabilityControlStatus", "scs", "StabilityControlStatus", false); throw;
                }
                try {
                    if (this.BrakeBoost != null)
                    {
                        enc.EncodeEnum((int)this.BrakeBoost.Value, _InternalMetadata.PerCodecMetaData.SortedEnum10);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakeBoost.Value", "BrakeBoostApplied", "brakeBoost", "BrakeBoostApplied", false); throw;
                }
                try {
                    if (this.AuxBrakes != null)
                    {
                        enc.EncodeEnum((int)this.AuxBrakes.Value, _InternalMetadata.PerCodecMetaData.SortedEnum11);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxBrakes.Value", "AuxiliaryBrakeStatus", "auxBrakes", "AuxiliaryBrakeStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BrakeSystemStatus", null, "BrakeSystemStatus", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 7);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.BrakePadel = (BrakePedalStatus)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum6);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakePadel", "BrakePedalStatus", "brakePadel", "BrakePedalStatus", false); throw;
                    }
                }
                else
                {
                    this.BrakePadel = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.WheelBrakes = dec.DecodeBitStringWithNamedBits(5, _InternalMetadata.BerCodecMetaData.Ranges1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "WheelBrakes", "Oss.Asn1.BitStringWithNamedBits", "wheelBrakes", "BrakeAppliedStatus", false); throw;
                    }
                }
                else
                {
                    this.WheelBrakes = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Traction = (TractionControlStatus)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum7);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Traction", "TractionControlStatus", "traction", "TractionControlStatus", false); throw;
                    }
                }
                else
                {
                    this.Traction = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Abs = (AntiLockBrakeStatus)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Abs", "AntiLockBrakeStatus", "abs", "AntiLockBrakeStatus", false); throw;
                    }
                }
                else
                {
                    this.Abs = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.Scs = (StabilityControlStatus)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum9);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Scs", "StabilityControlStatus", "scs", "StabilityControlStatus", false); throw;
                    }
                }
                else
                {
                    this.Scs = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.BrakeBoost = (BrakeBoostApplied)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum10);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "BrakeBoost", "BrakeBoostApplied", "brakeBoost", "BrakeBoostApplied", false); throw;
                    }
                }
                else
                {
                    this.BrakeBoost = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        this.AuxBrakes = (AuxiliaryBrakeStatus)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum11);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxBrakes", "AuxiliaryBrakeStatus", "auxBrakes", "AuxiliaryBrakeStatus", false); throw;
                    }
                }
                else
                {
                    this.AuxBrakes = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "BrakeSystemStatus", null, "BrakeSystemStatus", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'BrakePedalStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum BrakePedalStatus
    {
        Unavailable = 0,
        Off = 1,
        On = 2
    }
    /// <summary>
    /// Represents schema type 'BrakeAppliedStatus' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum BrakeAppliedStatus
    {
        Unavailable = 0,
        LeftFront = 1,
        LeftRear = 2,
        RightFront = 3,
        RightRear = 4
    }
    /// <summary>
    /// Represents schema type 'TractionControlStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TractionControlStatus
    {
        Unavailable = 0,
        Off = 1,
        On = 2,
        Engaged = 3
    }
    /// <summary>
    /// Represents schema type 'AntiLockBrakeStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AntiLockBrakeStatus
    {
        Unavailable = 0,
        Off = 1,
        On = 2,
        Engaged = 3
    }
    /// <summary>
    /// Represents schema type 'StabilityControlStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum StabilityControlStatus
    {
        Unavailable = 0,
        Off = 1,
        On = 2,
        Engaged = 3
    }
    /// <summary>
    /// Represents schema type 'BrakeBoostApplied' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum BrakeBoostApplied
    {
        Unavailable = 0,
        Off = 1,
        On = 2
    }
    /// <summary>
    /// Represents schema type 'AuxiliaryBrakeStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AuxiliaryBrakeStatus
    {
        Unavailable = 0,
        Off = 1,
        On = 2,
        Reserved = 3
    }
    /// <summary>
    /// Represents schema type 'VehicleSize' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleSize : Oss.Asn1.BaseType
    {
        /// <summary>Field 'width'</summary>
        public int Width { get; set; }
        /// <summary>Field 'length'</summary>
        public int Length { get; set; }
        /// <summary>Field 'height'</summary>
        public int? Height { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleSize that = right as VehicleSize;
            if (Width != that.Width)
                return false;
            if (Length != that.Length)
                return false;
            if (Height != null) {
                if (Height != that.Height)
                    return false;
            } else if (that.Height != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Width.GetHashCode();
            hash ^= Length.GetHashCode();
            if (Height != null)
                hash ^= Height.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleSize";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Width < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Width > 1023)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "VehicleWidth", false); throw;
                }
                try {
                    if (this.Length < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Length > 4095)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "VehicleLength", false); throw;
                }
                try {
                    if (this.Height != null) {
                        if (this.Height.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Height.Value > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Height.Value", "int", "height", "VehicleHeight", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSize", null, "VehicleSize", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleSize obj0 = new VehicleSize();
            {
                obj0.Width = this.Width;
            }
            {
                obj0.Length = this.Length;
            }
            {
                obj0.Height = this.Height;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("width ");
                    prt.Write(this.Width);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("length ");
                    prt.Write(this.Length);
                }
                {
                    int? data1 = this.Height;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("height ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Height != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.Width - 0) > 10 || this.Width < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Width);
                    enc.EncodeConstrainedInteger((this.Width - (0)), 10);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "VehicleWidth", false); throw;
                }
                try {
                    if (enc.BitCount(this.Length - 0) > 12 || this.Length < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Length);
                    enc.EncodeConstrainedInteger((this.Length - (0)), 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "VehicleLength", false); throw;
                }
                try {
                    if (this.Height != null)
                    {
                        if (enc.BitCount(this.Height.Value - 0) > 7 || this.Height.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Height.Value);
                        enc.Output.Write7BitInt((this.Height.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Height.Value", "int", "height", "VehicleHeight", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSize", null, "VehicleSize", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Width = dec.DecodeConstrainedInteger(10, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "VehicleWidth", false); throw;
                }
                try {
                    this.Length = dec.DecodeConstrainedInteger(12, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "VehicleLength", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Height = 0 + dec.Input.Read7BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Height", "int", "height", "VehicleHeight", false); throw;
                    }
                }
                else
                {
                    this.Height = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSize", null, "VehicleSize", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleClassification' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleClassification : Oss.Asn1.BaseType
    {
        /// <summary>Field 'classification'</summary>
        public int Classification { get; set; }
        /// <summary>Field 'fuelType'</summary>
        public int? FuelType { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleClassification that = right as VehicleClassification;
            if (Classification != that.Classification)
                return false;
            if (FuelType != null) {
                if (FuelType != that.FuelType)
                    return false;
            } else if (that.FuelType != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Classification.GetHashCode();
            if (FuelType != null)
                hash ^= FuelType.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleClassification";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Classification < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Classification > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Classification", "int", "classification", "BasicVehicleClass", false); throw;
                }
                try {
                    if (this.FuelType != null) {
                        if (this.FuelType.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.FuelType.Value > 15)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "FuelType.Value", "int", "fuelType", "FuelType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleClassification", null, "VehicleClassification", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleClassification obj0 = new VehicleClassification();
            {
                obj0.Classification = this.Classification;
            }
            {
                obj0.FuelType = this.FuelType;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("classification ");
                    prt.Write(this.Classification);
                }
                {
                    int? data1 = this.FuelType;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("fuelType ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.FuelType != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.Classification - 0) > 8 || this.Classification < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Classification);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.Classification - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Classification", "int", "classification", "BasicVehicleClass", false); throw;
                }
                try {
                    if (this.FuelType != null)
                    {
                        if (enc.BitCount(this.FuelType.Value - 0) > 4 || this.FuelType.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.FuelType.Value);
                        enc.Output.Write4BitInt((this.FuelType.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "FuelType.Value", "int", "fuelType", "FuelType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleClassification", null, "VehicleClassification", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.Classification = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Classification", "int", "classification", "BasicVehicleClass", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.FuelType = 0 + dec.Input.Read4BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "FuelType", "int", "fuelType", "FuelType", false); throw;
                    }
                }
                else
                {
                    this.FuelType = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleClassification", null, "VehicleClassification", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleSafetyExtensions' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleSafetyExtensions : Oss.Asn1.BaseType
    {
        /// <summary>Field 'events'</summary>
        public Oss.Asn1.BitStringWithNamedBits Events { get; set; }
        /// <summary>Field 'pathHistory'</summary>
        public MsgFrame.PathHistory PathHistory { get; set; }
        /// <summary>Field 'pathPrediction'</summary>
        public MsgFrame.PathPrediction PathPrediction { get; set; }
        /// <summary>Field 'lights'</summary>
        public Oss.Asn1.BitStringWithNamedBits Lights { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleSafetyExtensions that = right as VehicleSafetyExtensions;
            if (Events != null) {
                if (!Events.Equals(that.Events))
                    return false;
            } else if (that.Events != null)
                return false;
            if (PathHistory != null) {
                if (!PathHistory.Equals(that.PathHistory))
                    return false;
            } else if (that.PathHistory != null)
                return false;
            if (PathPrediction != null) {
                if (!PathPrediction.Equals(that.PathPrediction))
                    return false;
            } else if (that.PathPrediction != null)
                return false;
            if (Lights != null) {
                if (!Lights.Equals(that.Lights))
                    return false;
            } else if (that.Lights != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Events != null)
                hash ^= Events.GetHashCode();
            if (PathHistory != null)
                hash ^= PathHistory.GetHashCode();
            if (PathPrediction != null)
                hash ^= PathPrediction.GetHashCode();
            if (Lights != null)
                hash ^= Lights.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleSafetyExtensions";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Events != null) {
                        try {
                            if (this.Events.Count != 13)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Events", "Oss.Asn1.BitStringWithNamedBits", "events", "VehicleEventFlags", false); throw;
                }
                try {
                    if (this.PathHistory != null) {
                        this.PathHistory.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    if (this.PathPrediction != null) {
                        this.PathPrediction.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPrediction", "MsgFrame.PathPrediction", "pathPrediction", "PathPrediction", false); throw;
                }
                try {
                    if (this.Lights != null) {
                        try {
                            if (this.Lights.Count != 9)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSafetyExtensions", null, "VehicleSafetyExtensions", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleSafetyExtensions obj0 = new VehicleSafetyExtensions();
            {
                obj0.Events = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Events);
            }
            {
                obj0.PathHistory = Oss.Asn1.Internal.CopyUtil.CopyType(this.PathHistory);
            }
            {
                obj0.PathPrediction = Oss.Asn1.Internal.CopyUtil.CopyType(this.PathPrediction);
            }
            {
                obj0.Lights = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Lights);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Events;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("events ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "eventHazardLights";
                                    case (int)1: return "eventStopLineViolation";
                                    case (int)2: return "eventABSactivated";
                                    case (int)3: return "eventTractionControlLoss";
                                    case (int)4: return "eventStabilityControlactivated";
                                    case (int)5: return "eventHazardousMaterials";
                                    case (int)6: return "eventReserved1";
                                    case (int)7: return "eventHardBraking";
                                    case (int)8: return "eventLightsChanged";
                                    case (int)9: return "eventWipersChanged";
                                    case (int)10: return "eventFlatTire";
                                    case (int)11: return "eventDisabledVehicle";
                                    case (int)12: return "eventAirBagDeployment";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    MsgFrame.PathHistory data1 = this.PathHistory;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("pathHistory ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PathPrediction data1 = this.PathPrediction;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("pathPrediction ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Lights;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("lights ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "lowBeamHeadlightsOn";
                                    case (int)1: return "highBeamHeadlightsOn";
                                    case (int)2: return "leftTurnSignalOn";
                                    case (int)3: return "rightTurnSignalOn";
                                    case (int)4: return "hazardSignalOn";
                                    case (int)5: return "automaticLightControlOn";
                                    case (int)6: return "daytimeRunningLightsOn";
                                    case (int)7: return "fogLightOn";
                                    case (int)8: return "parkingLightsOn";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Events != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PathHistory != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.PathPrediction != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Lights != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.Events != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges2, this.Events.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 13);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Events, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Events, length1, 13);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Events", "Oss.Asn1.BitStringWithNamedBits", "events", "VehicleEventFlags", false); throw;
                }
                try {
                    if (this.PathHistory != null)
                    {
                        enc.EncodeType(this.PathHistory);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    MsgFrame.PathPrediction data1 = this.PathPrediction;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPrediction", "MsgFrame.PathPrediction", "pathPrediction", "PathPrediction", false); throw;
                }
                try {
                    if (this.Lights != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges3, this.Lights.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 9);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Lights, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Lights, length1, 9);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSafetyExtensions", null, "VehicleSafetyExtensions", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges2);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(13, _InternalMetadata.BerCodecMetaData.Ranges2);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 13))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Events = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Events", "Oss.Asn1.BitStringWithNamedBits", "events", "VehicleEventFlags", false); throw;
                    }
                }
                else
                {
                    this.Events = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.PathHistory data1 = new MsgFrame.PathHistory();

                        dec.DecodeType(data1);
                        this.PathHistory = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                    }
                }
                else
                {
                    this.PathHistory = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.PathPrediction data1 = new MsgFrame.PathPrediction();

                        dec.DecodeType(data1);
                        this.PathPrediction = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPrediction", "MsgFrame.PathPrediction", "pathPrediction", "PathPrediction", false); throw;
                    }
                }
                else
                {
                    this.PathPrediction = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges3);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(9, _InternalMetadata.BerCodecMetaData.Ranges3);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 9))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Lights = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                    }
                }
                else
                {
                    this.Lights = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleSafetyExtensions", null, "VehicleSafetyExtensions", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleEventFlags' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum VehicleEventFlags
    {
        EventHazardLights = 0,
        EventStopLineViolation = 1,
        EventABSactivated = 2,
        EventTractionControlLoss = 3,
        EventStabilityControlactivated = 4,
        EventHazardousMaterials = 5,
        EventReserved1 = 6,
        EventHardBraking = 7,
        EventLightsChanged = 8,
        EventWipersChanged = 9,
        EventFlatTire = 10,
        EventDisabledVehicle = 11,
        EventAirBagDeployment = 12
    }
    /// <summary>
    /// Represents schema type 'PathHistory' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PathHistory : Oss.Asn1.BaseType
    {
        /// <summary>Field 'initialPosition'</summary>
        public FullPositionVector InitialPosition { get; set; }
        /// <summary>Field 'currGNSSstatus'</summary>
        public Oss.Asn1.BitStringWithNamedBits CurrGNSSstatus { get; set; }
        /// <summary>Field 'crumbData'</summary>
        public PathHistoryPointList CrumbData { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathHistory that = right as PathHistory;
            if (InitialPosition != null) {
                if (!InitialPosition.Equals(that.InitialPosition))
                    return false;
            } else if (that.InitialPosition != null)
                return false;
            if (CurrGNSSstatus != null) {
                if (!CurrGNSSstatus.Equals(that.CurrGNSSstatus))
                    return false;
            } else if (that.CurrGNSSstatus != null)
                return false;
            if (CrumbData != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(CrumbData, that.CrumbData))
                    return false;
            } else if (that.CrumbData != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (InitialPosition != null)
                hash ^= InitialPosition.GetHashCode();
            if (CurrGNSSstatus != null)
                hash ^= CurrGNSSstatus.GetHashCode();
            if (CrumbData != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(CrumbData);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PathHistory";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.InitialPosition != null) {
                        this.InitialPosition.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialPosition", "FullPositionVector", "initialPosition", "FullPositionVector", false); throw;
                }
                try {
                    if (this.CurrGNSSstatus != null) {
                        if (this.CurrGNSSstatus.Count != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrGNSSstatus", "Oss.Asn1.BitStringWithNamedBits", "currGNSSstatus", "GNSSstatus", false); throw;
                }
                try {
                    if (this.CrumbData == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.CrumbData.Validate();
                    if (this.CrumbData.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.CrumbData.Count > 23)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CrumbData", "PathHistoryPointList", "crumbData", "PathHistoryPointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistory", null, "PathHistory", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PathHistory obj0 = new PathHistory();
            {
                obj0.InitialPosition = Oss.Asn1.Internal.CopyUtil.CopyType(this.InitialPosition);
            }
            {
                obj0.CurrGNSSstatus = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.CurrGNSSstatus);
            }
            {
                obj0.CrumbData = this.CrumbData == null ? null : (PathHistoryPointList)this.CrumbData.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    FullPositionVector data1 = this.InitialPosition;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("initialPosition ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.CurrGNSSstatus;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("currGNSSstatus ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unavailable";
                                    case (int)1: return "isHealthy";
                                    case (int)2: return "isMonitored";
                                    case (int)3: return "baseStationType";
                                    case (int)4: return "aPDOPofUnder5";
                                    case (int)5: return "inViewOfUnder5";
                                    case (int)6: return "localCorrectionsPresent";
                                    case (int)7: return "networkCorrectionsPresent";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    PathHistoryPointList data1 = this.CrumbData;

                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("crumbData ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.InitialPosition != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.CurrGNSSstatus != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    FullPositionVector data1 = this.InitialPosition;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialPosition", "FullPositionVector", "initialPosition", "FullPositionVector", false); throw;
                }
                try {
                    if (this.CurrGNSSstatus != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges4, this.CurrGNSSstatus.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.CurrGNSSstatus, length1, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrGNSSstatus", "Oss.Asn1.BitStringWithNamedBits", "currGNSSstatus", "GNSSstatus", false); throw;
                }
                try {
                    this.CrumbData.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CrumbData", "PathHistoryPointList", "crumbData", "PathHistoryPointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistory", null, "PathHistory", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        FullPositionVector data1 = new FullPositionVector();

                        dec.DecodeType(data1);
                        this.InitialPosition = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialPosition", "FullPositionVector", "initialPosition", "FullPositionVector", false); throw;
                    }
                }
                else
                {
                    this.InitialPosition = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.CurrGNSSstatus = dec.DecodeBitStringWithNamedBits(8, _InternalMetadata.BerCodecMetaData.Ranges4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrGNSSstatus", "Oss.Asn1.BitStringWithNamedBits", "currGNSSstatus", "GNSSstatus", false); throw;
                    }
                }
                else
                {
                    this.CurrGNSSstatus = null;
                }
                try {
                    PathHistoryPointList data1 = new PathHistoryPointList();

                    data1.DecodePer(dec);
                    this.CrumbData = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CrumbData", "PathHistoryPointList", "crumbData", "PathHistoryPointList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistory", null, "PathHistory", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'FullPositionVector' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class FullPositionVector : Oss.Asn1.BaseType
    {
        /// <summary>Field 'utcTime'</summary>
        public DDateTime UtcTime { get; set; }
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }
        /// <summary>Field 'heading'</summary>
        public int? Heading { get; set; }
        /// <summary>Field 'transmission'</summary>
        public TransmissionState? Transmission { get; set; }
        /// <summary>Field 'speed'</summary>
        public int? Speed { get; set; }
        /// <summary>Field 'posAccuracy'</summary>
        public PositionalAccuracy PosAccuracy { get; set; }
        /// <summary>Field 'posConfidence'</summary>
        public PositionConfidenceSet PosConfidence { get; set; }
        /// <summary>Field 'timeConfidence'</summary>
        public MsgFrame.TimeConfidence? TimeConfidence { get; set; }
        /// <summary>Field 'motionCfd'</summary>
        public MotionConfidenceSet MotionCfd { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            FullPositionVector that = right as FullPositionVector;
            if (UtcTime != null) {
                if (!UtcTime.Equals(that.UtcTime))
                    return false;
            } else if (that.UtcTime != null)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (Heading != null) {
                if (Heading != that.Heading)
                    return false;
            } else if (that.Heading != null)
                return false;
            if (Transmission != null) {
                if (Transmission != that.Transmission)
                    return false;
            } else if (that.Transmission != null)
                return false;
            if (Speed != null) {
                if (Speed != that.Speed)
                    return false;
            } else if (that.Speed != null)
                return false;
            if (PosAccuracy != null) {
                if (!PosAccuracy.Equals(that.PosAccuracy))
                    return false;
            } else if (that.PosAccuracy != null)
                return false;
            if (PosConfidence != null) {
                if (!PosConfidence.Equals(that.PosConfidence))
                    return false;
            } else if (that.PosConfidence != null)
                return false;
            if (TimeConfidence != null) {
                if (TimeConfidence != that.TimeConfidence)
                    return false;
            } else if (that.TimeConfidence != null)
                return false;
            if (MotionCfd != null) {
                if (!MotionCfd.Equals(that.MotionCfd))
                    return false;
            } else if (that.MotionCfd != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (UtcTime != null)
                hash ^= UtcTime.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (Heading != null)
                hash ^= Heading.GetHashCode();
            if (Transmission != null)
                hash ^= Transmission.GetHashCode();
            if (Speed != null)
                hash ^= Speed.GetHashCode();
            if (PosAccuracy != null)
                hash ^= PosAccuracy.GetHashCode();
            if (PosConfidence != null)
                hash ^= PosConfidence.GetHashCode();
            if (TimeConfidence != null)
                hash ^= TimeConfidence.GetHashCode();
            if (MotionCfd != null)
                hash ^= MotionCfd.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "FullPositionVector";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UtcTime != null) {
                        this.UtcTime.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UtcTime", "DDateTime", "utcTime", "DDateTime", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.Heading != null) {
                        if (this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Heading.Value > 28800)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Transmission != null) {
                        switch (this.Transmission.Value)
                        {
                            case TransmissionState.Neutral:
                            case TransmissionState.Park:
                            case TransmissionState.ForwardGears:
                            case TransmissionState.ReverseGears:
                            case TransmissionState.Reserved1:
                            case TransmissionState.Reserved2:
                            case TransmissionState.Reserved3:
                            case TransmissionState.Unavailable:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission.Value", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (this.Speed != null) {
                        if (this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Speed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.PosAccuracy != null) {
                        this.PosAccuracy.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionalAccuracy", "posAccuracy", "PositionalAccuracy", false); throw;
                }
                try {
                    if (this.PosConfidence != null) {
                        this.PosConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.TimeConfidence != null) {
                        switch (this.TimeConfidence.Value)
                        {
                            case MsgFrame.TimeConfidence.Unavailable:
                            case MsgFrame.TimeConfidence.Time100000:
                            case MsgFrame.TimeConfidence.Time050000:
                            case MsgFrame.TimeConfidence.Time020000:
                            case MsgFrame.TimeConfidence.Time010000:
                            case MsgFrame.TimeConfidence.Time002000:
                            case MsgFrame.TimeConfidence.Time001000:
                            case MsgFrame.TimeConfidence.Time000500:
                            case MsgFrame.TimeConfidence.Time000200:
                            case MsgFrame.TimeConfidence.Time000100:
                            case MsgFrame.TimeConfidence.Time000050:
                            case MsgFrame.TimeConfidence.Time000020:
                            case MsgFrame.TimeConfidence.Time000010:
                            case MsgFrame.TimeConfidence.Time000005:
                            case MsgFrame.TimeConfidence.Time000002:
                            case MsgFrame.TimeConfidence.Time000001:
                            case MsgFrame.TimeConfidence.Time0000005:
                            case MsgFrame.TimeConfidence.Time0000002:
                            case MsgFrame.TimeConfidence.Time0000001:
                            case MsgFrame.TimeConfidence.Time00000005:
                            case MsgFrame.TimeConfidence.Time00000002:
                            case MsgFrame.TimeConfidence.Time00000001:
                            case MsgFrame.TimeConfidence.Time000000005:
                            case MsgFrame.TimeConfidence.Time000000002:
                            case MsgFrame.TimeConfidence.Time000000001:
                            case MsgFrame.TimeConfidence.Time0000000005:
                            case MsgFrame.TimeConfidence.Time0000000002:
                            case MsgFrame.TimeConfidence.Time0000000001:
                            case MsgFrame.TimeConfidence.Time00000000005:
                            case MsgFrame.TimeConfidence.Time00000000002:
                            case MsgFrame.TimeConfidence.Time00000000001:
                            case MsgFrame.TimeConfidence.Time000000000005:
                            case MsgFrame.TimeConfidence.Time000000000002:
                            case MsgFrame.TimeConfidence.Time000000000001:
                            case MsgFrame.TimeConfidence.Time0000000000005:
                            case MsgFrame.TimeConfidence.Time0000000000002:
                            case MsgFrame.TimeConfidence.Time0000000000001:
                            case MsgFrame.TimeConfidence.Time00000000000005:
                            case MsgFrame.TimeConfidence.Time00000000000002:
                            case MsgFrame.TimeConfidence.Time00000000000001:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                }
                try {
                    if (this.MotionCfd != null) {
                        this.MotionCfd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "FullPositionVector", null, "FullPositionVector", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            FullPositionVector obj0 = new FullPositionVector();
            {
                obj0.UtcTime = Oss.Asn1.Internal.CopyUtil.CopyType(this.UtcTime);
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.Transmission = this.Transmission;
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.PosAccuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosAccuracy);
            }
            {
                obj0.PosConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosConfidence);
            }
            {
                obj0.TimeConfidence = this.TimeConfidence;
            }
            {
                obj0.MotionCfd = Oss.Asn1.Internal.CopyUtil.CopyType(this.MotionCfd);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    DDateTime data1 = this.UtcTime;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("utcTime ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    int? data1 = this.Heading;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("heading ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    TransmissionState? data1 = this.Transmission;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("transmission ");
                        switch (data1.Value) {
                        case TransmissionState.Neutral:
                            prt.Write("neutral");
                            break;
                        case TransmissionState.Park:
                            prt.Write("park");
                            break;
                        case TransmissionState.ForwardGears:
                            prt.Write("forwardGears");
                            break;
                        case TransmissionState.ReverseGears:
                            prt.Write("reverseGears");
                            break;
                        case TransmissionState.Reserved1:
                            prt.Write("reserved1");
                            break;
                        case TransmissionState.Reserved2:
                            prt.Write("reserved2");
                            break;
                        case TransmissionState.Reserved3:
                            prt.Write("reserved3");
                            break;
                        case TransmissionState.Unavailable:
                            prt.Write("unavailable");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    int? data1 = this.Speed;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speed ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PositionalAccuracy data1 = this.PosAccuracy;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("posAccuracy ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PositionConfidenceSet data1 = this.PosConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("posConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.TimeConfidence? data1 = this.TimeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeConfidence ");
                        switch (data1.Value) {
                        case MsgFrame.TimeConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case MsgFrame.TimeConfidence.Time100000:
                            prt.Write("time-100-000");
                            break;
                        case MsgFrame.TimeConfidence.Time050000:
                            prt.Write("time-050-000");
                            break;
                        case MsgFrame.TimeConfidence.Time020000:
                            prt.Write("time-020-000");
                            break;
                        case MsgFrame.TimeConfidence.Time010000:
                            prt.Write("time-010-000");
                            break;
                        case MsgFrame.TimeConfidence.Time002000:
                            prt.Write("time-002-000");
                            break;
                        case MsgFrame.TimeConfidence.Time001000:
                            prt.Write("time-001-000");
                            break;
                        case MsgFrame.TimeConfidence.Time000500:
                            prt.Write("time-000-500");
                            break;
                        case MsgFrame.TimeConfidence.Time000200:
                            prt.Write("time-000-200");
                            break;
                        case MsgFrame.TimeConfidence.Time000100:
                            prt.Write("time-000-100");
                            break;
                        case MsgFrame.TimeConfidence.Time000050:
                            prt.Write("time-000-050");
                            break;
                        case MsgFrame.TimeConfidence.Time000020:
                            prt.Write("time-000-020");
                            break;
                        case MsgFrame.TimeConfidence.Time000010:
                            prt.Write("time-000-010");
                            break;
                        case MsgFrame.TimeConfidence.Time000005:
                            prt.Write("time-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000002:
                            prt.Write("time-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000001:
                            prt.Write("time-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000005:
                            prt.Write("time-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000002:
                            prt.Write("time-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000001:
                            prt.Write("time-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000005:
                            prt.Write("time-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000002:
                            prt.Write("time-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000001:
                            prt.Write("time-000-000-01");
                            break;
                        case MsgFrame.TimeConfidence.Time000000005:
                            prt.Write("time-000-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000000002:
                            prt.Write("time-000-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000000001:
                            prt.Write("time-000-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000005:
                            prt.Write("time-000-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000002:
                            prt.Write("time-000-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000001:
                            prt.Write("time-000-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000005:
                            prt.Write("time-000-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000002:
                            prt.Write("time-000-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000001:
                            prt.Write("time-000-000-000-01");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000005:
                            prt.Write("time-000-000-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000002:
                            prt.Write("time-000-000-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000001:
                            prt.Write("time-000-000-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000005:
                            prt.Write("time-000-000-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000002:
                            prt.Write("time-000-000-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000001:
                            prt.Write("time-000-000-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000005:
                            prt.Write("time-000-000-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000002:
                            prt.Write("time-000-000-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000001:
                            prt.Write("time-000-000-000-000-01");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    MotionConfidenceSet data1 = this.MotionCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("motionCfd ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.UtcTime != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Heading != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Transmission != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Speed != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.PosAccuracy != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.PosConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.TimeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.MotionCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                enc.Output.WriteBits(optMask0, 0, 8);
                try {
                    if (this.UtcTime != null)
                    {
                        enc.EncodeType(this.UtcTime);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UtcTime", "DDateTime", "utcTime", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.Heading != null)
                    {
                        if (enc.BitCount(this.Heading.Value - 0) > 15 || this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading.Value);
                        enc.EncodeConstrainedInteger((this.Heading.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Transmission != null)
                    {
                        enc.EncodeEnum((int)this.Transmission.Value, _InternalMetadata.PerCodecMetaData.SortedEnum2);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission.Value", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (this.Speed != null)
                    {
                        if (enc.BitCount(this.Speed.Value - 0) > 13 || this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed.Value);
                        enc.EncodeConstrainedInteger((this.Speed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    PositionalAccuracy data1 = this.PosAccuracy;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionalAccuracy", "posAccuracy", "PositionalAccuracy", false); throw;
                }
                try {
                    if (this.PosConfidence != null)
                    {
                        enc.EncodeType(this.PosConfidence);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.TimeConfidence != null)
                    {
                        enc.EncodeEnum((int)this.TimeConfidence.Value, _InternalMetadata.PerCodecMetaData.SortedEnum12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                }
                try {
                    if (this.MotionCfd != null)
                    {
                        enc.EncodeType(this.MotionCfd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "FullPositionVector", null, "FullPositionVector", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 9);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.UtcTime = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "UtcTime", "DDateTime", "utcTime", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.UtcTime = null;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Heading = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                    }
                }
                else
                {
                    this.Heading = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Transmission = (TransmissionState)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum2);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission", "TransmissionState", "transmission", "TransmissionState", false); throw;
                    }
                }
                else
                {
                    this.Transmission = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.Speed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.Speed = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        PositionalAccuracy data1 = new PositionalAccuracy();

                        dec.DecodeType(data1);
                        this.PosAccuracy = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionalAccuracy", "posAccuracy", "PositionalAccuracy", false); throw;
                    }
                }
                else
                {
                    this.PosAccuracy = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        PositionConfidenceSet data1 = new PositionConfidenceSet();

                        dec.DecodeType(data1);
                        this.PosConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.PosConfidence = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        this.TimeConfidence = (MsgFrame.TimeConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum12);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                    }
                }
                else
                {
                    this.TimeConfidence = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        MotionConfidenceSet data1 = new MotionConfidenceSet();

                        dec.DecodeType(data1);
                        this.MotionCfd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.MotionCfd = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "FullPositionVector", null, "FullPositionVector", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DDateTime' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class DDateTime : Oss.Asn1.BaseType
    {
        /// <summary>Field 'year'</summary>
        public int? Year { get; set; }
        /// <summary>Field 'month'</summary>
        public int? Month { get; set; }
        /// <summary>Field 'day'</summary>
        public int? Day { get; set; }
        /// <summary>Field 'hour'</summary>
        public int? Hour { get; set; }
        /// <summary>Field 'minute'</summary>
        public int? Minute { get; set; }
        /// <summary>Field 'second'</summary>
        public int? Second { get; set; }
        /// <summary>Field 'offset'</summary>
        public long? Offset { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DDateTime that = right as DDateTime;
            if (Year != null) {
                if (Year != that.Year)
                    return false;
            } else if (that.Year != null)
                return false;
            if (Month != null) {
                if (Month != that.Month)
                    return false;
            } else if (that.Month != null)
                return false;
            if (Day != null) {
                if (Day != that.Day)
                    return false;
            } else if (that.Day != null)
                return false;
            if (Hour != null) {
                if (Hour != that.Hour)
                    return false;
            } else if (that.Hour != null)
                return false;
            if (Minute != null) {
                if (Minute != that.Minute)
                    return false;
            } else if (that.Minute != null)
                return false;
            if (Second != null) {
                if (Second != that.Second)
                    return false;
            } else if (that.Second != null)
                return false;
            if (Offset != null) {
                if (Offset != that.Offset)
                    return false;
            } else if (that.Offset != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Year != null)
                hash ^= Year.GetHashCode();
            if (Month != null)
                hash ^= Month.GetHashCode();
            if (Day != null)
                hash ^= Day.GetHashCode();
            if (Hour != null)
                hash ^= Hour.GetHashCode();
            if (Minute != null)
                hash ^= Minute.GetHashCode();
            if (Second != null)
                hash ^= Second.GetHashCode();
            if (Offset != null)
                hash ^= Offset.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "DDateTime";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Year != null) {
                        if (this.Year.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Year.Value > 4095)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Year.Value", "int", "year", "DYear", false); throw;
                }
                try {
                    if (this.Month != null) {
                        if (this.Month.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Month.Value > 12)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Month.Value", "int", "month", "DMonth", false); throw;
                }
                try {
                    if (this.Day != null) {
                        if (this.Day.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Day.Value > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Day.Value", "int", "day", "DDay", false); throw;
                }
                try {
                    if (this.Hour != null) {
                        if (this.Hour.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Hour.Value > 24)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Hour.Value", "int", "hour", "DHour", false); throw;
                }
                try {
                    if (this.Minute != null) {
                        if (this.Minute.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Minute.Value > 60)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Minute.Value", "int", "minute", "DMinute", false); throw;
                }
                try {
                    if (this.Second != null) {
                        if (this.Second.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Second.Value > 60000)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Second.Value", "int", "second", "DSecond", false); throw;
                }
                try {
                    if (this.Offset != null) {
                        if (this.Offset.Value < -720)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Offset.Value > 721)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset.Value", "long", "offset", "DTimeOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DDateTime", null, "DDateTime", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            DDateTime obj0 = new DDateTime();
            {
                obj0.Year = this.Year;
            }
            {
                obj0.Month = this.Month;
            }
            {
                obj0.Day = this.Day;
            }
            {
                obj0.Hour = this.Hour;
            }
            {
                obj0.Minute = this.Minute;
            }
            {
                obj0.Second = this.Second;
            }
            {
                obj0.Offset = this.Offset;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.Year;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("year ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Month;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("month ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Day;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("day ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Hour;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("hour ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Minute;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("minute ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Second;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("second ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    long? data1 = this.Offset;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("offset ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Year != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Month != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Day != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Hour != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.Minute != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.Second != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.Offset != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                enc.Output.WriteBits(optMask0, 0, 7);
                try {
                    if (this.Year != null)
                    {
                        if (enc.BitCount(this.Year.Value - 0) > 12 || this.Year.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Year.Value);
                        enc.EncodeConstrainedInteger((this.Year.Value - (0)), 12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Year.Value", "int", "year", "DYear", false); throw;
                }
                try {
                    if (this.Month != null)
                    {
                        if (enc.BitCount(this.Month.Value - 0) > 4 || this.Month.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Month.Value);
                        enc.Output.Write4BitInt((this.Month.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Month.Value", "int", "month", "DMonth", false); throw;
                }
                try {
                    if (this.Day != null)
                    {
                        if (enc.BitCount(this.Day.Value - 0) > 5 || this.Day.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Day.Value);
                        enc.Output.Write5BitInt((this.Day.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Day.Value", "int", "day", "DDay", false); throw;
                }
                try {
                    if (this.Hour != null)
                    {
                        if (enc.BitCount(this.Hour.Value - 0) > 5 || this.Hour.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Hour.Value);
                        enc.Output.Write5BitInt((this.Hour.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Hour.Value", "int", "hour", "DHour", false); throw;
                }
                try {
                    if (this.Minute != null)
                    {
                        if (enc.BitCount(this.Minute.Value - 0) > 6 || this.Minute.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Minute.Value);
                        enc.Output.Write6BitInt((this.Minute.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Minute.Value", "int", "minute", "DMinute", false); throw;
                }
                try {
                    if (this.Second != null)
                    {
                        if (enc.BitCount(this.Second.Value - 0) > 16 || this.Second.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Second.Value);
                        enc.EncodeConstrainedInteger((this.Second.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Second.Value", "int", "second", "DSecond", false); throw;
                }
                try {
                    if (this.Offset != null)
                    {
                        if (enc.BitCount(this.Offset.Value - -720) > 11 || this.Offset.Value < -720)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset.Value);
                        enc.EncodeConstrainedLongInteger((long)(this.Offset.Value - (-720)), 11);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset.Value", "long", "offset", "DTimeOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DDateTime", null, "DDateTime", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 7);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Year = dec.DecodeConstrainedInteger(12, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Year", "int", "year", "DYear", false); throw;
                    }
                }
                else
                {
                    this.Year = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Month = 0 + dec.Input.Read4BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Month", "int", "month", "DMonth", false); throw;
                    }
                }
                else
                {
                    this.Month = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Day = 0 + dec.Input.Read5BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Day", "int", "day", "DDay", false); throw;
                    }
                }
                else
                {
                    this.Day = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Hour = 0 + dec.Input.Read5BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Hour", "int", "hour", "DHour", false); throw;
                    }
                }
                else
                {
                    this.Hour = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.Minute = 0 + dec.Input.Read6BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Minute", "int", "minute", "DMinute", false); throw;
                    }
                }
                else
                {
                    this.Minute = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.Second = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Second", "int", "second", "DSecond", false); throw;
                    }
                }
                else
                {
                    this.Second = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        this.Offset = dec.DecodeConstrainedLongInteger(11, -720);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "long", "offset", "DTimeOffset", false); throw;
                    }
                }
                else
                {
                    this.Offset = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DDateTime", null, "DDateTime", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PositionalAccuracy' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionalAccuracy : Oss.Asn1.BaseType
    {
        /// <summary>Field 'semiMajor'</summary>
        public int SemiMajor { get; set; }
        /// <summary>Field 'semiMinor'</summary>
        public int SemiMinor { get; set; }
        /// <summary>Field 'orientation'</summary>
        public int Orientation { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionalAccuracy that = right as PositionalAccuracy;
            if (SemiMajor != that.SemiMajor)
                return false;
            if (SemiMinor != that.SemiMinor)
                return false;
            if (Orientation != that.Orientation)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= SemiMajor.GetHashCode();
            hash ^= SemiMinor.GetHashCode();
            hash ^= Orientation.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PositionalAccuracy";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SemiMajor < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SemiMajor > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMajor", "int", "semiMajor", "SemiMajorAxisAccuracy", false); throw;
                }
                try {
                    if (this.SemiMinor < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SemiMinor > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMinor", "int", "semiMinor", "SemiMinorAxisAccuracy", false); throw;
                }
                try {
                    if (this.Orientation < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Orientation > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Orientation", "int", "orientation", "SemiMajorAxisOrientation", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionalAccuracy", null, "PositionalAccuracy", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionalAccuracy obj0 = new PositionalAccuracy();
            {
                obj0.SemiMajor = this.SemiMajor;
            }
            {
                obj0.SemiMinor = this.SemiMinor;
            }
            {
                obj0.Orientation = this.Orientation;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("semiMajor ");
                    prt.Write(this.SemiMajor);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("semiMinor ");
                    prt.Write(this.SemiMinor);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("orientation ");
                    prt.Write(this.Orientation);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.SemiMajor - 0) > 8 || this.SemiMajor < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SemiMajor);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.SemiMajor - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMajor", "int", "semiMajor", "SemiMajorAxisAccuracy", false); throw;
                }
                try {
                    if (enc.BitCount(this.SemiMinor - 0) > 8 || this.SemiMinor < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SemiMinor);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.SemiMinor - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMinor", "int", "semiMinor", "SemiMinorAxisAccuracy", false); throw;
                }
                try {
                    if (enc.BitCount(this.Orientation - 0) > 16 || this.Orientation < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Orientation);
                    enc.EncodeConstrainedInteger((this.Orientation - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Orientation", "int", "orientation", "SemiMajorAxisOrientation", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionalAccuracy", null, "PositionalAccuracy", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.SemiMajor = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMajor", "int", "semiMajor", "SemiMajorAxisAccuracy", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.SemiMinor = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SemiMinor", "int", "semiMinor", "SemiMinorAxisAccuracy", false); throw;
                }
                try {
                    this.Orientation = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Orientation", "int", "orientation", "SemiMajorAxisOrientation", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionalAccuracy", null, "PositionalAccuracy", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TimeConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TimeConfidence
    {
        Unavailable = 0,
        Time100000 = 1,
        Time050000 = 2,
        Time020000 = 3,
        Time010000 = 4,
        Time002000 = 5,
        Time001000 = 6,
        Time000500 = 7,
        Time000200 = 8,
        Time000100 = 9,
        Time000050 = 10,
        Time000020 = 11,
        Time000010 = 12,
        Time000005 = 13,
        Time000002 = 14,
        Time000001 = 15,
        Time0000005 = 16,
        Time0000002 = 17,
        Time0000001 = 18,
        Time00000005 = 19,
        Time00000002 = 20,
        Time00000001 = 21,
        Time000000005 = 22,
        Time000000002 = 23,
        Time000000001 = 24,
        Time0000000005 = 25,
        Time0000000002 = 26,
        Time0000000001 = 27,
        Time00000000005 = 28,
        Time00000000002 = 29,
        Time00000000001 = 30,
        Time000000000005 = 31,
        Time000000000002 = 32,
        Time000000000001 = 33,
        Time0000000000005 = 34,
        Time0000000000002 = 35,
        Time0000000000001 = 36,
        Time00000000000005 = 37,
        Time00000000000002 = 38,
        Time00000000000001 = 39
    }
    /// <summary>
    /// Represents schema type 'GNSSstatus' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum GNSSstatus
    {
        Unavailable = 0,
        IsHealthy = 1,
        IsMonitored = 2,
        BaseStationType = 3,
        APDOPofUnder5 = 4,
        InViewOfUnder5 = 5,
        LocalCorrectionsPresent = 6,
        NetworkCorrectionsPresent = 7
    }
    /// <summary>
    /// Represents schema type 'PathHistoryPointList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PathHistoryPointList : System.Collections.Generic.List<PathHistoryPoint>
    {
        /// <summary>
        /// Initializes a new instance of the PathHistoryPointList class that is empty and has the default initial capacity.
        /// </summary>
        public PathHistoryPointList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PathHistoryPointList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PathHistoryPointList.</param>
        /// </summary>
        public PathHistoryPointList(System.Collections.Generic.IEnumerable<PathHistoryPoint> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PathHistoryPointList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PathHistoryPointList can initially store.</param>
        /// </summary>
        public PathHistoryPointList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathHistoryPointList that = right as PathHistoryPointList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PathHistoryPoint", "#" + i1.ToString(), "PathHistoryPoint", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 23)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPointList", null, "PathHistoryPointList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PathHistoryPointList obj0 = new PathHistoryPointList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 23)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 23);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PathHistoryPoint", "#" + i0.ToString(), "PathHistoryPoint", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPointList", null, "PathHistoryPointList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 23, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PathHistoryPoint data1 = new PathHistoryPoint();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PathHistoryPoint", "#" + this.Count.ToString(), "PathHistoryPoint", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPointList", null, "PathHistoryPointList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PathHistoryPoint' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PathHistoryPoint : Oss.Asn1.BaseType
    {
        /// <summary>Field 'llvOffset'</summary>
        public PositionOffsetLLV LlvOffset { get; set; }
        /// <summary>Field 'timeOffset'</summary>
        public int TimeOffset { get; set; }
        /// <summary>Field 'speed'</summary>
        public int? Speed { get; set; }
        /// <summary>Field 'posAccuracy'</summary>
        public PositionConfidenceSet PosAccuracy { get; set; }
        /// <summary>Field 'heading'</summary>
        public int? Heading { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathHistoryPoint that = right as PathHistoryPoint;
            if (LlvOffset != null) {
                if (!LlvOffset.Equals(that.LlvOffset))
                    return false;
            } else if (that.LlvOffset != null)
                return false;
            if (TimeOffset != that.TimeOffset)
                return false;
            if (Speed != null) {
                if (Speed != that.Speed)
                    return false;
            } else if (that.Speed != null)
                return false;
            if (PosAccuracy != null) {
                if (!PosAccuracy.Equals(that.PosAccuracy))
                    return false;
            } else if (that.PosAccuracy != null)
                return false;
            if (Heading != null) {
                if (Heading != that.Heading)
                    return false;
            } else if (that.Heading != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (LlvOffset != null)
                hash ^= LlvOffset.GetHashCode();
            hash ^= TimeOffset.GetHashCode();
            if (Speed != null)
                hash ^= Speed.GetHashCode();
            if (PosAccuracy != null)
                hash ^= PosAccuracy.GetHashCode();
            if (Heading != null)
                hash ^= Heading.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PathHistoryPoint";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.LlvOffset == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.LlvOffset.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LlvOffset", "PositionOffsetLLV", "llvOffset", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.TimeOffset < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TimeOffset > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeOffset", "int", "timeOffset", "TimeOffset", false); throw;
                }
                try {
                    if (this.Speed != null) {
                        if (this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Speed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.PosAccuracy != null) {
                        this.PosAccuracy.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Heading != null) {
                        if (this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Heading.Value > 240)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "CoarseHeading", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPoint", null, "PathHistoryPoint", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PathHistoryPoint obj0 = new PathHistoryPoint();
            {
                obj0.LlvOffset = Oss.Asn1.Internal.CopyUtil.CopyType(this.LlvOffset);
            }
            {
                obj0.TimeOffset = this.TimeOffset;
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.PosAccuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosAccuracy);
            }
            {
                obj0.Heading = this.Heading;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("llvOffset ");
                    if (this.LlvOffset == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.LlvOffset);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("timeOffset ");
                    prt.Write(this.TimeOffset);
                }
                {
                    int? data1 = this.Speed;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speed ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PositionConfidenceSet data1 = this.PosAccuracy;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("posAccuracy ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.Heading;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("heading ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Speed != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PosAccuracy != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Heading != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    enc.EncodeType(this.LlvOffset);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LlvOffset", "PositionOffsetLLV", "llvOffset", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (enc.BitCount(this.TimeOffset - 1) > 16 || this.TimeOffset < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeOffset);
                    enc.EncodeConstrainedInteger((this.TimeOffset - (1)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeOffset", "int", "timeOffset", "TimeOffset", false); throw;
                }
                try {
                    if (this.Speed != null)
                    {
                        if (enc.BitCount(this.Speed.Value - 0) > 13 || this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed.Value);
                        enc.EncodeConstrainedInteger((this.Speed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.PosAccuracy != null)
                    {
                        enc.EncodeType(this.PosAccuracy);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Heading != null)
                    {
                        if (enc.BitCount(this.Heading.Value - 0) > 8 || this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading.Value);
                        enc.Output.Write8BitInt((this.Heading.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "CoarseHeading", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPoint", null, "PathHistoryPoint", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.LlvOffset = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LlvOffset", "PositionOffsetLLV", "llvOffset", "PositionOffsetLLV", false); throw;
                }
                try {
                    this.TimeOffset = dec.DecodeConstrainedInteger(16, 1);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeOffset", "int", "timeOffset", "TimeOffset", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Speed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.Speed = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PositionConfidenceSet data1 = new PositionConfidenceSet();

                        dec.DecodeType(data1);
                        this.PosAccuracy = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.PosAccuracy = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Heading = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "CoarseHeading", false); throw;
                    }
                }
                else
                {
                    this.Heading = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathHistoryPoint", null, "PathHistoryPoint", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PositionOffsetLLV' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionOffsetLLV : Oss.Asn1.BaseType
    {
        /// <summary>Field 'offsetLL'</summary>
        public PositionOffsetLL OffsetLL { get; set; }
        /// <summary>Field 'offsetV'</summary>
        public VerticalOffset OffsetV { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionOffsetLLV that = right as PositionOffsetLLV;
            if (OffsetLL != null) {
                if (!OffsetLL.Equals(that.OffsetLL))
                    return false;
            } else if (that.OffsetLL != null)
                return false;
            if (OffsetV != null) {
                if (!OffsetV.Equals(that.OffsetV))
                    return false;
            } else if (that.OffsetV != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (OffsetLL != null)
                hash ^= OffsetLL.GetHashCode();
            if (OffsetV != null)
                hash ^= OffsetV.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PositionOffsetLLV";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.OffsetLL == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.OffsetLL.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetLL", "PositionOffsetLL", "offsetLL", "PositionOffsetLL", false); throw;
                }
                try {
                    if (this.OffsetV != null) {
                        this.OffsetV.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetV", "VerticalOffset", "offsetV", "VerticalOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLLV", null, "PositionOffsetLLV", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionOffsetLLV obj0 = new PositionOffsetLLV();
            {
                obj0.OffsetLL = Oss.Asn1.Internal.CopyUtil.CopyType(this.OffsetLL);
            }
            {
                obj0.OffsetV = Oss.Asn1.Internal.CopyUtil.CopyType(this.OffsetV);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    PositionOffsetLL data1 = this.OffsetLL;

                    prt.WriteLine();
                    prt.Write("offsetLL ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                {
                    VerticalOffset data1 = this.OffsetV;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("offsetV ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.OffsetV != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeType(this.OffsetLL);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetLL", "PositionOffsetLL", "offsetLL", "PositionOffsetLL", false); throw;
                }
                try {
                    VerticalOffset data1 = this.OffsetV;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetV", "VerticalOffset", "offsetV", "VerticalOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLLV", null, "PositionOffsetLLV", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    PositionOffsetLL data1 = new PositionOffsetLL();

                    dec.DecodeType(data1);
                    this.OffsetLL = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetLL", "PositionOffsetLL", "offsetLL", "PositionOffsetLL", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        VerticalOffset data1 = new VerticalOffset();

                        dec.DecodeType(data1);
                        this.OffsetV = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetV", "VerticalOffset", "offsetV", "VerticalOffset", false); throw;
                    }
                }
                else
                {
                    this.OffsetV = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLLV", null, "PositionOffsetLLV", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PositionOffsetLL' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class PositionOffsetLL : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            PositionLL1Chosen = 1,
            PositionLL2Chosen = 2,
            PositionLL3Chosen = 3,
            PositionLL4Chosen = 4,
            PositionLL5Chosen = 5,
            PositionLL6Chosen = 6,
            PositionLatLonChosen = 7
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'position-LL1'</summary>
        public PositionLL24B PositionLL1 {
            get {
                if (_id == Id.PositionLL1Chosen)
                    return (_contained as PositionLL24B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL1Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LL2'</summary>
        public PositionLL28B PositionLL2 {
            get {
                if (_id == Id.PositionLL2Chosen)
                    return (_contained as PositionLL28B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL2Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LL3'</summary>
        public PositionLL32B PositionLL3 {
            get {
                if (_id == Id.PositionLL3Chosen)
                    return (_contained as PositionLL32B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL3Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LL4'</summary>
        public PositionLL36B PositionLL4 {
            get {
                if (_id == Id.PositionLL4Chosen)
                    return (_contained as PositionLL36B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL4Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LL5'</summary>
        public PositionLL44B PositionLL5 {
            get {
                if (_id == Id.PositionLL5Chosen)
                    return (_contained as PositionLL44B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL5Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LL6'</summary>
        public PositionLL48B PositionLL6 {
            get {
                if (_id == Id.PositionLL6Chosen)
                    return (_contained as PositionLL48B);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLL6Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'position-LatLon'</summary>
        public PositionLLmD64b PositionLatLon {
            get {
                if (_id == Id.PositionLatLonChosen)
                    return (_contained as PositionLLmD64b);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PositionLatLonChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionOffsetLL that = right as PositionOffsetLL;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PositionOffsetLL";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case PositionOffsetLL.Id.PositionLL1Chosen:
                    try {
                        if (this.PositionLL1 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL1.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL1", "PositionLL24B", "position-LL1", "Position-LL-24B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL2Chosen:
                    try {
                        if (this.PositionLL2 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL2.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL2", "PositionLL28B", "position-LL2", "Position-LL-28B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL3Chosen:
                    try {
                        if (this.PositionLL3 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL3.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL3", "PositionLL32B", "position-LL3", "Position-LL-32B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL4Chosen:
                    try {
                        if (this.PositionLL4 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL4.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL4", "PositionLL36B", "position-LL4", "Position-LL-36B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL5Chosen:
                    try {
                        if (this.PositionLL5 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL5.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL5", "PositionLL44B", "position-LL5", "Position-LL-44B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL6Chosen:
                    try {
                        if (this.PositionLL6 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLL6.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL6", "PositionLL48B", "position-LL6", "Position-LL-48B", false); throw;
                    }
                    break;
                case PositionOffsetLL.Id.PositionLatLonChosen:
                    try {
                        if (this.PositionLatLon == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PositionLatLon.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLatLon", "PositionLLmD64b", "position-LatLon", "Position-LLmD-64b", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLL", null, "PositionOffsetLL", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionOffsetLL obj0 = new PositionOffsetLL();
            switch (this.Selected) {
                case PositionOffsetLL.Id.PositionLL1Chosen:
                {
                    obj0.PositionLL1 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL1);
                    break;
                }
                case PositionOffsetLL.Id.PositionLL2Chosen:
                {
                    obj0.PositionLL2 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL2);
                    break;
                }
                case PositionOffsetLL.Id.PositionLL3Chosen:
                {
                    obj0.PositionLL3 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL3);
                    break;
                }
                case PositionOffsetLL.Id.PositionLL4Chosen:
                {
                    obj0.PositionLL4 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL4);
                    break;
                }
                case PositionOffsetLL.Id.PositionLL5Chosen:
                {
                    obj0.PositionLL5 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL5);
                    break;
                }
                case PositionOffsetLL.Id.PositionLL6Chosen:
                {
                    obj0.PositionLL6 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLL6);
                    break;
                }
                case PositionOffsetLL.Id.PositionLatLonChosen:
                {
                    obj0.PositionLatLon = Oss.Asn1.Internal.CopyUtil.CopyType(this.PositionLatLon);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case PositionOffsetLL.Id.PositionLatLonChosen:
                    {
                        PositionLLmD64b data1 = this.PositionLatLon;

                        prt.Write("position-LatLon : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL6Chosen:
                    {
                        PositionLL48B data1 = this.PositionLL6;

                        prt.Write("position-LL6 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL5Chosen:
                    {
                        PositionLL44B data1 = this.PositionLL5;

                        prt.Write("position-LL5 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL4Chosen:
                    {
                        PositionLL36B data1 = this.PositionLL4;

                        prt.Write("position-LL4 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL3Chosen:
                    {
                        PositionLL32B data1 = this.PositionLL3;

                        prt.Write("position-LL3 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL2Chosen:
                    {
                        PositionLL28B data1 = this.PositionLL2;

                        prt.Write("position-LL2 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case PositionOffsetLL.Id.PositionLL1Chosen:
                    {
                        PositionLL24B data1 = this.PositionLL1;

                        prt.Write("position-LL1 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                enc.Output.Write3BitInt((int)this.Selected - 1);
                switch (this.Selected)
                {
                    case PositionOffsetLL.Id.PositionLL1Chosen:
                        try {
                            PositionLL24B data1 = this.PositionLL1;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL1", "PositionLL24B", "position-LL1", "Position-LL-24B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL2Chosen:
                        try {
                            PositionLL28B data1 = this.PositionLL2;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL2", "PositionLL28B", "position-LL2", "Position-LL-28B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL3Chosen:
                        try {
                            PositionLL32B data1 = this.PositionLL3;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL3", "PositionLL32B", "position-LL3", "Position-LL-32B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL4Chosen:
                        try {
                            PositionLL36B data1 = this.PositionLL4;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL4", "PositionLL36B", "position-LL4", "Position-LL-36B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL5Chosen:
                        try {
                            PositionLL44B data1 = this.PositionLL5;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL5", "PositionLL44B", "position-LL5", "Position-LL-44B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL6Chosen:
                        try {
                            PositionLL48B data1 = this.PositionLL6;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL6", "PositionLL48B", "position-LL6", "Position-LL-48B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLatLonChosen:
                        try {
                            PositionLLmD64b data1 = this.PositionLatLon;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLatLon", "PositionLLmD64b", "position-LatLon", "Position-LLmD-64b", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLL", null, "PositionOffsetLL", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;

                choice_alt0 = 1 + dec.Input.Read3BitInt();
                switch ((PositionOffsetLL.Id)choice_alt0)
                {
                    case PositionOffsetLL.Id.PositionLL1Chosen:
                        try {
                            PositionLL24B data1 = new PositionLL24B();

                            dec.DecodeType(data1);
                            this.PositionLL1 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL1", "PositionLL24B", "position-LL1", "Position-LL-24B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL2Chosen:
                        try {
                            PositionLL28B data1 = new PositionLL28B();

                            dec.DecodeType(data1);
                            this.PositionLL2 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL2", "PositionLL28B", "position-LL2", "Position-LL-28B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL3Chosen:
                        try {
                            PositionLL32B data1 = new PositionLL32B();

                            dec.DecodeType(data1);
                            this.PositionLL3 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL3", "PositionLL32B", "position-LL3", "Position-LL-32B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL4Chosen:
                        try {
                            PositionLL36B data1 = new PositionLL36B();

                            dec.DecodeType(data1);
                            this.PositionLL4 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL4", "PositionLL36B", "position-LL4", "Position-LL-36B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL5Chosen:
                        try {
                            PositionLL44B data1 = new PositionLL44B();

                            dec.DecodeType(data1);
                            this.PositionLL5 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL5", "PositionLL44B", "position-LL5", "Position-LL-44B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLL6Chosen:
                        try {
                            PositionLL48B data1 = new PositionLL48B();

                            dec.DecodeType(data1);
                            this.PositionLL6 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLL6", "PositionLL48B", "position-LL6", "Position-LL-48B", false); throw;
                        }
                        break;
                    case PositionOffsetLL.Id.PositionLatLonChosen:
                        try {
                            PositionLLmD64b data1 = new PositionLLmD64b();

                            dec.DecodeType(data1);
                            this.PositionLatLon = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PositionLatLon", "PositionLLmD64b", "position-LatLon", "Position-LLmD-64b", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionOffsetLL", null, "PositionOffsetLL", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-24B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL24B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL24B that = right as PositionLL24B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-24B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -2048)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 2047)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B12", false); throw;
                }
                try {
                    if (this.Lat < -2048)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 2047)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B12", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL24B", null, "Position-LL-24B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL24B obj0 = new PositionLL24B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -2048) > 12 || this.Lon < -2048)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-2048)), 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B12", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -2048) > 12 || this.Lat < -2048)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-2048)), 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B12", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL24B", null, "Position-LL-24B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(12, -2048);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B12", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(12, -2048);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B12", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL24B", null, "Position-LL-24B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-28B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL28B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL28B that = right as PositionLL28B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-28B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -8192)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B14", false); throw;
                }
                try {
                    if (this.Lat < -8192)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B14", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL28B", null, "Position-LL-28B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL28B obj0 = new PositionLL28B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -8192) > 14 || this.Lon < -8192)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-8192)), 14);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B14", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -8192) > 14 || this.Lat < -8192)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-8192)), 14);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B14", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL28B", null, "Position-LL-28B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(14, -8192);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B14", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(14, -8192);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B14", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL28B", null, "Position-LL-28B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-32B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL32B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL32B that = right as PositionLL32B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-32B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B16", false); throw;
                }
                try {
                    if (this.Lat < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B16", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL32B", null, "Position-LL-32B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL32B obj0 = new PositionLL32B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -32768) > 16 || this.Lon < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-32768)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B16", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -32768) > 16 || this.Lat < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-32768)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B16", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL32B", null, "Position-LL-32B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(16, -32768);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B16", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(16, -32768);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B16", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL32B", null, "Position-LL-32B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-36B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL36B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL36B that = right as PositionLL36B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-36B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -131072)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 131071)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B18", false); throw;
                }
                try {
                    if (this.Lat < -131072)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 131071)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B18", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL36B", null, "Position-LL-36B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL36B obj0 = new PositionLL36B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -131072) > 18 || this.Lon < -131072)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-131072)), 18);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B18", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -131072) > 18 || this.Lat < -131072)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-131072)), 18);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B18", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL36B", null, "Position-LL-36B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(18, -131072);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B18", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(18, -131072);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B18", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL36B", null, "Position-LL-36B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-44B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL44B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL44B that = right as PositionLL44B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-44B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -2097152)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 2097151)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B22", false); throw;
                }
                try {
                    if (this.Lat < -2097152)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 2097151)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B22", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL44B", null, "Position-LL-44B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL44B obj0 = new PositionLL44B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -2097152) > 22 || this.Lon < -2097152)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-2097152)), 22);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B22", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -2097152) > 22 || this.Lat < -2097152)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-2097152)), 22);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B22", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL44B", null, "Position-LL-44B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(22, -2097152);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B22", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(22, -2097152);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B22", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL44B", null, "Position-LL-44B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LL-48B' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLL48B : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLL48B that = right as PositionLL48B;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LL-48B";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -8388608)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 8388607)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B24", false); throw;
                }
                try {
                    if (this.Lat < -8388608)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 8388607)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B24", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL48B", null, "Position-LL-48B", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLL48B obj0 = new PositionLL48B();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -8388608) > 24 || this.Lon < -8388608)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-8388608)), 24);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B24", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -8388608) > 24 || this.Lat < -8388608)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-8388608)), 24);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B24", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL48B", null, "Position-LL-48B", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(24, -8388608);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "OffsetLL-B24", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(24, -8388608);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "OffsetLL-B24", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLL48B", null, "Position-LL-48B", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Position-LLmD-64b' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PositionLLmD64b : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lon'</summary>
        public long Lon { get; set; }
        /// <summary>Field 'lat'</summary>
        public long Lat { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PositionLLmD64b that = right as PositionLLmD64b;
            if (Lon != that.Lon)
                return false;
            if (Lat != that.Lat)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lon.GetHashCode();
            hash ^= Lat.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Position-LLmD-64b";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lon < -1799999999)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lon > 1800000001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "Longitude", false); throw;
                }
                try {
                    if (this.Lat < -900000000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lat > 900000001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLLmD64b", null, "Position-LLmD-64b", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PositionLLmD64b obj0 = new PositionLLmD64b();
            {
                obj0.Lon = this.Lon;
            }
            {
                obj0.Lat = this.Lat;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lon ");
                    prt.Write(this.Lon);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lat ");
                    prt.Write(this.Lat);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Lon - -1799999999) > 32 || this.Lon < -1799999999)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lon);
                    enc.EncodeConstrainedLongInteger((long)(this.Lon - (-1799999999)), 32);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "Longitude", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lat - -900000000) > 31 || this.Lat < -900000000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lat);
                    enc.EncodeConstrainedLongInteger((long)(this.Lat - (-900000000)), 31);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLLmD64b", null, "Position-LLmD-64b", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Lon = dec.DecodeConstrainedLongInteger(32, -1799999999);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lon", "long", "lon", "Longitude", false); throw;
                }
                try {
                    this.Lat = dec.DecodeConstrainedLongInteger(31, -900000000);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lat", "long", "lat", "Latitude", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PositionLLmD64b", null, "Position-LLmD-64b", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VerticalOffset' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class VerticalOffset : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            OffsetlChosen = 1,
            OffsetZChosen = 2,
            Offset3Chosen = 3,
            Offset4Chosen = 4,
            Offset5Chosen = 5,
            Offset6Chosen = 6,
            ElevationChosen = 7
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'offsetl'</summary>
        public long? Offsetl {
            get {
                if (_id == Id.OffsetlChosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.OffsetlChosen;
            }
        }
        /// <summary>Gets or selects alternative 'offsetZ'</summary>
        public long? OffsetZ {
            get {
                if (_id == Id.OffsetZChosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.OffsetZChosen;
            }
        }
        /// <summary>Gets or selects alternative 'offset3'</summary>
        public long? Offset3 {
            get {
                if (_id == Id.Offset3Chosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.Offset3Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'offset4'</summary>
        public long? Offset4 {
            get {
                if (_id == Id.Offset4Chosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.Offset4Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'offset5'</summary>
        public long? Offset5 {
            get {
                if (_id == Id.Offset5Chosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.Offset5Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'offset6'</summary>
        public long? Offset6 {
            get {
                if (_id == Id.Offset6Chosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.Offset6Chosen;
            }
        }
        /// <summary>Gets or selects alternative 'elevation'</summary>
        public long? Elevation {
            get {
                if (_id == Id.ElevationChosen)
                    return (_contained as long?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.ElevationChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VerticalOffset that = right as VerticalOffset;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VerticalOffset";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case VerticalOffset.Id.OffsetlChosen:
                    try {
                        if (this.Offsetl == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Offsetl.Value < -64)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Offsetl.Value > 63)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offsetl", "long", "offsetl", "VertOffset-B07", false); throw;
                    }
                    break;
                case VerticalOffset.Id.OffsetZChosen:
                    try {
                        if (this.OffsetZ == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.OffsetZ.Value < -128)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.OffsetZ.Value > 127)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetZ", "long", "offsetZ", "VertOffset-B08", false); throw;
                    }
                    break;
                case VerticalOffset.Id.Offset3Chosen:
                    try {
                        if (this.Offset3 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Offset3.Value < -256)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Offset3.Value > 255)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset3", "long", "offset3", "VertOffset-B09", false); throw;
                    }
                    break;
                case VerticalOffset.Id.Offset4Chosen:
                    try {
                        if (this.Offset4 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Offset4.Value < -512)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Offset4.Value > 511)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset4", "long", "offset4", "VertOffset-B10", false); throw;
                    }
                    break;
                case VerticalOffset.Id.Offset5Chosen:
                    try {
                        if (this.Offset5 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Offset5.Value < -1024)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Offset5.Value > 1023)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset5", "long", "offset5", "VertOffset-B11", false); throw;
                    }
                    break;
                case VerticalOffset.Id.Offset6Chosen:
                    try {
                        if (this.Offset6 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Offset6.Value < -2048)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Offset6.Value > 2047)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset6", "long", "offset6", "VertOffset-B12", false); throw;
                    }
                    break;
                case VerticalOffset.Id.ElevationChosen:
                    try {
                        if (this.Elevation == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Elevation.Value < -4096)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Elevation.Value > 61439)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation", "long", "elevation", "Elevation", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VerticalOffset", null, "VerticalOffset", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VerticalOffset obj0 = new VerticalOffset();
            switch (this.Selected) {
                case VerticalOffset.Id.OffsetlChosen:
                {
                    obj0.Offsetl = this.Offsetl;
                    break;
                }
                case VerticalOffset.Id.OffsetZChosen:
                {
                    obj0.OffsetZ = this.OffsetZ;
                    break;
                }
                case VerticalOffset.Id.Offset3Chosen:
                {
                    obj0.Offset3 = this.Offset3;
                    break;
                }
                case VerticalOffset.Id.Offset4Chosen:
                {
                    obj0.Offset4 = this.Offset4;
                    break;
                }
                case VerticalOffset.Id.Offset5Chosen:
                {
                    obj0.Offset5 = this.Offset5;
                    break;
                }
                case VerticalOffset.Id.Offset6Chosen:
                {
                    obj0.Offset6 = this.Offset6;
                    break;
                }
                case VerticalOffset.Id.ElevationChosen:
                {
                    obj0.Elevation = this.Elevation;
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case VerticalOffset.Id.ElevationChosen:
                    {
                        prt.Write("elevation : ");
                        prt.Write(this.Elevation.Value);
                    }
                    break;
                case VerticalOffset.Id.Offset6Chosen:
                    {
                        prt.Write("offset6 : ");
                        prt.Write(this.Offset6.Value);
                    }
                    break;
                case VerticalOffset.Id.Offset5Chosen:
                    {
                        prt.Write("offset5 : ");
                        prt.Write(this.Offset5.Value);
                    }
                    break;
                case VerticalOffset.Id.Offset4Chosen:
                    {
                        prt.Write("offset4 : ");
                        prt.Write(this.Offset4.Value);
                    }
                    break;
                case VerticalOffset.Id.Offset3Chosen:
                    {
                        prt.Write("offset3 : ");
                        prt.Write(this.Offset3.Value);
                    }
                    break;
                case VerticalOffset.Id.OffsetZChosen:
                    {
                        prt.Write("offsetZ : ");
                        prt.Write(this.OffsetZ.Value);
                    }
                    break;
                case VerticalOffset.Id.OffsetlChosen:
                    {
                        prt.Write("offsetl : ");
                        prt.Write(this.Offsetl.Value);
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                enc.Output.Write3BitInt((int)this.Selected - 1);
                switch (this.Selected)
                {
                    case VerticalOffset.Id.OffsetlChosen:
                        try {
                            if (enc.BitCount(this.Offsetl.Value - -64) > 7 || this.Offsetl.Value < -64)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offsetl.Value);
                            enc.Output.Write7BitInt((int)(this.Offsetl.Value - (-64)));
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offsetl", "long", "offsetl", "VertOffset-B07", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.OffsetZChosen:
                        try {
                            if (enc.BitCount(this.OffsetZ.Value - -128) > 8 || this.OffsetZ.Value < -128)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.OffsetZ.Value);
                            if (enc.IsAligned)
                                enc.Output.WritePadding();
                            enc.Output.Write8BitInt((int)(this.OffsetZ.Value - (-128)));
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetZ", "long", "offsetZ", "VertOffset-B08", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset3Chosen:
                        try {
                            if (enc.BitCount(this.Offset3.Value - -256) > 9 || this.Offset3.Value < -256)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset3.Value);
                            enc.EncodeConstrainedLongInteger((long)(this.Offset3.Value - (-256)), 9);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset3", "long", "offset3", "VertOffset-B09", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset4Chosen:
                        try {
                            if (enc.BitCount(this.Offset4.Value - -512) > 10 || this.Offset4.Value < -512)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset4.Value);
                            enc.EncodeConstrainedLongInteger((long)(this.Offset4.Value - (-512)), 10);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset4", "long", "offset4", "VertOffset-B10", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset5Chosen:
                        try {
                            if (enc.BitCount(this.Offset5.Value - -1024) > 11 || this.Offset5.Value < -1024)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset5.Value);
                            enc.EncodeConstrainedLongInteger((long)(this.Offset5.Value - (-1024)), 11);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset5", "long", "offset5", "VertOffset-B11", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset6Chosen:
                        try {
                            if (enc.BitCount(this.Offset6.Value - -2048) > 12 || this.Offset6.Value < -2048)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset6.Value);
                            enc.EncodeConstrainedLongInteger((long)(this.Offset6.Value - (-2048)), 12);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset6", "long", "offset6", "VertOffset-B12", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.ElevationChosen:
                        try {
                            if (enc.BitCount(this.Elevation.Value - -4096) > 16 || this.Elevation.Value < -4096)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Elevation.Value);
                            enc.EncodeConstrainedLongInteger((long)(this.Elevation.Value - (-4096)), 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation", "long", "elevation", "Elevation", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VerticalOffset", null, "VerticalOffset", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;

                choice_alt0 = 1 + dec.Input.Read3BitInt();
                switch ((VerticalOffset.Id)choice_alt0)
                {
                    case VerticalOffset.Id.OffsetlChosen:
                        try {
                            this.Offsetl = -64 + dec.Input.Read7BitInt();
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offsetl", "long", "offsetl", "VertOffset-B07", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.OffsetZChosen:
                        try {
                            if (dec.IsAligned)
                                dec.Input.SkipPadding();
                            this.OffsetZ = -128 + dec.Input.Read8BitInt();
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "OffsetZ", "long", "offsetZ", "VertOffset-B08", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset3Chosen:
                        try {
                            this.Offset3 = dec.DecodeConstrainedLongInteger(9, -256);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset3", "long", "offset3", "VertOffset-B09", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset4Chosen:
                        try {
                            this.Offset4 = dec.DecodeConstrainedLongInteger(10, -512);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset4", "long", "offset4", "VertOffset-B10", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset5Chosen:
                        try {
                            this.Offset5 = dec.DecodeConstrainedLongInteger(11, -1024);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset5", "long", "offset5", "VertOffset-B11", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.Offset6Chosen:
                        try {
                            this.Offset6 = dec.DecodeConstrainedLongInteger(12, -2048);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset6", "long", "offset6", "VertOffset-B12", false); throw;
                        }
                        break;
                    case VerticalOffset.Id.ElevationChosen:
                        try {
                            this.Elevation = dec.DecodeConstrainedLongInteger(16, -4096);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Elevation", "long", "elevation", "Elevation", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VerticalOffset", null, "VerticalOffset", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PathPrediction' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PathPrediction : Oss.Asn1.BaseType
    {
        /// <summary>Field 'radiusOfCurve'</summary>
        public long RadiusOfCurve { get; set; }
        /// <summary>Field 'confidence'</summary>
        public int Confidence { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathPrediction that = right as PathPrediction;
            if (RadiusOfCurve != that.RadiusOfCurve)
                return false;
            if (Confidence != that.Confidence)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= RadiusOfCurve.GetHashCode();
            hash ^= Confidence.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PathPrediction";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RadiusOfCurve < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.RadiusOfCurve > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RadiusOfCurve", "long", "radiusOfCurve", "RadiusOfCurvature", false); throw;
                }
                try {
                    if (this.Confidence < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Confidence > 200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Confidence", "int", "confidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPrediction", null, "PathPrediction", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PathPrediction obj0 = new PathPrediction();
            {
                obj0.RadiusOfCurve = this.RadiusOfCurve;
            }
            {
                obj0.Confidence = this.Confidence;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("radiusOfCurve ");
                    prt.Write(this.RadiusOfCurve);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("confidence ");
                    prt.Write(this.Confidence);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.RadiusOfCurve - -32767) > 16 || this.RadiusOfCurve < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RadiusOfCurve);
                    enc.EncodeConstrainedLongInteger((long)(this.RadiusOfCurve - (-32767)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RadiusOfCurve", "long", "radiusOfCurve", "RadiusOfCurvature", false); throw;
                }
                try {
                    if (enc.BitCount(this.Confidence - 0) > 8 || this.Confidence < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Confidence);
                    enc.Output.Write8BitInt((this.Confidence - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Confidence", "int", "confidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPrediction", null, "PathPrediction", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.RadiusOfCurve = dec.DecodeConstrainedLongInteger(16, -32767);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RadiusOfCurve", "long", "radiusOfCurve", "RadiusOfCurvature", false); throw;
                }
                try {
                    this.Confidence = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Confidence", "int", "confidence", "Confidence", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPrediction", null, "PathPrediction", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ExteriorLights' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum ExteriorLights
    {
        LowBeamHeadlightsOn = 0,
        HighBeamHeadlightsOn = 1,
        LeftTurnSignalOn = 2,
        RightTurnSignalOn = 3,
        HazardSignalOn = 4,
        AutomaticLightControlOn = 5,
        DaytimeRunningLightsOn = 6,
        FogLightOn = 7,
        ParkingLightsOn = 8
    }
    /// <summary>
    /// Represents schema type 'MapData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MapData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'timeStamp'</summary>
        public int? TimeStamp { get; set; }
        /// <summary>Field 'nodes'</summary>
        public NodeList Nodes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MapData that = right as MapData;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (TimeStamp != null) {
                if (TimeStamp != that.TimeStamp)
                    return false;
            } else if (that.TimeStamp != null)
                return false;
            if (Nodes != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Nodes, that.Nodes))
                    return false;
            } else if (that.Nodes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (TimeStamp != null)
                hash ^= TimeStamp.GetHashCode();
            if (Nodes != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Nodes);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MapData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null) {
                        if (this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeStamp.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.Nodes == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Nodes.Validate();
                    if (this.Nodes.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Nodes.Count > 63)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Nodes", "NodeList", "nodes", "NodeList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MapData", null, "MapData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MapData obj0 = new MapData();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.TimeStamp = this.TimeStamp;
            }
            {
                obj0.Nodes = this.Nodes == null ? null : (NodeList)this.Nodes.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    int? data1 = this.TimeStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    NodeList data1 = this.Nodes;

                    prt.WriteLine(",");
                    prt.Write("nodes ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TimeStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null)
                    {
                        if (enc.BitCount(this.TimeStamp.Value - 0) > 20 || this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeStamp.Value);
                        enc.EncodeConstrainedInteger((this.TimeStamp.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    this.Nodes.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Nodes", "NodeList", "nodes", "NodeList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MapData", null, "MapData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TimeStamp = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.TimeStamp = null;
                }
                try {
                    NodeList data1 = new NodeList();

                    data1.DecodePer(dec);
                    this.Nodes = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Nodes", "NodeList", "nodes", "NodeList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MapData", null, "MapData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'NodeList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class NodeList : System.Collections.Generic.List<Node>
    {
        /// <summary>
        /// Initializes a new instance of the NodeList class that is empty and has the default initial capacity.
        /// </summary>
        public NodeList() : base() {}
        /// <summary>
        /// Initializes a new instance of the NodeList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new NodeList.</param>
        /// </summary>
        public NodeList(System.Collections.Generic.IEnumerable<Node> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the NodeList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new NodeList can initially store.</param>
        /// </summary>
        public NodeList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            NodeList that = right as NodeList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Node", "#" + i1.ToString(), "Node", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeList", null, "NodeList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            NodeList obj0 = new NodeList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 63);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Node", "#" + i0.ToString(), "Node", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeList", null, "NodeList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 63, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Node data1 = new Node();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Node", "#" + this.Count.ToString(), "Node", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeList", null, "NodeList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Node' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Node : Oss.Asn1.BaseType
    {
        /// <summary>Field 'name'</summary>
        public string Name { get; set; }
        /// <summary>Field 'id'</summary>
        public NodeReferenceID Id { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        /// <summary>Field 'inLinks'</summary>
        public LinkList InLinks { get; set; }
        /// <summary>Field 'inLinks-ex'</summary>
        public LinkExList InLinksEx { get; set; }
        /// <summary>Field 'prohibitedzone'</summary>
        public MsgFrame.ProhibitedZone Prohibitedzone { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Node that = right as Node;
            if (Name != null) {
                if (!Name.Equals(that.Name))
                    return false;
            } else if (that.Name != null)
                return false;
            if (Id != null) {
                if (!Id.Equals(that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (InLinks != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(InLinks, that.InLinks))
                    return false;
            } else if (that.InLinks != null)
                return false;
            if (InLinksEx != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(InLinksEx, that.InLinksEx))
                    return false;
            } else if (that.InLinksEx != null)
                return false;
            if (Prohibitedzone != null) {
                if (!Prohibitedzone.Equals(that.Prohibitedzone))
                    return false;
            } else if (that.Prohibitedzone != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Name != null)
                hash ^= Name.GetHashCode();
            if (Id != null)
                hash ^= Id.GetHashCode();
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (InLinks != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(InLinks);
            if (InLinksEx != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(InLinksEx);
            if (Prohibitedzone != null)
                hash ^= Prohibitedzone.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Node";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Name != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Name, _InternalMetadata.CommonMetaData.S0);
                        if (this.Name.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Name.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Id.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "NodeReferenceID", "id", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.InLinks != null) {
                        this.InLinks.Validate();
                        if (this.InLinks.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.InLinks.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinks", "LinkList", "inLinks", "LinkList", false); throw;
                }
                try {
                    if (this.InLinksEx != null) {
                        this.InLinksEx.Validate();
                        if (this.InLinksEx.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.InLinksEx.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinksEx", "LinkExList", "inLinks-ex", "LinkExList", false); throw;
                }
                try {
                    if (this.Prohibitedzone != null) {
                        this.Prohibitedzone.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Prohibitedzone", "MsgFrame.ProhibitedZone", "prohibitedzone", "ProhibitedZone", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Node", null, "Node", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Node obj0 = new Node();
            {
                obj0.Name = this.Name;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyType(this.Id);
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                obj0.InLinks = this.InLinks == null ? null : (LinkList)this.InLinks.Copy();
            }
            {
                obj0.InLinksEx = this.InLinksEx == null ? null : (LinkExList)this.InLinksEx.Copy();
            }
            {
                obj0.Prohibitedzone = Oss.Asn1.Internal.CopyUtil.CopyType(this.Prohibitedzone);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    string data1 = this.Name;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("name ");
                        prt.PrintString(data1);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    LinkList data1 = this.InLinks;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("inLinks ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    LinkExList data1 = this.InLinksEx;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("inLinks-ex ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MsgFrame.ProhibitedZone data1 = this.Prohibitedzone;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("prohibitedzone ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] extMask0 = new byte[1];
                byte[] optMask0 = new byte[1];

                if (this.InLinksEx != null)
                {
                    extPresent0 = true;
                    extMask0[0] |= (byte)(0x80 >> 0);
                }
                if (this.Prohibitedzone != null)
                {
                    extPresent0 = true;
                    extMask0[0] |= (byte)(0x80 >> 1);
                }
                enc.Output.WriteBool(extPresent0);
                if (this.Name != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.InLinks != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.Name != null)
                    {
                        enc.EncodeKMCString(this.Name, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    enc.EncodeType(this.Id);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "NodeReferenceID", "id", "NodeReferenceID", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    LinkList data1 = this.InLinks;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinks", "LinkList", "inLinks", "LinkList", false); throw;
                }
                if (extPresent0)
                {
                    Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                    Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                    enc.EncodeNormallySmallLength(2);
                    enc.Output.WriteBits(extMask0, 0, 2);
                    if ((extMask0[0] & (0x80 >> 0)) != 0)
                    {
                        enc.Output = tempOut0;
                        try {
                            LinkExList data1 = this.InLinksEx;

                            data1.EncodePer(enc);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinksEx", "LinkExList", "inLinks-ex", "LinkExList", false); throw;
                        }
                        enc.CompleteEncoding();
                        enc.Output = savedOut0;
                        enc.EncodeOctetString(tempOut0.Consolidate());
                        tempOut0.Clear();
                    }
                    if ((extMask0[0] & (0x80 >> 1)) != 0)
                    {
                        enc.Output = tempOut0;
                        try {
                            MsgFrame.ProhibitedZone data1 = this.Prohibitedzone;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Prohibitedzone", "MsgFrame.ProhibitedZone", "prohibitedzone", "ProhibitedZone", false); throw;
                        }
                        enc.CompleteEncoding();
                        enc.Output = savedOut0;
                        enc.EncodeOctetString(tempOut0.Consolidate());
                        tempOut0.Clear();
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Node", null, "Node", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Name = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Name = null;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.Id = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "NodeReferenceID", "id", "NodeReferenceID", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        LinkList data1 = new LinkList();

                        data1.DecodePer(dec);
                        this.InLinks = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinks", "LinkList", "inLinks", "LinkList", false); throw;
                    }
                }
                else
                {
                    this.InLinks = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int fraglast0;
                    int length0;
                    int begin0;
                    Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;

                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0 && (extMask0[0] & 0x80) != 0)
                    {
                        fraglast0 = 65536;
                        length0 = dec.DecodeExtAdditonLength(ref fraglast0);
                        if (fraglast0 >= 0)
                            length0 = dec.PrepareExtInputFrag(length0);
                        begin0 = dec.Input.BitsRead();
                        try {
                            LinkExList data1 = new LinkExList();

                            data1.DecodePer(dec);
                            this.InLinksEx = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "InLinksEx", "LinkExList", "inLinks-ex", "LinkExList", false); throw;
                        }
                        if (dec.Options.StrictDecoding)
                            dec.CheckExtEncodingCompletion(begin0, length0);
                        if (fraglast0 < 0)
                            dec.Input.SkipBits(length0 * 8 - (dec.Input.BitsRead() - begin0));
                        dec.Input = savedInput0;
                    }
                    else
                    {
                        this.InLinksEx = null;
                    }
                    if (extMaskLen0 > 1 && (extMask0[0] & 0x40) != 0)
                    {
                        fraglast0 = 65536;
                        length0 = dec.DecodeExtAdditonLength(ref fraglast0);
                        if (fraglast0 >= 0)
                            length0 = dec.PrepareExtInputFrag(length0);
                        begin0 = dec.Input.BitsRead();
                        try {
                            MsgFrame.ProhibitedZone data1 = new MsgFrame.ProhibitedZone();

                            dec.DecodeType(data1);
                            this.Prohibitedzone = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Prohibitedzone", "MsgFrame.ProhibitedZone", "prohibitedzone", "ProhibitedZone", false); throw;
                        }
                        if (dec.Options.StrictDecoding)
                            dec.CheckExtEncodingCompletion(begin0, length0);
                        if (fraglast0 < 0)
                            dec.Input.SkipBits(length0 * 8 - (dec.Input.BitsRead() - begin0));
                        dec.Input = savedInput0;
                    }
                    else
                    {
                        this.Prohibitedzone = null;
                    }
                    if (extMaskLen0 > 2)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 2);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Node", null, "Node", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'NodeReferenceID' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class NodeReferenceID : Oss.Asn1.BaseType
    {
        /// <summary>Field 'region'</summary>
        public int? Region { get; set; }
        /// <summary>Field 'id'</summary>
        public int Id { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            NodeReferenceID that = right as NodeReferenceID;
            if (Region != null) {
                if (Region != that.Region)
                    return false;
            } else if (that.Region != null)
                return false;
            if (Id != that.Id)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Region != null)
                hash ^= Region.GetHashCode();
            hash ^= Id.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "NodeReferenceID";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Region != null) {
                        if (this.Region.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Region.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Region.Value", "int", "region", "RoadRegulatorID", false); throw;
                }
                try {
                    if (this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Id > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "NodeID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeReferenceID", null, "NodeReferenceID", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            NodeReferenceID obj0 = new NodeReferenceID();
            {
                obj0.Region = this.Region;
            }
            {
                obj0.Id = this.Id;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.Region;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("region ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("id ");
                    prt.Write(this.Id);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Region != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (this.Region != null)
                    {
                        if (enc.BitCount(this.Region.Value - 0) > 16 || this.Region.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Region.Value);
                        enc.EncodeConstrainedInteger((this.Region.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Region.Value", "int", "region", "RoadRegulatorID", false); throw;
                }
                try {
                    if (enc.BitCount(this.Id - 0) > 16 || this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Id);
                    enc.EncodeConstrainedInteger((this.Id - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "NodeID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeReferenceID", null, "NodeReferenceID", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Region = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Region", "int", "region", "RoadRegulatorID", false); throw;
                    }
                }
                else
                {
                    this.Region = null;
                }
                try {
                    this.Id = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "NodeID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NodeReferenceID", null, "NodeReferenceID", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LinkList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class LinkList : System.Collections.Generic.List<Link>
    {
        /// <summary>
        /// Initializes a new instance of the LinkList class that is empty and has the default initial capacity.
        /// </summary>
        public LinkList() : base() {}
        /// <summary>
        /// Initializes a new instance of the LinkList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new LinkList.</param>
        /// </summary>
        public LinkList(System.Collections.Generic.IEnumerable<Link> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the LinkList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new LinkList can initially store.</param>
        /// </summary>
        public LinkList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LinkList that = right as LinkList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Link", "#" + i1.ToString(), "Link", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkList", null, "LinkList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            LinkList obj0 = new LinkList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Link", "#" + i0.ToString(), "Link", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkList", null, "LinkList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Link data1 = new Link();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Link", "#" + this.Count.ToString(), "Link", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkList", null, "LinkList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Link' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Link : Oss.Asn1.BaseType
    {
        /// <summary>Field 'name'</summary>
        public string Name { get; set; }
        /// <summary>Field 'upstreamNodeld'</summary>
        public NodeReferenceID UpstreamNodeld { get; set; }
        /// <summary>Field 'speeclLimits'</summary>
        public SpeedLimitList SpeeclLimits { get; set; }
        /// <summary>Field 'laneWidth'</summary>
        public int LaneWidth { get; set; }
        /// <summary>Field 'points'</summary>
        public PointList Points { get; set; }
        /// <summary>Field 'movements'</summary>
        public MovementList Movements { get; set; }
        /// <summary>Field 'lanes'</summary>
        public LaneList Lanes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Link that = right as Link;
            if (Name != null) {
                if (!Name.Equals(that.Name))
                    return false;
            } else if (that.Name != null)
                return false;
            if (UpstreamNodeld != null) {
                if (!UpstreamNodeld.Equals(that.UpstreamNodeld))
                    return false;
            } else if (that.UpstreamNodeld != null)
                return false;
            if (SpeeclLimits != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(SpeeclLimits, that.SpeeclLimits))
                    return false;
            } else if (that.SpeeclLimits != null)
                return false;
            if (LaneWidth != that.LaneWidth)
                return false;
            if (Points != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Points, that.Points))
                    return false;
            } else if (that.Points != null)
                return false;
            if (Movements != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Movements, that.Movements))
                    return false;
            } else if (that.Movements != null)
                return false;
            if (Lanes != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Lanes, that.Lanes))
                    return false;
            } else if (that.Lanes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Name != null)
                hash ^= Name.GetHashCode();
            if (UpstreamNodeld != null)
                hash ^= UpstreamNodeld.GetHashCode();
            if (SpeeclLimits != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(SpeeclLimits);
            hash ^= LaneWidth.GetHashCode();
            if (Points != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Points);
            if (Movements != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Movements);
            if (Lanes != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Lanes);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Link";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Name != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Name, _InternalMetadata.CommonMetaData.S0);
                        if (this.Name.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Name.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.UpstreamNodeld == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.UpstreamNodeld.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeld", "NodeReferenceID", "upstreamNodeld", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.SpeeclLimits != null) {
                        this.SpeeclLimits.Validate();
                        if (this.SpeeclLimits.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.SpeeclLimits.Count > 9)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeeclLimits", "SpeedLimitList", "speeclLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.LaneWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.LaneWidth > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.Points != null) {
                        this.Points.Validate();
                        if (this.Points.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Points.Count > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    if (this.Movements != null) {
                        this.Movements.Validate();
                        if (this.Movements.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Movements.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "MovementList", "movements", "MovementList", false); throw;
                }
                try {
                    if (this.Lanes == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Lanes.Validate();
                    if (this.Lanes.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Lanes.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneList", "lanes", "LaneList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Link", null, "Link", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Link obj0 = new Link();
            {
                obj0.Name = this.Name;
            }
            {
                obj0.UpstreamNodeld = Oss.Asn1.Internal.CopyUtil.CopyType(this.UpstreamNodeld);
            }
            {
                obj0.SpeeclLimits = this.SpeeclLimits == null ? null : (SpeedLimitList)this.SpeeclLimits.Copy();
            }
            {
                obj0.LaneWidth = this.LaneWidth;
            }
            {
                obj0.Points = this.Points == null ? null : (PointList)this.Points.Copy();
            }
            {
                obj0.Movements = this.Movements == null ? null : (MovementList)this.Movements.Copy();
            }
            {
                obj0.Lanes = this.Lanes == null ? null : (LaneList)this.Lanes.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    string data1 = this.Name;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("name ");
                        prt.PrintString(data1);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("upstreamNodeld ");
                    if (this.UpstreamNodeld == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.UpstreamNodeld);
                    }
                }
                {
                    SpeedLimitList data1 = this.SpeeclLimits;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speeclLimits ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("laneWidth ");
                    prt.Write(this.LaneWidth);
                }
                {
                    PointList data1 = this.Points;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("points ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MovementList data1 = this.Movements;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("movements ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    LaneList data1 = this.Lanes;

                    prt.WriteLine(",");
                    prt.Write("lanes ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Name != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.SpeeclLimits != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Points != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Movements != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.Name != null)
                    {
                        enc.EncodeKMCString(this.Name, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    enc.EncodeType(this.UpstreamNodeld);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeld", "NodeReferenceID", "upstreamNodeld", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.SpeeclLimits != null)
                    {
                        this.SpeeclLimits.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeeclLimits", "SpeedLimitList", "speeclLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (enc.BitCount(this.LaneWidth - 0) > 15 || this.LaneWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneWidth);
                    enc.EncodeConstrainedInteger((this.LaneWidth - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.Points != null)
                    {
                        this.Points.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    MovementList data1 = this.Movements;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "MovementList", "movements", "MovementList", false); throw;
                }
                try {
                    this.Lanes.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneList", "lanes", "LaneList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Link", null, "Link", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Name = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Name = null;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.UpstreamNodeld = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeld", "NodeReferenceID", "upstreamNodeld", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        SpeedLimitList data1 = new SpeedLimitList();

                        data1.DecodePer(dec);
                        this.SpeeclLimits = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeeclLimits", "SpeedLimitList", "speeclLimits", "SpeedLimitList", false); throw;
                    }
                }
                else
                {
                    this.SpeeclLimits = null;
                }
                try {
                    this.LaneWidth = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        PointList data1 = new PointList();

                        data1.DecodePer(dec);
                        this.Points = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                    }
                }
                else
                {
                    this.Points = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        MovementList data1 = new MovementList();

                        data1.DecodePer(dec);
                        this.Movements = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "MovementList", "movements", "MovementList", false); throw;
                    }
                }
                else
                {
                    this.Movements = null;
                }
                try {
                    LaneList data1 = new LaneList();

                    data1.DecodePer(dec);
                    this.Lanes = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneList", "lanes", "LaneList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Link", null, "Link", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SpeedLimitList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class SpeedLimitList : System.Collections.Generic.List<RegulatorySpeedLimit>
    {
        /// <summary>
        /// Initializes a new instance of the SpeedLimitList class that is empty and has the default initial capacity.
        /// </summary>
        public SpeedLimitList() : base() {}
        /// <summary>
        /// Initializes a new instance of the SpeedLimitList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new SpeedLimitList.</param>
        /// </summary>
        public SpeedLimitList(System.Collections.Generic.IEnumerable<RegulatorySpeedLimit> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the SpeedLimitList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new SpeedLimitList can initially store.</param>
        /// </summary>
        public SpeedLimitList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SpeedLimitList that = right as SpeedLimitList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "RegulatorySpeedLimit", "#" + i1.ToString(), "RegulatorySpeedLimit", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 9)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SpeedLimitList", null, "SpeedLimitList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            SpeedLimitList obj0 = new SpeedLimitList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 9)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 9);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "RegulatorySpeedLimit", "#" + i0.ToString(), "RegulatorySpeedLimit", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SpeedLimitList", null, "SpeedLimitList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 9, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            RegulatorySpeedLimit data1 = new RegulatorySpeedLimit();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "RegulatorySpeedLimit", "#" + this.Count.ToString(), "RegulatorySpeedLimit", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SpeedLimitList", null, "SpeedLimitList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RegulatorySpeedLimit' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RegulatorySpeedLimit : Oss.Asn1.BaseType
    {
        /// <summary>Field 'type'</summary>
        public SpeedLimitType Type { get; set; }
        /// <summary>Field 'speed'</summary>
        public int Speed { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RegulatorySpeedLimit that = right as RegulatorySpeedLimit;
            if (Type != that.Type)
                return false;
            if (Speed != that.Speed)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Type.GetHashCode();
            hash ^= Speed.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RegulatorySpeedLimit";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Type", "SpeedLimitType", "type", "SpeedLimitType", false); throw;
                }
                try {
                    if (this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Speed > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RegulatorySpeedLimit", null, "RegulatorySpeedLimit", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RegulatorySpeedLimit obj0 = new RegulatorySpeedLimit();
            {
                obj0.Type = this.Type;
            }
            {
                obj0.Speed = this.Speed;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("type ");
                    switch (this.Type) {
                    case SpeedLimitType.Unknown:
                        prt.Write("unknown");
                        break;
                    case SpeedLimitType.MaxSpeedInSchoolZone:
                        prt.Write("maxSpeedInSchoolZone");
                        break;
                    case SpeedLimitType.MaxSpeedInSchoolZoneWhenChildrenArePresent:
                        prt.Write("maxSpeedInSchoolZoneWhenChildrenArePresent");
                        break;
                    case SpeedLimitType.MaxSpeedInConstructionZone:
                        prt.Write("maxSpeedInConstructionZone");
                        break;
                    case SpeedLimitType.VehicleMinSpeed:
                        prt.Write("vehicleMinSpeed");
                        break;
                    case SpeedLimitType.VehicleMaxSpeed:
                        prt.Write("vehicleMaxSpeed");
                        break;
                    case SpeedLimitType.VehicleNightMaxSpeed:
                        prt.Write("vehicleNightMaxSpeed");
                        break;
                    case SpeedLimitType.TruckMinSpeed:
                        prt.Write("truckMinSpeed");
                        break;
                    case SpeedLimitType.TruckMaxSpeed:
                        prt.Write("truckMaxSpeed");
                        break;
                    case SpeedLimitType.TruckNightMaxSpeed:
                        prt.Write("truckNightMaxSpeed");
                        break;
                    case SpeedLimitType.VehiclesWithTrailersMinSpeed:
                        prt.Write("vehiclesWithTrailersMinSpeed");
                        break;
                    case SpeedLimitType.VehiclesWithTrailersMaxSpeed:
                        prt.Write("vehiclesWithTrailersMaxSpeed");
                        break;
                    case SpeedLimitType.VehiclesWithTrailersNightMaxSpeed:
                        prt.Write("vehiclesWithTrailersNightMaxSpeed");
                        break;
                    default:
                        prt.Write((int)this.Type);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("speed ");
                    prt.Write(this.Speed);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeEnumWithExtension((int)this.Type, _InternalMetadata.PerCodecMetaData.SortedEnum13, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Type", "SpeedLimitType", "type", "SpeedLimitType", false); throw;
                }
                try {
                    if (enc.BitCount(this.Speed - 0) > 13 || this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed);
                    enc.EncodeConstrainedInteger((this.Speed - (0)), 13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RegulatorySpeedLimit", null, "RegulatorySpeedLimit", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum13, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum13, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum13);
                    this.Type = (SpeedLimitType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Type", "SpeedLimitType", "type", "SpeedLimitType", false); throw;
                }
                try {
                    this.Speed = dec.DecodeConstrainedInteger(13, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RegulatorySpeedLimit", null, "RegulatorySpeedLimit", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SpeedLimitType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SpeedLimitType
    {
        Unknown = 0,
        MaxSpeedInSchoolZone = 1,
        MaxSpeedInSchoolZoneWhenChildrenArePresent = 2,
        MaxSpeedInConstructionZone = 3,
        VehicleMinSpeed = 4,
        VehicleMaxSpeed = 5,
        VehicleNightMaxSpeed = 6,
        TruckMinSpeed = 7,
        TruckMaxSpeed = 8,
        TruckNightMaxSpeed = 9,
        VehiclesWithTrailersMinSpeed = 10,
        VehiclesWithTrailersMaxSpeed = 11,
        VehiclesWithTrailersNightMaxSpeed = 12
    }
    /// <summary>
    /// Represents schema type 'PointList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PointList : System.Collections.Generic.List<RoadPoint>
    {
        /// <summary>
        /// Initializes a new instance of the PointList class that is empty and has the default initial capacity.
        /// </summary>
        public PointList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PointList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PointList.</param>
        /// </summary>
        public PointList(System.Collections.Generic.IEnumerable<RoadPoint> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PointList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PointList can initially store.</param>
        /// </summary>
        public PointList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PointList that = right as PointList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "RoadPoint", "#" + i1.ToString(), "RoadPoint", false); throw;
                    }
                }
                if (this.Count < 2)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 31)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PointList", null, "PointList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PointList obj0 = new PointList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 2 || this.Count > 31)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 2, 31);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "RoadPoint", "#" + i0.ToString(), "RoadPoint", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PointList", null, "PointList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(2, 31, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            RoadPoint data1 = new RoadPoint();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "RoadPoint", "#" + this.Count.ToString(), "RoadPoint", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PointList", null, "PointList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RoadPoint' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RoadPoint : Oss.Asn1.BaseType
    {
        /// <summary>Field 'posOffset'</summary>
        public PositionOffsetLLV PosOffset { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RoadPoint that = right as RoadPoint;
            if (PosOffset != null) {
                if (!PosOffset.Equals(that.PosOffset))
                    return false;
            } else if (that.PosOffset != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (PosOffset != null)
                hash ^= PosOffset.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RoadPoint";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.PosOffset == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PosOffset.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosOffset", "PositionOffsetLLV", "posOffset", "PositionOffsetLLV", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadPoint", null, "RoadPoint", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RoadPoint obj0 = new RoadPoint();
            {
                obj0.PosOffset = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosOffset);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("posOffset ");
                    if (this.PosOffset == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.PosOffset);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeType(this.PosOffset);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosOffset", "PositionOffsetLLV", "posOffset", "PositionOffsetLLV", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadPoint", null, "RoadPoint", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.PosOffset = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosOffset", "PositionOffsetLLV", "posOffset", "PositionOffsetLLV", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadPoint", null, "RoadPoint", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MovementList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class MovementList : System.Collections.Generic.List<MsgFrame.Movement>
    {
        /// <summary>
        /// Initializes a new instance of the MovementList class that is empty and has the default initial capacity.
        /// </summary>
        public MovementList() : base() {}
        /// <summary>
        /// Initializes a new instance of the MovementList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new MovementList.</param>
        /// </summary>
        public MovementList(System.Collections.Generic.IEnumerable<MsgFrame.Movement> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the MovementList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new MovementList can initially store.</param>
        /// </summary>
        public MovementList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MovementList that = right as MovementList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Movement", "#" + i1.ToString(), "Movement", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementList", null, "MovementList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            MovementList obj0 = new MovementList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Movement", "#" + i0.ToString(), "Movement", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementList", null, "MovementList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Movement data1 = new Movement();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Movement", "#" + this.Count.ToString(), "Movement", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementList", null, "MovementList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Movement' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Movement : Oss.Asn1.BaseType
    {
        /// <summary>Field 'remotelntersection'</summary>
        public NodeReferenceID Remotelntersection { get; set; }
        /// <summary>Field 'phaseId'</summary>
        public int? PhaseId { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Movement that = right as Movement;
            if (Remotelntersection != null) {
                if (!Remotelntersection.Equals(that.Remotelntersection))
                    return false;
            } else if (that.Remotelntersection != null)
                return false;
            if (PhaseId != null) {
                if (PhaseId != that.PhaseId)
                    return false;
            } else if (that.PhaseId != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Remotelntersection != null)
                hash ^= Remotelntersection.GetHashCode();
            if (PhaseId != null)
                hash ^= PhaseId.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Movement";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Remotelntersection == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Remotelntersection.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Remotelntersection", "NodeReferenceID", "remotelntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.PhaseId != null) {
                        if (this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.PhaseId.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Movement", null, "Movement", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Movement obj0 = new Movement();
            {
                obj0.Remotelntersection = Oss.Asn1.Internal.CopyUtil.CopyType(this.Remotelntersection);
            }
            {
                obj0.PhaseId = this.PhaseId;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("remotelntersection ");
                    if (this.Remotelntersection == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Remotelntersection);
                    }
                }
                {
                    int? data1 = this.PhaseId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("phaseId ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.PhaseId != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeType(this.Remotelntersection);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Remotelntersection", "NodeReferenceID", "remotelntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.PhaseId != null)
                    {
                        if (enc.BitCount(this.PhaseId.Value - 0) > 8 || this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PhaseId.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.PhaseId.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Movement", null, "Movement", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.Remotelntersection = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Remotelntersection", "NodeReferenceID", "remotelntersection", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.PhaseId = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId", "int", "phaseId", "PhaseID", false); throw;
                    }
                }
                else
                {
                    this.PhaseId = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Movement", null, "Movement", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class LaneList : System.Collections.Generic.List<MsgFrame.Lane>
    {
        /// <summary>
        /// Initializes a new instance of the LaneList class that is empty and has the default initial capacity.
        /// </summary>
        public LaneList() : base() {}
        /// <summary>
        /// Initializes a new instance of the LaneList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new LaneList.</param>
        /// </summary>
        public LaneList(System.Collections.Generic.IEnumerable<MsgFrame.Lane> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the LaneList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new LaneList can initially store.</param>
        /// </summary>
        public LaneList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneList that = right as LaneList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Lane", "#" + i1.ToString(), "Lane", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneList", null, "LaneList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            LaneList obj0 = new LaneList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Lane", "#" + i0.ToString(), "Lane", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneList", null, "LaneList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Lane data1 = new Lane();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Lane", "#" + this.Count.ToString(), "Lane", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneList", null, "LaneList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Lane' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Lane : Oss.Asn1.BaseType
    {
        /// <summary>Field 'laneID'</summary>
        public int LaneID { get; set; }
        /// <summary>Field 'laneAttributes'</summary>
        public MsgFrame.LaneAttributes LaneAttributes { get; set; }
        /// <summary>Field 'maneuvers'</summary>
        public Oss.Asn1.BitStringWithNamedBits Maneuvers { get; set; }
        /// <summary>Field 'connectsTo'</summary>
        public ConnectsToList ConnectsTo { get; set; }
        /// <summary>Field 'speedLimits'</summary>
        public SpeedLimitList SpeedLimits { get; set; }
        /// <summary>Field 'points'</summary>
        public PointList Points { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Lane that = right as Lane;
            if (LaneID != that.LaneID)
                return false;
            if (LaneAttributes != null) {
                if (!LaneAttributes.Equals(that.LaneAttributes))
                    return false;
            } else if (that.LaneAttributes != null)
                return false;
            if (Maneuvers != null) {
                if (!Maneuvers.Equals(that.Maneuvers))
                    return false;
            } else if (that.Maneuvers != null)
                return false;
            if (ConnectsTo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ConnectsTo, that.ConnectsTo))
                    return false;
            } else if (that.ConnectsTo != null)
                return false;
            if (SpeedLimits != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(SpeedLimits, that.SpeedLimits))
                    return false;
            } else if (that.SpeedLimits != null)
                return false;
            if (Points != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Points, that.Points))
                    return false;
            } else if (that.Points != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= LaneID.GetHashCode();
            if (LaneAttributes != null)
                hash ^= LaneAttributes.GetHashCode();
            if (Maneuvers != null)
                hash ^= Maneuvers.GetHashCode();
            if (ConnectsTo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ConnectsTo);
            if (SpeedLimits != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(SpeedLimits);
            if (Points != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Points);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Lane";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.LaneID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.LaneID > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneID", "int", "laneID", "LaneID", false); throw;
                }
                try {
                    if (this.LaneAttributes != null) {
                        this.LaneAttributes.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                }
                try {
                    if (this.Maneuvers != null) {
                        if (this.Maneuvers.Count != 12)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                }
                try {
                    if (this.ConnectsTo != null) {
                        this.ConnectsTo.Validate();
                        if (this.ConnectsTo.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ConnectsTo.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsTo", "ConnectsToList", "connectsTo", "ConnectsToList", false); throw;
                }
                try {
                    if (this.SpeedLimits != null) {
                        this.SpeedLimits.Validate();
                        if (this.SpeedLimits.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.SpeedLimits.Count > 9)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.Points != null) {
                        this.Points.Validate();
                        if (this.Points.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Points.Count > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Lane", null, "Lane", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Lane obj0 = new Lane();
            {
                obj0.LaneID = this.LaneID;
            }
            {
                obj0.LaneAttributes = Oss.Asn1.Internal.CopyUtil.CopyType(this.LaneAttributes);
            }
            {
                obj0.Maneuvers = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Maneuvers);
            }
            {
                obj0.ConnectsTo = this.ConnectsTo == null ? null : (ConnectsToList)this.ConnectsTo.Copy();
            }
            {
                obj0.SpeedLimits = this.SpeedLimits == null ? null : (SpeedLimitList)this.SpeedLimits.Copy();
            }
            {
                obj0.Points = this.Points == null ? null : (PointList)this.Points.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("laneID ");
                    prt.Write(this.LaneID);
                }
                {
                    MsgFrame.LaneAttributes data1 = this.LaneAttributes;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("laneAttributes ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Maneuvers;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("maneuvers ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "maneuverStraightAllowed";
                                    case (int)1: return "maneuverLeftAllowed";
                                    case (int)2: return "maneuverRightAllowed";
                                    case (int)3: return "maneuverUTurnAllowed";
                                    case (int)4: return "maneuverLeftTurnOnReclAllowecl";
                                    case (int)5: return "maneuverRightTurnOnReclAllowecl";
                                    case (int)6: return "maneuverLaneChangeAllowed";
                                    case (int)7: return "maneuverNoStoppingAllowecl";
                                    case (int)8: return "yieldAllwaysRequired";
                                    case (int)9: return "goWithHalt";
                                    case (int)10: return "caution";
                                    case (int)11: return "reservedl";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    ConnectsToList data1 = this.ConnectsTo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectsTo ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    SpeedLimitList data1 = this.SpeedLimits;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedLimits ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    PointList data1 = this.Points;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("points ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.LaneAttributes != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Maneuvers != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.ConnectsTo != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.SpeedLimits != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.Points != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (enc.BitCount(this.LaneID - 0) > 8 || this.LaneID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneID);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.LaneID - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneID", "int", "laneID", "LaneID", false); throw;
                }
                try {
                    if (this.LaneAttributes != null)
                    {
                        enc.EncodeType(this.LaneAttributes);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                }
                try {
                    if (this.Maneuvers != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges5, this.Maneuvers.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.Maneuvers, length1, 12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                }
                try {
                    ConnectsToList data1 = this.ConnectsTo;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsTo", "ConnectsToList", "connectsTo", "ConnectsToList", false); throw;
                }
                try {
                    if (this.SpeedLimits != null)
                    {
                        this.SpeedLimits.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.Points != null)
                    {
                        this.Points.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Lane", null, "Lane", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.LaneID = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneID", "int", "laneID", "LaneID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.LaneAttributes data1 = new MsgFrame.LaneAttributes();

                        dec.DecodeType(data1);
                        this.LaneAttributes = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                    }
                }
                else
                {
                    this.LaneAttributes = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Maneuvers = dec.DecodeBitStringWithNamedBits(12, _InternalMetadata.BerCodecMetaData.Ranges5);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                    }
                }
                else
                {
                    this.Maneuvers = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        ConnectsToList data1 = new ConnectsToList();

                        data1.DecodePer(dec);
                        this.ConnectsTo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsTo", "ConnectsToList", "connectsTo", "ConnectsToList", false); throw;
                    }
                }
                else
                {
                    this.ConnectsTo = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        SpeedLimitList data1 = new SpeedLimitList();

                        data1.DecodePer(dec);
                        this.SpeedLimits = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                    }
                }
                else
                {
                    this.SpeedLimits = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        PointList data1 = new PointList();

                        data1.DecodePer(dec);
                        this.Points = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                    }
                }
                else
                {
                    this.Points = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Lane", null, "Lane", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class LaneAttributes : Oss.Asn1.BaseType
    {
        /// <summary>Field 'shareWith'</summary>
        public Oss.Asn1.BitStringWithNamedBits ShareWith { get; set; }
        /// <summary>Field 'laneType'</summary>
        public LaneTypeAttributes LaneType { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneAttributes that = right as LaneAttributes;
            if (ShareWith != null) {
                if (!ShareWith.Equals(that.ShareWith))
                    return false;
            } else if (that.ShareWith != null)
                return false;
            if (LaneType != null) {
                if (!LaneType.Equals(that.LaneType))
                    return false;
            } else if (that.LaneType != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (ShareWith != null)
                hash ^= ShareWith.GetHashCode();
            if (LaneType != null)
                hash ^= LaneType.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LaneAttributes";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.ShareWith != null) {
                        if (this.ShareWith.Count != 10)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ShareWith", "Oss.Asn1.BitStringWithNamedBits", "shareWith", "LaneSharing", false); throw;
                }
                try {
                    if (this.LaneType == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.LaneType.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneType", "LaneTypeAttributes", "laneType", "LaneTypeAttributes", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneAttributes", null, "LaneAttributes", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LaneAttributes obj0 = new LaneAttributes();
            {
                obj0.ShareWith = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.ShareWith);
            }
            {
                obj0.LaneType = Oss.Asn1.Internal.CopyUtil.CopyType(this.LaneType);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.ShareWith;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("shareWith ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)2: return "otherNonMotorizedTrafficTypes";
                                    case (int)3: return "individualMotorizedVehicleTraffic";
                                    case (int)4: return "busVehicleTraffic";
                                    case (int)5: return "taxiVehicleTraffic";
                                    case (int)6: return "pedestriansTraffic";
                                    case (int)7: return "cyclistVehicleTraffic";
                                    case (int)8: return "trackedVehicleTraffic";
                                    case (int)9: return "pedestrianTraffic";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    LaneTypeAttributes data1 = this.LaneType;

                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("laneType ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.ShareWith != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (this.ShareWith != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges6, this.ShareWith.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.ShareWith, length1, 10);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ShareWith", "Oss.Asn1.BitStringWithNamedBits", "shareWith", "LaneSharing", false); throw;
                }
                try {
                    enc.EncodeType(this.LaneType);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneType", "LaneTypeAttributes", "laneType", "LaneTypeAttributes", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneAttributes", null, "LaneAttributes", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.ShareWith = dec.DecodeBitStringWithNamedBits(10, _InternalMetadata.BerCodecMetaData.Ranges6);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ShareWith", "Oss.Asn1.BitStringWithNamedBits", "shareWith", "LaneSharing", false); throw;
                    }
                }
                else
                {
                    this.ShareWith = null;
                }
                try {
                    LaneTypeAttributes data1 = new LaneTypeAttributes();

                    dec.DecodeType(data1);
                    this.LaneType = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneType", "LaneTypeAttributes", "laneType", "LaneTypeAttributes", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneAttributes", null, "LaneAttributes", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneSharing' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneSharing
    {
        NoValue = 0,
        OtherNonMotorizedTrafficTypes = 2,
        IndividualMotorizedVehicleTraffic = 3,
        BusVehicleTraffic = 4,
        TaxiVehicleTraffic = 5,
        PedestriansTraffic = 6,
        CyclistVehicleTraffic = 7,
        TrackedVehicleTraffic = 8,
        PedestrianTraffic = 9
    }
    /// <summary>
    /// Represents schema type 'LaneTypeAttributes' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class LaneTypeAttributes : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            VehicleChosen = 1,
            CrosswalkChosen = 2,
            BikeLaneChosen = 3,
            SidewalkChosen = 4,
            MedianChosen = 5,
            StripingChosen = 6,
            TrackedVehicleChosen = 7,
            ParkingChosen = 8
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'vehicle'</summary>
        public Oss.Asn1.BitStringWithNamedBits Vehicle {
            get {
                if (_id == Id.VehicleChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.VehicleChosen;
            }
        }
        /// <summary>Gets or selects alternative 'crosswalk'</summary>
        public Oss.Asn1.BitStringWithNamedBits Crosswalk {
            get {
                if (_id == Id.CrosswalkChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.CrosswalkChosen;
            }
        }
        /// <summary>Gets or selects alternative 'bikeLane'</summary>
        public Oss.Asn1.BitStringWithNamedBits BikeLane {
            get {
                if (_id == Id.BikeLaneChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.BikeLaneChosen;
            }
        }
        /// <summary>Gets or selects alternative 'sidewalk'</summary>
        public Oss.Asn1.BitStringWithNamedBits Sidewalk {
            get {
                if (_id == Id.SidewalkChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SidewalkChosen;
            }
        }
        /// <summary>Gets or selects alternative 'median'</summary>
        public Oss.Asn1.BitStringWithNamedBits Median {
            get {
                if (_id == Id.MedianChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.MedianChosen;
            }
        }
        /// <summary>Gets or selects alternative 'striping'</summary>
        public Oss.Asn1.BitStringWithNamedBits Striping {
            get {
                if (_id == Id.StripingChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.StripingChosen;
            }
        }
        /// <summary>Gets or selects alternative 'trackedVehicle'</summary>
        public Oss.Asn1.BitStringWithNamedBits TrackedVehicle {
            get {
                if (_id == Id.TrackedVehicleChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.TrackedVehicleChosen;
            }
        }
        /// <summary>Gets or selects alternative 'parking'</summary>
        public Oss.Asn1.BitStringWithNamedBits Parking {
            get {
                if (_id == Id.ParkingChosen)
                    return (_contained as Oss.Asn1.BitStringWithNamedBits);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.ParkingChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneTypeAttributes that = right as LaneTypeAttributes;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LaneTypeAttributes";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case LaneTypeAttributes.Id.VehicleChosen:
                    try {
                        if (this.Vehicle == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            try {
                                if (this.Vehicle.Count != 8)
                                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                            } catch (System.Exception) {
                            }
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Vehicle", "Oss.Asn1.BitStringWithNamedBits", "vehicle", "LaneAttributes-Vehicle", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.CrosswalkChosen:
                    try {
                        if (this.Crosswalk == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Crosswalk.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Crosswalk", "Oss.Asn1.BitStringWithNamedBits", "crosswalk", "LaneAttributes-Crosswalk", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.BikeLaneChosen:
                    try {
                        if (this.BikeLane == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.BikeLane.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "BikeLane", "Oss.Asn1.BitStringWithNamedBits", "bikeLane", "LaneAttributes-Bike", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.SidewalkChosen:
                    try {
                        if (this.Sidewalk == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Sidewalk.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Sidewalk", "Oss.Asn1.BitStringWithNamedBits", "sidewalk", "LaneAttributes-Sidewalk", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.MedianChosen:
                    try {
                        if (this.Median == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Median.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Median", "Oss.Asn1.BitStringWithNamedBits", "median", "LaneAttributes-Barrier", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.StripingChosen:
                    try {
                        if (this.Striping == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Striping.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Striping", "Oss.Asn1.BitStringWithNamedBits", "striping", "LaneAttributes-Striping", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.TrackedVehicleChosen:
                    try {
                        if (this.TrackedVehicle == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TrackedVehicle", "Oss.Asn1.BitStringWithNamedBits", "trackedVehicle", "LaneAttributes-TrackedVehicle", false); throw;
                    }
                    break;
                case LaneTypeAttributes.Id.ParkingChosen:
                    try {
                        if (this.Parking == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.Parking.Count != 16)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "Oss.Asn1.BitStringWithNamedBits", "parking", "LaneAttributes-Parking", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneTypeAttributes", null, "LaneTypeAttributes", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LaneTypeAttributes obj0 = new LaneTypeAttributes();
            switch (this.Selected) {
                case LaneTypeAttributes.Id.VehicleChosen:
                {
                    obj0.Vehicle = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Vehicle);
                    break;
                }
                case LaneTypeAttributes.Id.CrosswalkChosen:
                {
                    obj0.Crosswalk = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Crosswalk);
                    break;
                }
                case LaneTypeAttributes.Id.BikeLaneChosen:
                {
                    obj0.BikeLane = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.BikeLane);
                    break;
                }
                case LaneTypeAttributes.Id.SidewalkChosen:
                {
                    obj0.Sidewalk = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Sidewalk);
                    break;
                }
                case LaneTypeAttributes.Id.MedianChosen:
                {
                    obj0.Median = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Median);
                    break;
                }
                case LaneTypeAttributes.Id.StripingChosen:
                {
                    obj0.Striping = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Striping);
                    break;
                }
                case LaneTypeAttributes.Id.TrackedVehicleChosen:
                {
                    obj0.TrackedVehicle = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.TrackedVehicle);
                    break;
                }
                case LaneTypeAttributes.Id.ParkingChosen:
                {
                    obj0.Parking = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Parking);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case LaneTypeAttributes.Id.ParkingChosen:
                    {
                        prt.Write("parking : ");
                        if (this.Parking == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Parking, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "parkingRevocableLane";
                                        case (int)1: return "parallelParkinginUse";
                                        case (int)2: return "headlnParkinglnUse";
                                        case (int)3: return "doNotParkZone";
                                        case (int)4: return "parkingForBusUse";
                                        case (int)5: return "parkingForTaxiUse";
                                        case (int)6: return "noPublicParkingUse";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.TrackedVehicleChosen:
                    {
                        prt.Write("trackedVehicle : ");
                        if (this.TrackedVehicle == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.TrackedVehicle, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "spec-RevocableLane";
                                        case (int)1: return "spec-commuterRailRoadTrack";
                                        case (int)2: return "spec-lightRailRoadTrack";
                                        case (int)3: return "spec-heavyRailRoadTrack";
                                        case (int)4: return "spec-otherRailType";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.StripingChosen:
                    {
                        prt.Write("striping : ");
                        if (this.Striping == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Striping, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "stripeToConnectingLanesRevocableLane";
                                        case (int)1: return "stripeDrawOnLeft";
                                        case (int)2: return "stripeDrawOnRight";
                                        case (int)3: return "stripeToConnectingLanesLeft";
                                        case (int)4: return "stripeToConnectingLanesRight";
                                        case (int)5: return "stripeToConnectingLanesAhead";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.MedianChosen:
                    {
                        prt.Write("median : ");
                        if (this.Median == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Median, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "median-RevocableLane";
                                        case (int)1: return "median";
                                        case (int)2: return "whiteLineHashing";
                                        case (int)3: return "stripedLines";
                                        case (int)4: return "doubleStripedLines";
                                        case (int)5: return "trafficCones";
                                        case (int)6: return "constructionBarrier";
                                        case (int)7: return "trafficChannels";
                                        case (int)8: return "lowCurbs";
                                        case (int)9: return "highCurbs";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.SidewalkChosen:
                    {
                        prt.Write("sidewalk : ");
                        if (this.Sidewalk == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Sidewalk, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "sidewalk-RevocableLane";
                                        case (int)1: return "bicyleAllowed";
                                        case (int)2: return "isSidewalkFlyOverLane";
                                        case (int)3: return "walkBikes";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.BikeLaneChosen:
                    {
                        prt.Write("bikeLane : ");
                        if (this.BikeLane == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.BikeLane, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "bikeRevocableLane";
                                        case (int)1: return "pedestrianUseAllowed";
                                        case (int)2: return "isBikeFlyOverLane";
                                        case (int)3: return "fixedCycleTime";
                                        case (int)4: return "biDirectionalCycleTimes";
                                        case (int)5: return "isolatedByBarrier";
                                        case (int)6: return "unsignalizedSegmentsPresent";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.CrosswalkChosen:
                    {
                        prt.Write("crosswalk : ");
                        if (this.Crosswalk == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Crosswalk, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "crosswalkRevocableLane";
                                        case (int)1: return "bicyleUseAllowed";
                                        case (int)2: return "isXwalkFlyOverLane";
                                        case (int)3: return "fixedCycleTi";
                                        case (int)4: return "biDirectionalCycleTimes";
                                        case (int)5: return "hasPushToWalkButton";
                                        case (int)6: return "audioSupport";
                                        case (int)7: return "rfSignalRequestPresent";
                                        case (int)8: return "unsignalizedSegmentsPresent";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                case LaneTypeAttributes.Id.VehicleChosen:
                    {
                        prt.Write("vehicle : ");
                        if (this.Vehicle == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintBitString(this.Vehicle, 
                                delegate(int index)
                                {
                                    switch (index)
                                    {
                                        case (int)0: return "isVehicleRevocableLane";
                                        case (int)1: return "isRampLane";
                                        case (int)2: return "hovLaneUseOnly";
                                        case (int)3: return "restrictedToBusUse";
                                        case (int)4: return "restrictedToTaxiUse";
                                        case (int)5: return "restrictedFromPublicUse";
                                        case (int)6: return "emergencyLane";
                                        case (int)7: return "permissionOnRequest";
                                    }
                                    return null;
                                }
                            );
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 8)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 9);
                else
                {
                    enc.Output.Write3BitInt((int)this.Selected - 1);
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case LaneTypeAttributes.Id.VehicleChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges4, this.Vehicle.LastOneBitPos() + 1);
                            bool extPresent1 = !(length1 == 8);
                            enc.EncodeBool(extPresent1);
                            if (extPresent1)
                                enc.EncodeBitStringWithNamedBits(this.Vehicle, length1);
                            else {
                                enc.EncodeBitStringWithNamedBits(this.Vehicle, length1, 8);
                            }
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Vehicle", "Oss.Asn1.BitStringWithNamedBits", "vehicle", "LaneAttributes-Vehicle", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.CrosswalkChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Crosswalk.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.Crosswalk, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Crosswalk", "Oss.Asn1.BitStringWithNamedBits", "crosswalk", "LaneAttributes-Crosswalk", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.BikeLaneChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.BikeLane.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.BikeLane, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "BikeLane", "Oss.Asn1.BitStringWithNamedBits", "bikeLane", "LaneAttributes-Bike", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.SidewalkChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Sidewalk.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.Sidewalk, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Sidewalk", "Oss.Asn1.BitStringWithNamedBits", "sidewalk", "LaneAttributes-Sidewalk", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.MedianChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Median.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.Median, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Median", "Oss.Asn1.BitStringWithNamedBits", "median", "LaneAttributes-Barrier", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.StripingChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Striping.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.Striping, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Striping", "Oss.Asn1.BitStringWithNamedBits", "striping", "LaneAttributes-Striping", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.TrackedVehicleChosen:
                        try {
                            enc.EncodeBitStringWithNamedBits(this.TrackedVehicle, this.TrackedVehicle.LastOneBitPos() + 1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TrackedVehicle", "Oss.Asn1.BitStringWithNamedBits", "trackedVehicle", "LaneAttributes-TrackedVehicle", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.ParkingChosen:
                        try {
                            int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Parking.LastOneBitPos() + 1);
                            enc.EncodeBitStringWithNamedBits(this.Parking, length1, 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "Oss.Asn1.BitStringWithNamedBits", "parking", "LaneAttributes-Parking", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneTypeAttributes", null, "LaneTypeAttributes", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 9;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = dec.Input.Read3BitInt() + 1;
                    if (choice_alt0 > 8)
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                switch ((LaneTypeAttributes.Id)choice_alt0)
                {
                    case LaneTypeAttributes.Id.VehicleChosen:
                        try {
                            Oss.Asn1.BitStringWithNamedBits data1;
                            bool extPresent1 = dec.Input.ReadBool();
                            if (extPresent1)
                                data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges4);
                            else
                                data1 = dec.DecodeBitStringWithNamedBits(8, _InternalMetadata.BerCodecMetaData.Ranges4);
                            if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 8))
                                dec.RaiseExtLengthError(extPresent1);
                            this.Vehicle = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Vehicle", "Oss.Asn1.BitStringWithNamedBits", "vehicle", "LaneAttributes-Vehicle", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.CrosswalkChosen:
                        try {
                            this.Crosswalk = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Crosswalk", "Oss.Asn1.BitStringWithNamedBits", "crosswalk", "LaneAttributes-Crosswalk", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.BikeLaneChosen:
                        try {
                            this.BikeLane = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "BikeLane", "Oss.Asn1.BitStringWithNamedBits", "bikeLane", "LaneAttributes-Bike", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.SidewalkChosen:
                        try {
                            this.Sidewalk = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Sidewalk", "Oss.Asn1.BitStringWithNamedBits", "sidewalk", "LaneAttributes-Sidewalk", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.MedianChosen:
                        try {
                            this.Median = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Median", "Oss.Asn1.BitStringWithNamedBits", "median", "LaneAttributes-Barrier", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.StripingChosen:
                        try {
                            this.Striping = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Striping", "Oss.Asn1.BitStringWithNamedBits", "striping", "LaneAttributes-Striping", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.TrackedVehicleChosen:
                        try {
                            this.TrackedVehicle = dec.DecodeBitStringWithNamedBits();
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TrackedVehicle", "Oss.Asn1.BitStringWithNamedBits", "trackedVehicle", "LaneAttributes-TrackedVehicle", false); throw;
                        }
                        break;
                    case LaneTypeAttributes.Id.ParkingChosen:
                        try {
                            this.Parking = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "Oss.Asn1.BitStringWithNamedBits", "parking", "LaneAttributes-Parking", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneTypeAttributes", null, "LaneTypeAttributes", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Vehicle' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesVehicle
    {
        IsVehicleRevocableLane = 0,
        IsRampLane = 1,
        HovLaneUseOnly = 2,
        RestrictedToBusUse = 3,
        RestrictedToTaxiUse = 4,
        RestrictedFromPublicUse = 5,
        EmergencyLane = 6,
        PermissionOnRequest = 7
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Crosswalk' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesCrosswalk
    {
        CrosswalkRevocableLane = 0,
        BicyleUseAllowed = 1,
        IsXwalkFlyOverLane = 2,
        FixedCycleTi = 3,
        BiDirectionalCycleTimes = 4,
        HasPushToWalkButton = 5,
        AudioSupport = 6,
        RfSignalRequestPresent = 7,
        UnsignalizedSegmentsPresent = 8
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Bike' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesBike
    {
        BikeRevocableLane = 0,
        PedestrianUseAllowed = 1,
        IsBikeFlyOverLane = 2,
        FixedCycleTime = 3,
        BiDirectionalCycleTimes = 4,
        IsolatedByBarrier = 5,
        UnsignalizedSegmentsPresent = 6
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Sidewalk' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesSidewalk
    {
        SidewalkRevocableLane = 0,
        BicyleAllowed = 1,
        IsSidewalkFlyOverLane = 2,
        WalkBikes = 3
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Barrier' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesBarrier
    {
        MedianRevocableLane = 0,
        Median = 1,
        WhiteLineHashing = 2,
        StripedLines = 3,
        DoubleStripedLines = 4,
        TrafficCones = 5,
        ConstructionBarrier = 6,
        TrafficChannels = 7,
        LowCurbs = 8,
        HighCurbs = 9
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Striping' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesStriping
    {
        StripeToConnectingLanesRevocableLane = 0,
        StripeDrawOnLeft = 1,
        StripeDrawOnRight = 2,
        StripeToConnectingLanesLeft = 3,
        StripeToConnectingLanesRight = 4,
        StripeToConnectingLanesAhead = 5
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-TrackedVehicle' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesTrackedVehicle
    {
        SpecRevocableLane = 0,
        SpecCommuterRailRoadTrack = 1,
        SpecLightRailRoadTrack = 2,
        SpecHeavyRailRoadTrack = 3,
        SpecOtherRailType = 4
    }
    /// <summary>
    /// Represents schema type 'LaneAttributes-Parking' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum LaneAttributesParking
    {
        ParkingRevocableLane = 0,
        ParallelParkinginUse = 1,
        HeadlnParkinglnUse = 2,
        DoNotParkZone = 3,
        ParkingForBusUse = 4,
        ParkingForTaxiUse = 5,
        NoPublicParkingUse = 6
    }
    /// <summary>
    /// Represents schema type 'AllowedManeuvers' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum AllowedManeuvers
    {
        ManeuverStraightAllowed = 0,
        ManeuverLeftAllowed = 1,
        ManeuverRightAllowed = 2,
        ManeuverUTurnAllowed = 3,
        ManeuverLeftTurnOnReclAllowecl = 4,
        ManeuverRightTurnOnReclAllowecl = 5,
        ManeuverLaneChangeAllowed = 6,
        ManeuverNoStoppingAllowecl = 7,
        YieldAllwaysRequired = 8,
        GoWithHalt = 9,
        Caution = 10,
        Reservedl = 11
    }
    /// <summary>
    /// Represents schema type 'ConnectsToList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ConnectsToList : System.Collections.Generic.List<Connection>
    {
        /// <summary>
        /// Initializes a new instance of the ConnectsToList class that is empty and has the default initial capacity.
        /// </summary>
        public ConnectsToList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ConnectsToList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ConnectsToList.</param>
        /// </summary>
        public ConnectsToList(System.Collections.Generic.IEnumerable<Connection> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ConnectsToList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ConnectsToList can initially store.</param>
        /// </summary>
        public ConnectsToList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ConnectsToList that = right as ConnectsToList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Connection", "#" + i1.ToString(), "Connection", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToList", null, "ConnectsToList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ConnectsToList obj0 = new ConnectsToList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Connection", "#" + i0.ToString(), "Connection", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToList", null, "ConnectsToList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Connection data1 = new Connection();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Connection", "#" + this.Count.ToString(), "Connection", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToList", null, "ConnectsToList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Connection' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Connection : Oss.Asn1.BaseType
    {
        /// <summary>Field 'remoteIntersection'</summary>
        public NodeReferenceID RemoteIntersection { get; set; }
        /// <summary>Field 'connectingLane'</summary>
        public MsgFrame.ConnectingLane ConnectingLane { get; set; }
        /// <summary>Field 'phaseid'</summary>
        public int? Phaseid { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Connection that = right as Connection;
            if (RemoteIntersection != null) {
                if (!RemoteIntersection.Equals(that.RemoteIntersection))
                    return false;
            } else if (that.RemoteIntersection != null)
                return false;
            if (ConnectingLane != null) {
                if (!ConnectingLane.Equals(that.ConnectingLane))
                    return false;
            } else if (that.ConnectingLane != null)
                return false;
            if (Phaseid != null) {
                if (Phaseid != that.Phaseid)
                    return false;
            } else if (that.Phaseid != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (RemoteIntersection != null)
                hash ^= RemoteIntersection.GetHashCode();
            if (ConnectingLane != null)
                hash ^= ConnectingLane.GetHashCode();
            if (Phaseid != null)
                hash ^= Phaseid.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Connection";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RemoteIntersection == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RemoteIntersection.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.ConnectingLane != null) {
                        this.ConnectingLane.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "MsgFrame.ConnectingLane", "connectingLane", "ConnectingLane", false); throw;
                }
                try {
                    if (this.Phaseid != null) {
                        if (this.Phaseid.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Phaseid.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phaseid.Value", "int", "phaseid", "PhaseID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Connection", null, "Connection", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Connection obj0 = new Connection();
            {
                obj0.RemoteIntersection = Oss.Asn1.Internal.CopyUtil.CopyType(this.RemoteIntersection);
            }
            {
                obj0.ConnectingLane = Oss.Asn1.Internal.CopyUtil.CopyType(this.ConnectingLane);
            }
            {
                obj0.Phaseid = this.Phaseid;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("remoteIntersection ");
                    if (this.RemoteIntersection == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RemoteIntersection);
                    }
                }
                {
                    MsgFrame.ConnectingLane data1 = this.ConnectingLane;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectingLane ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.Phaseid;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("phaseid ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.ConnectingLane != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Phaseid != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.RemoteIntersection);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    MsgFrame.ConnectingLane data1 = this.ConnectingLane;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "MsgFrame.ConnectingLane", "connectingLane", "ConnectingLane", false); throw;
                }
                try {
                    if (this.Phaseid != null)
                    {
                        if (enc.BitCount(this.Phaseid.Value - 0) > 8 || this.Phaseid.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Phaseid.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.Phaseid.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phaseid.Value", "int", "phaseid", "PhaseID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Connection", null, "Connection", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.RemoteIntersection = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        MsgFrame.ConnectingLane data1 = new MsgFrame.ConnectingLane();

                        dec.DecodeType(data1);
                        this.ConnectingLane = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "MsgFrame.ConnectingLane", "connectingLane", "ConnectingLane", false); throw;
                    }
                }
                else
                {
                    this.ConnectingLane = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.Phaseid = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Phaseid", "int", "phaseid", "PhaseID", false); throw;
                    }
                }
                else
                {
                    this.Phaseid = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Connection", null, "Connection", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ConnectingLane' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ConnectingLane : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lane'</summary>
        public int Lane { get; set; }
        /// <summary>Field 'maneuver'</summary>
        public Oss.Asn1.BitStringWithNamedBits Maneuver { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ConnectingLane that = right as ConnectingLane;
            if (Lane != that.Lane)
                return false;
            if (Maneuver != null) {
                if (!Maneuver.Equals(that.Maneuver))
                    return false;
            } else if (that.Maneuver != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Lane.GetHashCode();
            if (Maneuver != null)
                hash ^= Maneuver.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ConnectingLane";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lane > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lane", "int", "lane", "LaneID", false); throw;
                }
                try {
                    if (this.Maneuver != null) {
                        if (this.Maneuver.Count != 12)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuver", "Oss.Asn1.BitStringWithNamedBits", "maneuver", "AllowedManeuvers", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLane", null, "ConnectingLane", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ConnectingLane obj0 = new ConnectingLane();
            {
                obj0.Lane = this.Lane;
            }
            {
                obj0.Maneuver = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Maneuver);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lane ");
                    prt.Write(this.Lane);
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Maneuver;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("maneuver ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "maneuverStraightAllowed";
                                    case (int)1: return "maneuverLeftAllowed";
                                    case (int)2: return "maneuverRightAllowed";
                                    case (int)3: return "maneuverUTurnAllowed";
                                    case (int)4: return "maneuverLeftTurnOnReclAllowecl";
                                    case (int)5: return "maneuverRightTurnOnReclAllowecl";
                                    case (int)6: return "maneuverLaneChangeAllowed";
                                    case (int)7: return "maneuverNoStoppingAllowecl";
                                    case (int)8: return "yieldAllwaysRequired";
                                    case (int)9: return "goWithHalt";
                                    case (int)10: return "caution";
                                    case (int)11: return "reservedl";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Maneuver != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.Lane - 0) > 8 || this.Lane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lane);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.Lane - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lane", "int", "lane", "LaneID", false); throw;
                }
                try {
                    if (this.Maneuver != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges5, this.Maneuver.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.Maneuver, length1, 12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuver", "Oss.Asn1.BitStringWithNamedBits", "maneuver", "AllowedManeuvers", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLane", null, "ConnectingLane", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.Lane = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lane", "int", "lane", "LaneID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Maneuver = dec.DecodeBitStringWithNamedBits(12, _InternalMetadata.BerCodecMetaData.Ranges5);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuver", "Oss.Asn1.BitStringWithNamedBits", "maneuver", "AllowedManeuvers", false); throw;
                    }
                }
                else
                {
                    this.Maneuver = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLane", null, "ConnectingLane", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LinkExList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class LinkExList : System.Collections.Generic.List<LinkEx>
    {
        /// <summary>
        /// Initializes a new instance of the LinkExList class that is empty and has the default initial capacity.
        /// </summary>
        public LinkExList() : base() {}
        /// <summary>
        /// Initializes a new instance of the LinkExList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new LinkExList.</param>
        /// </summary>
        public LinkExList(System.Collections.Generic.IEnumerable<LinkEx> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the LinkExList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new LinkExList can initially store.</param>
        /// </summary>
        public LinkExList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LinkExList that = right as LinkExList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "LinkEx", "#" + i1.ToString(), "LinkEx", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkExList", null, "LinkExList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            LinkExList obj0 = new LinkExList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "LinkEx", "#" + i0.ToString(), "LinkEx", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkExList", null, "LinkExList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            LinkEx data1 = new LinkEx();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "LinkEx", "#" + this.Count.ToString(), "LinkEx", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkExList", null, "LinkExList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LinkEx' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class LinkEx : Oss.Asn1.BaseType
    {
        /// <summary>Field 'name'</summary>
        public string Name { get; set; }
        /// <summary>Field 'upstreamNodeId'</summary>
        public NodeReferenceID UpstreamNodeId { get; set; }
        /// <summary>Field 'speedLimits'</summary>
        public SpeedLimitList SpeedLimits { get; set; }
        /// <summary>Field 'linkWidth'</summary>
        public int? LinkWidth { get; set; }
        /// <summary>Field 'refLine'</summary>
        public PointList RefLine { get; set; }
        /// <summary>Field 'movements-ex'</summary>
        public MovementExList MovementsEx { get; set; }
        /// <summary>Field 'sections'</summary>
        public SectionList Sections { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LinkEx that = right as LinkEx;
            if (Name != null) {
                if (!Name.Equals(that.Name))
                    return false;
            } else if (that.Name != null)
                return false;
            if (UpstreamNodeId != null) {
                if (!UpstreamNodeId.Equals(that.UpstreamNodeId))
                    return false;
            } else if (that.UpstreamNodeId != null)
                return false;
            if (SpeedLimits != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(SpeedLimits, that.SpeedLimits))
                    return false;
            } else if (that.SpeedLimits != null)
                return false;
            if (LinkWidth != null) {
                if (LinkWidth != that.LinkWidth)
                    return false;
            } else if (that.LinkWidth != null)
                return false;
            if (RefLine != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(RefLine, that.RefLine))
                    return false;
            } else if (that.RefLine != null)
                return false;
            if (MovementsEx != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(MovementsEx, that.MovementsEx))
                    return false;
            } else if (that.MovementsEx != null)
                return false;
            if (Sections != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Sections, that.Sections))
                    return false;
            } else if (that.Sections != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Name != null)
                hash ^= Name.GetHashCode();
            if (UpstreamNodeId != null)
                hash ^= UpstreamNodeId.GetHashCode();
            if (SpeedLimits != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(SpeedLimits);
            if (LinkWidth != null)
                hash ^= LinkWidth.GetHashCode();
            if (RefLine != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(RefLine);
            if (MovementsEx != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(MovementsEx);
            if (Sections != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Sections);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LinkEx";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Name != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Name, _InternalMetadata.CommonMetaData.S0);
                        if (this.Name.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Name.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.UpstreamNodeId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.UpstreamNodeId.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.SpeedLimits != null) {
                        this.SpeedLimits.Validate();
                        if (this.SpeedLimits.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.SpeedLimits.Count > 9)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.LinkWidth != null) {
                        if (this.LinkWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.LinkWidth.Value > 32767)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LinkWidth.Value", "int", "linkWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.RefLine != null) {
                        this.RefLine.Validate();
                        if (this.RefLine.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.RefLine.Count > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefLine", "PointList", "refLine", "PointList", false); throw;
                }
                try {
                    if (this.MovementsEx != null) {
                        this.MovementsEx.Validate();
                        if (this.MovementsEx.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.MovementsEx.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MovementsEx", "MovementExList", "movements-ex", "MovementExList", false); throw;
                }
                try {
                    if (this.Sections == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Sections.Validate();
                    if (this.Sections.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Sections.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Sections", "SectionList", "sections", "SectionList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkEx", null, "LinkEx", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LinkEx obj0 = new LinkEx();
            {
                obj0.Name = this.Name;
            }
            {
                obj0.UpstreamNodeId = Oss.Asn1.Internal.CopyUtil.CopyType(this.UpstreamNodeId);
            }
            {
                obj0.SpeedLimits = this.SpeedLimits == null ? null : (SpeedLimitList)this.SpeedLimits.Copy();
            }
            {
                obj0.LinkWidth = this.LinkWidth;
            }
            {
                obj0.RefLine = this.RefLine == null ? null : (PointList)this.RefLine.Copy();
            }
            {
                obj0.MovementsEx = this.MovementsEx == null ? null : (MovementExList)this.MovementsEx.Copy();
            }
            {
                obj0.Sections = this.Sections == null ? null : (SectionList)this.Sections.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    string data1 = this.Name;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("name ");
                        prt.PrintString(data1);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("upstreamNodeId ");
                    if (this.UpstreamNodeId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.UpstreamNodeId);
                    }
                }
                {
                    SpeedLimitList data1 = this.SpeedLimits;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedLimits ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    int? data1 = this.LinkWidth;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("linkWidth ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PointList data1 = this.RefLine;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("refLine ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MovementExList data1 = this.MovementsEx;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("movements-ex ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    SectionList data1 = this.Sections;

                    prt.WriteLine(",");
                    prt.Write("sections ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Name != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.SpeedLimits != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.LinkWidth != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.RefLine != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.MovementsEx != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (this.Name != null)
                    {
                        enc.EncodeKMCString(this.Name, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    enc.EncodeType(this.UpstreamNodeId);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.SpeedLimits != null)
                    {
                        this.SpeedLimits.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.LinkWidth != null)
                    {
                        if (enc.BitCount(this.LinkWidth.Value - 0) > 15 || this.LinkWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LinkWidth.Value);
                        enc.EncodeConstrainedInteger((this.LinkWidth.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LinkWidth.Value", "int", "linkWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.RefLine != null)
                    {
                        this.RefLine.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefLine", "PointList", "refLine", "PointList", false); throw;
                }
                try {
                    MovementExList data1 = this.MovementsEx;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MovementsEx", "MovementExList", "movements-ex", "MovementExList", false); throw;
                }
                try {
                    this.Sections.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Sections", "SectionList", "sections", "SectionList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkEx", null, "LinkEx", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Name = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Name = null;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.UpstreamNodeId = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        SpeedLimitList data1 = new SpeedLimitList();

                        data1.DecodePer(dec);
                        this.SpeedLimits = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                    }
                }
                else
                {
                    this.SpeedLimits = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.LinkWidth = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LinkWidth", "int", "linkWidth", "LaneWidth", false); throw;
                    }
                }
                else
                {
                    this.LinkWidth = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        PointList data1 = new PointList();

                        data1.DecodePer(dec);
                        this.RefLine = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RefLine", "PointList", "refLine", "PointList", false); throw;
                    }
                }
                else
                {
                    this.RefLine = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        MovementExList data1 = new MovementExList();

                        data1.DecodePer(dec);
                        this.MovementsEx = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MovementsEx", "MovementExList", "movements-ex", "MovementExList", false); throw;
                    }
                }
                else
                {
                    this.MovementsEx = null;
                }
                try {
                    SectionList data1 = new SectionList();

                    data1.DecodePer(dec);
                    this.Sections = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Sections", "SectionList", "sections", "SectionList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LinkEx", null, "LinkEx", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MovementExList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class MovementExList : System.Collections.Generic.List<MovementEx>
    {
        /// <summary>
        /// Initializes a new instance of the MovementExList class that is empty and has the default initial capacity.
        /// </summary>
        public MovementExList() : base() {}
        /// <summary>
        /// Initializes a new instance of the MovementExList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new MovementExList.</param>
        /// </summary>
        public MovementExList(System.Collections.Generic.IEnumerable<MovementEx> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the MovementExList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new MovementExList can initially store.</param>
        /// </summary>
        public MovementExList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MovementExList that = right as MovementExList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "MovementEx", "#" + i1.ToString(), "MovementEx", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementExList", null, "MovementExList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            MovementExList obj0 = new MovementExList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "MovementEx", "#" + i0.ToString(), "MovementEx", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementExList", null, "MovementExList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            MovementEx data1 = new MovementEx();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "MovementEx", "#" + this.Count.ToString(), "MovementEx", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementExList", null, "MovementExList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MovementEx' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MovementEx : Oss.Asn1.BaseType
    {
        /// <summary>Field 'remoteIntersection'</summary>
        public NodeReferenceID RemoteIntersection { get; set; }
        /// <summary>Field 'phaseId'</summary>
        public int? PhaseId { get; set; }
        /// <summary>Field 'turn-direction'</summary>
        public Maneuver? TurnDirection { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MovementEx that = right as MovementEx;
            if (RemoteIntersection != null) {
                if (!RemoteIntersection.Equals(that.RemoteIntersection))
                    return false;
            } else if (that.RemoteIntersection != null)
                return false;
            if (PhaseId != null) {
                if (PhaseId != that.PhaseId)
                    return false;
            } else if (that.PhaseId != null)
                return false;
            if (TurnDirection != null) {
                if (TurnDirection != that.TurnDirection)
                    return false;
            } else if (that.TurnDirection != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (RemoteIntersection != null)
                hash ^= RemoteIntersection.GetHashCode();
            if (PhaseId != null)
                hash ^= PhaseId.GetHashCode();
            if (TurnDirection != null)
                hash ^= TurnDirection.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MovementEx";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RemoteIntersection == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RemoteIntersection.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.PhaseId != null) {
                        if (this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.PhaseId.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
                try {
                    if (this.TurnDirection != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection.Value", "Maneuver", "turn-direction", "Maneuver", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementEx", null, "MovementEx", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MovementEx obj0 = new MovementEx();
            {
                obj0.RemoteIntersection = Oss.Asn1.Internal.CopyUtil.CopyType(this.RemoteIntersection);
            }
            {
                obj0.PhaseId = this.PhaseId;
            }
            {
                obj0.TurnDirection = this.TurnDirection;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("remoteIntersection ");
                    if (this.RemoteIntersection == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RemoteIntersection);
                    }
                }
                {
                    int? data1 = this.PhaseId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("phaseId ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Maneuver? data1 = this.TurnDirection;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("turn-direction ");
                        switch (data1.Value) {
                        case Maneuver.ManeuverStraight:
                            prt.Write("maneuverStraight");
                            break;
                        case Maneuver.ManeuverLeftTurn:
                            prt.Write("maneuverLeftTurn");
                            break;
                        case Maneuver.ManeuverRightTurn:
                            prt.Write("maneuverRightTurn");
                            break;
                        case Maneuver.ManeuverUTurn:
                            prt.Write("maneuverUTurn");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.PhaseId != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TurnDirection != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.RemoteIntersection);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.PhaseId != null)
                    {
                        if (enc.BitCount(this.PhaseId.Value - 0) > 8 || this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PhaseId.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.PhaseId.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
                try {
                    if (this.TurnDirection != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.TurnDirection.Value, _InternalMetadata.PerCodecMetaData.SortedEnum14, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum14);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection.Value", "Maneuver", "turn-direction", "Maneuver", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementEx", null, "MovementEx", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.RemoteIntersection = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.PhaseId = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId", "int", "phaseId", "PhaseID", false); throw;
                    }
                }
                else
                {
                    this.PhaseId = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum14, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum14, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum14);
                        this.TurnDirection = (Maneuver)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection", "Maneuver", "turn-direction", "Maneuver", false); throw;
                    }
                }
                else
                {
                    this.TurnDirection = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MovementEx", null, "MovementEx", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Maneuver' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum Maneuver
    {
        ManeuverStraight = 0,
        ManeuverLeftTurn = 1,
        ManeuverRightTurn = 2,
        ManeuverUTurn = 3
    }
    /// <summary>
    /// Represents schema type 'SectionList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class SectionList : System.Collections.Generic.List<Section>
    {
        /// <summary>
        /// Initializes a new instance of the SectionList class that is empty and has the default initial capacity.
        /// </summary>
        public SectionList() : base() {}
        /// <summary>
        /// Initializes a new instance of the SectionList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new SectionList.</param>
        /// </summary>
        public SectionList(System.Collections.Generic.IEnumerable<Section> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the SectionList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new SectionList can initially store.</param>
        /// </summary>
        public SectionList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SectionList that = right as SectionList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Section", "#" + i1.ToString(), "Section", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SectionList", null, "SectionList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            SectionList obj0 = new SectionList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Section", "#" + i0.ToString(), "Section", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SectionList", null, "SectionList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Section data1 = new Section();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Section", "#" + this.Count.ToString(), "Section", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SectionList", null, "SectionList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Section' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Section : Oss.Asn1.BaseType
    {
        /// <summary>Field 'secId'</summary>
        public int SecId { get; set; }
        /// <summary>Field 'lanes'</summary>
        public LaneExList Lanes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Section that = right as Section;
            if (SecId != that.SecId)
                return false;
            if (Lanes != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Lanes, that.Lanes))
                    return false;
            } else if (that.Lanes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= SecId.GetHashCode();
            if (Lanes != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Lanes);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Section";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SecId < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecId > 63)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecId", "int", "secId", "SectionId", false); throw;
                }
                try {
                    if (this.Lanes == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Lanes.Validate();
                    if (this.Lanes.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Lanes.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneExList", "lanes", "LaneExList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Section", null, "Section", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Section obj0 = new Section();
            {
                obj0.SecId = this.SecId;
            }
            {
                obj0.Lanes = this.Lanes == null ? null : (LaneExList)this.Lanes.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("secId ");
                    prt.Write(this.SecId);
                }
                {
                    LaneExList data1 = this.Lanes;

                    prt.WriteLine(",");
                    prt.Write("lanes ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.SecId - 1) > 6 || this.SecId < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecId);
                    enc.Output.Write6BitInt((this.SecId - (1)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecId", "int", "secId", "SectionId", false); throw;
                }
                try {
                    this.Lanes.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneExList", "lanes", "LaneExList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Section", null, "Section", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.SecId = 1 + dec.Input.Read6BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecId", "int", "secId", "SectionId", false); throw;
                }
                try {
                    LaneExList data1 = new LaneExList();

                    data1.DecodePer(dec);
                    this.Lanes = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lanes", "LaneExList", "lanes", "LaneExList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Section", null, "Section", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneExList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class LaneExList : System.Collections.Generic.List<LaneEx>
    {
        /// <summary>
        /// Initializes a new instance of the LaneExList class that is empty and has the default initial capacity.
        /// </summary>
        public LaneExList() : base() {}
        /// <summary>
        /// Initializes a new instance of the LaneExList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new LaneExList.</param>
        /// </summary>
        public LaneExList(System.Collections.Generic.IEnumerable<LaneEx> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the LaneExList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new LaneExList can initially store.</param>
        /// </summary>
        public LaneExList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneExList that = right as LaneExList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "LaneEx", "#" + i1.ToString(), "LaneEx", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneExList", null, "LaneExList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            LaneExList obj0 = new LaneExList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "LaneEx", "#" + i0.ToString(), "LaneEx", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneExList", null, "LaneExList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            LaneEx data1 = new LaneEx();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "LaneEx", "#" + this.Count.ToString(), "LaneEx", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneExList", null, "LaneExList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneEx' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class LaneEx : Oss.Asn1.BaseType
    {
        /// <summary>Field 'laneRefID'</summary>
        public long LaneRefID { get; set; }
        /// <summary>Field 'laneWidth'</summary>
        public int? LaneWidth { get; set; }
        /// <summary>Field 'laneAttributes'</summary>
        public MsgFrame.LaneAttributes LaneAttributes { get; set; }
        /// <summary>Field 'maneuvers'</summary>
        public Oss.Asn1.BitStringWithNamedBits Maneuvers { get; set; }
        /// <summary>Field 'connectsTo-ex'</summary>
        public ConnectsToExList ConnectsToEx { get; set; }
        /// <summary>Field 'speedLimits'</summary>
        public SpeedLimitList SpeedLimits { get; set; }
        /// <summary>Field 'st-points'</summary>
        public STPointList StPoints { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneEx that = right as LaneEx;
            if (LaneRefID != that.LaneRefID)
                return false;
            if (LaneWidth != null) {
                if (LaneWidth != that.LaneWidth)
                    return false;
            } else if (that.LaneWidth != null)
                return false;
            if (LaneAttributes != null) {
                if (!LaneAttributes.Equals(that.LaneAttributes))
                    return false;
            } else if (that.LaneAttributes != null)
                return false;
            if (Maneuvers != null) {
                if (!Maneuvers.Equals(that.Maneuvers))
                    return false;
            } else if (that.Maneuvers != null)
                return false;
            if (ConnectsToEx != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ConnectsToEx, that.ConnectsToEx))
                    return false;
            } else if (that.ConnectsToEx != null)
                return false;
            if (SpeedLimits != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(SpeedLimits, that.SpeedLimits))
                    return false;
            } else if (that.SpeedLimits != null)
                return false;
            if (StPoints != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(StPoints, that.StPoints))
                    return false;
            } else if (that.StPoints != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= LaneRefID.GetHashCode();
            if (LaneWidth != null)
                hash ^= LaneWidth.GetHashCode();
            if (LaneAttributes != null)
                hash ^= LaneAttributes.GetHashCode();
            if (Maneuvers != null)
                hash ^= Maneuvers.GetHashCode();
            if (ConnectsToEx != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ConnectsToEx);
            if (SpeedLimits != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(SpeedLimits);
            if (StPoints != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(StPoints);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LaneEx";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.LaneRefID < -31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.LaneRefID > 31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneRefID", "long", "laneRefID", "LaneRefID", false); throw;
                }
                try {
                    if (this.LaneWidth != null) {
                        if (this.LaneWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.LaneWidth.Value > 32767)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth.Value", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.LaneAttributes != null) {
                        this.LaneAttributes.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                }
                try {
                    if (this.Maneuvers != null) {
                        if (this.Maneuvers.Count != 12)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                }
                try {
                    if (this.ConnectsToEx != null) {
                        this.ConnectsToEx.Validate();
                        if (this.ConnectsToEx.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ConnectsToEx.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsToEx", "ConnectsToExList", "connectsTo-ex", "ConnectsToExList", false); throw;
                }
                try {
                    if (this.SpeedLimits != null) {
                        this.SpeedLimits.Validate();
                        if (this.SpeedLimits.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.SpeedLimits.Count > 9)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    if (this.StPoints != null) {
                        this.StPoints.Validate();
                        if (this.StPoints.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.StPoints.Count > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StPoints", "STPointList", "st-points", "STPointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneEx", null, "LaneEx", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LaneEx obj0 = new LaneEx();
            {
                obj0.LaneRefID = this.LaneRefID;
            }
            {
                obj0.LaneWidth = this.LaneWidth;
            }
            {
                obj0.LaneAttributes = Oss.Asn1.Internal.CopyUtil.CopyType(this.LaneAttributes);
            }
            {
                obj0.Maneuvers = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Maneuvers);
            }
            {
                obj0.ConnectsToEx = this.ConnectsToEx == null ? null : (ConnectsToExList)this.ConnectsToEx.Copy();
            }
            {
                obj0.SpeedLimits = this.SpeedLimits == null ? null : (SpeedLimitList)this.SpeedLimits.Copy();
            }
            {
                obj0.StPoints = this.StPoints == null ? null : (STPointList)this.StPoints.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("laneRefID ");
                    prt.Write(this.LaneRefID);
                }
                {
                    int? data1 = this.LaneWidth;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("laneWidth ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.LaneAttributes data1 = this.LaneAttributes;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("laneAttributes ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Maneuvers;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("maneuvers ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "maneuverStraightAllowed";
                                    case (int)1: return "maneuverLeftAllowed";
                                    case (int)2: return "maneuverRightAllowed";
                                    case (int)3: return "maneuverUTurnAllowed";
                                    case (int)4: return "maneuverLeftTurnOnReclAllowecl";
                                    case (int)5: return "maneuverRightTurnOnReclAllowecl";
                                    case (int)6: return "maneuverLaneChangeAllowed";
                                    case (int)7: return "maneuverNoStoppingAllowecl";
                                    case (int)8: return "yieldAllwaysRequired";
                                    case (int)9: return "goWithHalt";
                                    case (int)10: return "caution";
                                    case (int)11: return "reservedl";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    ConnectsToExList data1 = this.ConnectsToEx;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectsTo-ex ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    SpeedLimitList data1 = this.SpeedLimits;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedLimits ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    STPointList data1 = this.StPoints;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("st-points ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.LaneWidth != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.LaneAttributes != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Maneuvers != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.ConnectsToEx != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.SpeedLimits != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.StPoints != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                enc.Output.WriteBits(optMask0, 0, 6);
                try {
                    if (enc.BitCount(this.LaneRefID - -31) > 6 || this.LaneRefID < -31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneRefID);
                    enc.Output.Write6BitInt((int)(this.LaneRefID - (-31)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneRefID", "long", "laneRefID", "LaneRefID", false); throw;
                }
                try {
                    if (this.LaneWidth != null)
                    {
                        if (enc.BitCount(this.LaneWidth.Value - 0) > 15 || this.LaneWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneWidth.Value);
                        enc.EncodeConstrainedInteger((this.LaneWidth.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth.Value", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.LaneAttributes != null)
                    {
                        enc.EncodeType(this.LaneAttributes);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                }
                try {
                    if (this.Maneuvers != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges5, this.Maneuvers.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.Maneuvers, length1, 12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                }
                try {
                    ConnectsToExList data1 = this.ConnectsToEx;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsToEx", "ConnectsToExList", "connectsTo-ex", "ConnectsToExList", false); throw;
                }
                try {
                    if (this.SpeedLimits != null)
                    {
                        this.SpeedLimits.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                }
                try {
                    STPointList data1 = this.StPoints;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StPoints", "STPointList", "st-points", "STPointList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneEx", null, "LaneEx", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 7);
                try {
                    this.LaneRefID = -31 + dec.Input.Read6BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneRefID", "long", "laneRefID", "LaneRefID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.LaneWidth = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                    }
                }
                else
                {
                    this.LaneWidth = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.LaneAttributes data1 = new MsgFrame.LaneAttributes();

                        dec.DecodeType(data1);
                        this.LaneAttributes = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneAttributes", "MsgFrame.LaneAttributes", "laneAttributes", "LaneAttributes", false); throw;
                    }
                }
                else
                {
                    this.LaneAttributes = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Maneuvers = dec.DecodeBitStringWithNamedBits(12, _InternalMetadata.BerCodecMetaData.Ranges5);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Maneuvers", "Oss.Asn1.BitStringWithNamedBits", "maneuvers", "AllowedManeuvers", false); throw;
                    }
                }
                else
                {
                    this.Maneuvers = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        ConnectsToExList data1 = new ConnectsToExList();

                        data1.DecodePer(dec);
                        this.ConnectsToEx = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectsToEx", "ConnectsToExList", "connectsTo-ex", "ConnectsToExList", false); throw;
                    }
                }
                else
                {
                    this.ConnectsToEx = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        SpeedLimitList data1 = new SpeedLimitList();

                        data1.DecodePer(dec);
                        this.SpeedLimits = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimits", "SpeedLimitList", "speedLimits", "SpeedLimitList", false); throw;
                    }
                }
                else
                {
                    this.SpeedLimits = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        STPointList data1 = new STPointList();

                        data1.DecodePer(dec);
                        this.StPoints = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "StPoints", "STPointList", "st-points", "STPointList", false); throw;
                    }
                }
                else
                {
                    this.StPoints = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneEx", null, "LaneEx", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ConnectsToExList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ConnectsToExList : System.Collections.Generic.List<ConnectionEx>
    {
        /// <summary>
        /// Initializes a new instance of the ConnectsToExList class that is empty and has the default initial capacity.
        /// </summary>
        public ConnectsToExList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ConnectsToExList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ConnectsToExList.</param>
        /// </summary>
        public ConnectsToExList(System.Collections.Generic.IEnumerable<ConnectionEx> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ConnectsToExList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ConnectsToExList can initially store.</param>
        /// </summary>
        public ConnectsToExList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ConnectsToExList that = right as ConnectsToExList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ConnectionEx", "#" + i1.ToString(), "ConnectionEx", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToExList", null, "ConnectsToExList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ConnectsToExList obj0 = new ConnectsToExList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ConnectionEx", "#" + i0.ToString(), "ConnectionEx", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToExList", null, "ConnectsToExList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ConnectionEx data1 = new ConnectionEx();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ConnectionEx", "#" + this.Count.ToString(), "ConnectionEx", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectsToExList", null, "ConnectsToExList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ConnectionEx' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ConnectionEx : Oss.Asn1.BaseType
    {
        /// <summary>Field 'remoteIntersection'</summary>
        public NodeReferenceID RemoteIntersection { get; set; }
        /// <summary>Field 'swl'</summary>
        public SignalWaitingLane Swl { get; set; }
        [System.Serializable]
        public partial class ConnectingLaneType : System.Collections.Generic.List<ConnectingLaneEx>
        {
            /// <summary>
            /// Initializes a new instance of the ConnectingLaneType class that is empty and has the default initial capacity.
            /// </summary>
            public ConnectingLaneType() : base() {}
            /// <summary>
            /// Initializes a new instance of the ConnectingLaneType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new ConnectingLaneType.</param>
            /// </summary>
            public ConnectingLaneType(System.Collections.Generic.IEnumerable<ConnectingLaneEx> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the ConnectingLaneType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new ConnectingLaneType can initially store.</param>
            /// </summary>
            public ConnectingLaneType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                ConnectingLaneType that = right as ConnectingLaneType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'connectingLane'</summary>
        public ConnectingLaneType ConnectingLane { get; set; }
        /// <summary>Field 'phaseId'</summary>
        public int? PhaseId { get; set; }
        /// <summary>Field 'turn-direction'</summary>
        public Maneuver? TurnDirection { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ConnectionEx that = right as ConnectionEx;
            if (RemoteIntersection != null) {
                if (!RemoteIntersection.Equals(that.RemoteIntersection))
                    return false;
            } else if (that.RemoteIntersection != null)
                return false;
            if (Swl != null) {
                if (!Swl.Equals(that.Swl))
                    return false;
            } else if (that.Swl != null)
                return false;
            if (ConnectingLane != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ConnectingLane, that.ConnectingLane))
                    return false;
            } else if (that.ConnectingLane != null)
                return false;
            if (PhaseId != null) {
                if (PhaseId != that.PhaseId)
                    return false;
            } else if (that.PhaseId != null)
                return false;
            if (TurnDirection != null) {
                if (TurnDirection != that.TurnDirection)
                    return false;
            } else if (that.TurnDirection != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (RemoteIntersection != null)
                hash ^= RemoteIntersection.GetHashCode();
            if (Swl != null)
                hash ^= Swl.GetHashCode();
            if (ConnectingLane != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ConnectingLane);
            if (PhaseId != null)
                hash ^= PhaseId.GetHashCode();
            if (TurnDirection != null)
                hash ^= TurnDirection.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ConnectionEx";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RemoteIntersection == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RemoteIntersection.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.Swl != null) {
                        this.Swl.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Swl", "SignalWaitingLane", "swl", "SignalWaitingLane", false); throw;
                }
                try {
                    if (this.ConnectingLane != null) {
                        for (int i2 = 0; i2 < this.ConnectingLane.Count; i2++)
                        {
                            try {
                                this.ConnectingLane[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "ConnectingLaneEx", "#" + i2.ToString(), "ConnectingLaneEx", false); throw;
                            }
                        }
                        if (this.ConnectingLane.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ConnectingLane.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "ConnectingLaneType", "connectingLane", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.PhaseId != null) {
                        if (this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.PhaseId.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
                try {
                    if (this.TurnDirection != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection.Value", "Maneuver", "turn-direction", "Maneuver", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectionEx", null, "ConnectionEx", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ConnectionEx obj0 = new ConnectionEx();
            {
                obj0.RemoteIntersection = Oss.Asn1.Internal.CopyUtil.CopyType(this.RemoteIntersection);
            }
            {
                obj0.Swl = Oss.Asn1.Internal.CopyUtil.CopyType(this.Swl);
            }
            {
                ConnectingLaneType seqof1 = this.ConnectingLane;
                ConnectingLaneType data1 = null;
                if (seqof1 != null) {
                    data1 = new ConnectingLaneType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.ConnectingLane = data1;
            }
            {
                obj0.PhaseId = this.PhaseId;
            }
            {
                obj0.TurnDirection = this.TurnDirection;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("remoteIntersection ");
                    if (this.RemoteIntersection == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RemoteIntersection);
                    }
                }
                {
                    SignalWaitingLane data1 = this.Swl;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("swl ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    ConnectingLaneType data1 = this.ConnectingLane;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectingLane ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                {
                    int? data1 = this.PhaseId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("phaseId ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Maneuver? data1 = this.TurnDirection;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("turn-direction ");
                        switch (data1.Value) {
                        case Maneuver.ManeuverStraight:
                            prt.Write("maneuverStraight");
                            break;
                        case Maneuver.ManeuverLeftTurn:
                            prt.Write("maneuverLeftTurn");
                            break;
                        case Maneuver.ManeuverRightTurn:
                            prt.Write("maneuverRightTurn");
                            break;
                        case Maneuver.ManeuverUTurn:
                            prt.Write("maneuverUTurn");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Swl != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ConnectingLane != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.PhaseId != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.TurnDirection != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    enc.EncodeType(this.RemoteIntersection);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                try {
                    SignalWaitingLane data1 = this.Swl;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Swl", "SignalWaitingLane", "swl", "SignalWaitingLane", false); throw;
                }
                try {
                    ConnectingLaneType data1 = this.ConnectingLane;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 16);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ConnectingLaneEx", "#" + i1.ToString(), "ConnectingLaneEx", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "ConnectingLaneType", "connectingLane", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.PhaseId != null)
                    {
                        if (enc.BitCount(this.PhaseId.Value - 0) > 8 || this.PhaseId.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PhaseId.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.PhaseId.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId.Value", "int", "phaseId", "PhaseID", false); throw;
                }
                try {
                    if (this.TurnDirection != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.TurnDirection.Value, _InternalMetadata.PerCodecMetaData.SortedEnum14, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum14);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection.Value", "Maneuver", "turn-direction", "Maneuver", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectionEx", null, "ConnectionEx", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.RemoteIntersection = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RemoteIntersection", "NodeReferenceID", "remoteIntersection", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        SignalWaitingLane data1 = new SignalWaitingLane();

                        dec.DecodeType(data1);
                        this.Swl = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Swl", "SignalWaitingLane", "swl", "SignalWaitingLane", false); throw;
                    }
                }
                else
                {
                    this.Swl = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        ConnectingLaneType data1 = new ConnectingLaneType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 16, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    ConnectingLaneEx data2 = new ConnectingLaneEx();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "ConnectingLaneEx", "#" + data1.Count.ToString(), "ConnectingLaneEx", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.ConnectingLane = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLane", "ConnectingLaneType", "connectingLane", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.ConnectingLane = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.PhaseId = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseId", "int", "phaseId", "PhaseID", false); throw;
                    }
                }
                else
                {
                    this.PhaseId = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum14, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum14, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum14);
                        this.TurnDirection = (Maneuver)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TurnDirection", "Maneuver", "turn-direction", "Maneuver", false); throw;
                    }
                }
                else
                {
                    this.TurnDirection = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectionEx", null, "ConnectionEx", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SignalWaitingLane' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SignalWaitingLane : Oss.Asn1.BaseType
    {
        /// <summary>Field 'laneWidth'</summary>
        public int LaneWidth { get; set; }
        /// <summary>Field 'points'</summary>
        public PointList Points { get; set; }
        [System.Serializable]
        public partial class AllowedPhaseIdsType : System.Collections.Generic.List<int>
        {
            /// <summary>
            /// Initializes a new instance of the AllowedPhaseIdsType class that is empty and has the default initial capacity.
            /// </summary>
            public AllowedPhaseIdsType() : base() {}
            /// <summary>
            /// Initializes a new instance of the AllowedPhaseIdsType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new AllowedPhaseIdsType.</param>
            /// </summary>
            public AllowedPhaseIdsType(System.Collections.Generic.IEnumerable<int> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the AllowedPhaseIdsType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new AllowedPhaseIdsType can initially store.</param>
            /// </summary>
            public AllowedPhaseIdsType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                AllowedPhaseIdsType that = right as AllowedPhaseIdsType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'allowedPhaseIds'</summary>
        public AllowedPhaseIdsType AllowedPhaseIds { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SignalWaitingLane that = right as SignalWaitingLane;
            if (LaneWidth != that.LaneWidth)
                return false;
            if (Points != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Points, that.Points))
                    return false;
            } else if (that.Points != null)
                return false;
            if (AllowedPhaseIds != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(AllowedPhaseIds, that.AllowedPhaseIds))
                    return false;
            } else if (that.AllowedPhaseIds != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= LaneWidth.GetHashCode();
            if (Points != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Points);
            if (AllowedPhaseIds != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(AllowedPhaseIds);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SignalWaitingLane";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.LaneWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.LaneWidth > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.Points == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Points.Validate();
                    if (this.Points.Count < 2)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Points.Count > 31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    if (this.AllowedPhaseIds != null) {
                        for (int i2 = 0; i2 < this.AllowedPhaseIds.Count; i2++)
                        {
                            try {
                                if (this.AllowedPhaseIds[i2] < 0)
                                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                                if (this.AllowedPhaseIds[i2] > 255)
                                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "int", "#" + i2.ToString(), "PhaseID", false); throw;
                            }
                        }
                        if (this.AllowedPhaseIds.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.AllowedPhaseIds.Count > 7)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AllowedPhaseIds", "AllowedPhaseIdsType", "allowedPhaseIds", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalWaitingLane", null, "SignalWaitingLane", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SignalWaitingLane obj0 = new SignalWaitingLane();
            {
                obj0.LaneWidth = this.LaneWidth;
            }
            {
                obj0.Points = this.Points == null ? null : (PointList)this.Points.Copy();
            }
            {
                AllowedPhaseIdsType seqof1 = this.AllowedPhaseIds;
                AllowedPhaseIdsType data1 = null;
                if (seqof1 != null) {
                    data1 = new AllowedPhaseIdsType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(seqof1[i1]);
                    }
                }
                obj0.AllowedPhaseIds = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("laneWidth ");
                    prt.Write(this.LaneWidth);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("points ");
                    if (this.Points == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.Points.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    AllowedPhaseIdsType data1 = this.AllowedPhaseIds;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("allowedPhaseIds ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            prt.WriteLine();
                            prt.Write(data1[i2]);
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.AllowedPhaseIds != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.LaneWidth - 0) > 15 || this.LaneWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneWidth);
                    enc.EncodeConstrainedInteger((this.LaneWidth - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    this.Points.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    AllowedPhaseIdsType data1 = this.AllowedPhaseIds;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 7)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 7);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                if (enc.BitCount(data1[i1] - 0) > 8 || data1[i1] < 0)
                                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + data1[i1]);
                                if (enc.IsAligned)
                                    enc.Output.WritePadding();
                                enc.Output.Write8BitInt((data1[i1] - (0)));
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "int", "#" + i1.ToString(), "PhaseID", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AllowedPhaseIds", "AllowedPhaseIdsType", "allowedPhaseIds", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalWaitingLane", null, "SignalWaitingLane", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.LaneWidth = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneWidth", "int", "laneWidth", "LaneWidth", false); throw;
                }
                try {
                    PointList data1 = new PointList();

                    data1.DecodePer(dec);
                    this.Points = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        AllowedPhaseIdsType data1 = new AllowedPhaseIdsType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 7, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    if (dec.IsAligned)
                                        dec.Input.SkipPadding();
                                    data1.Add(0 + dec.Input.Read8BitInt());
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "int", "#" + data1.Count.ToString(), "PhaseID", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.AllowedPhaseIds = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AllowedPhaseIds", "AllowedPhaseIdsType", "allowedPhaseIds", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.AllowedPhaseIds = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalWaitingLane", null, "SignalWaitingLane", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ConnectingLaneEx' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ConnectingLaneEx : Oss.Asn1.BaseType
    {
        /// <summary>Field 'target-section'</summary>
        public int TargetSection { get; set; }
        /// <summary>Field 'target-lane'</summary>
        public long TargetLane { get; set; }
        /// <summary>Field 'connectingLaneWidth'</summary>
        public int? ConnectingLaneWidth { get; set; }
        /// <summary>Field 'connectingLanePoints'</summary>
        public PointList ConnectingLanePoints { get; set; }
        /// <summary>Field 'isolatedConnectingLane'</summary>
        public bool? IsolatedConnectingLane { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ConnectingLaneEx that = right as ConnectingLaneEx;
            if (TargetSection != that.TargetSection)
                return false;
            if (TargetLane != that.TargetLane)
                return false;
            if (ConnectingLaneWidth != null) {
                if (ConnectingLaneWidth != that.ConnectingLaneWidth)
                    return false;
            } else if (that.ConnectingLaneWidth != null)
                return false;
            if (ConnectingLanePoints != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ConnectingLanePoints, that.ConnectingLanePoints))
                    return false;
            } else if (that.ConnectingLanePoints != null)
                return false;
            if (IsolatedConnectingLane != null) {
                if (IsolatedConnectingLane != that.IsolatedConnectingLane)
                    return false;
            } else if (that.IsolatedConnectingLane != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= TargetSection.GetHashCode();
            hash ^= TargetLane.GetHashCode();
            if (ConnectingLaneWidth != null)
                hash ^= ConnectingLaneWidth.GetHashCode();
            if (ConnectingLanePoints != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ConnectingLanePoints);
            if (IsolatedConnectingLane != null)
                hash ^= IsolatedConnectingLane.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ConnectingLaneEx";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TargetSection < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TargetSection > 63)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetSection", "int", "target-section", "SectionId", false); throw;
                }
                try {
                    if (this.TargetLane < -31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TargetLane > 31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "long", "target-lane", "LaneRefID", false); throw;
                }
                try {
                    if (this.ConnectingLaneWidth != null) {
                        if (this.ConnectingLaneWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.ConnectingLaneWidth.Value > 32767)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLaneWidth.Value", "int", "connectingLaneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.ConnectingLanePoints != null) {
                        this.ConnectingLanePoints.Validate();
                        if (this.ConnectingLanePoints.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ConnectingLanePoints.Count > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLanePoints", "PointList", "connectingLanePoints", "PointList", false); throw;
                }
                try {
                    if (this.IsolatedConnectingLane != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IsolatedConnectingLane.Value", "bool", "isolatedConnectingLane", "BOOLEAN", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLaneEx", null, "ConnectingLaneEx", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ConnectingLaneEx obj0 = new ConnectingLaneEx();
            {
                obj0.TargetSection = this.TargetSection;
            }
            {
                obj0.TargetLane = this.TargetLane;
            }
            {
                obj0.ConnectingLaneWidth = this.ConnectingLaneWidth;
            }
            {
                obj0.ConnectingLanePoints = this.ConnectingLanePoints == null ? null : (PointList)this.ConnectingLanePoints.Copy();
            }
            {
                obj0.IsolatedConnectingLane = this.IsolatedConnectingLane;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("target-section ");
                    prt.Write(this.TargetSection);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("target-lane ");
                    prt.Write(this.TargetLane);
                }
                {
                    int? data1 = this.ConnectingLaneWidth;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectingLaneWidth ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PointList data1 = this.ConnectingLanePoints;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("connectingLanePoints ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    bool? data1 = this.IsolatedConnectingLane;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("isolatedConnectingLane ");
                        prt.Write(data1.Value ? "TRUE" : "FALSE");
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.ConnectingLaneWidth != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ConnectingLanePoints != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.IsolatedConnectingLane != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (enc.BitCount(this.TargetSection - 1) > 6 || this.TargetSection < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TargetSection);
                    enc.Output.Write6BitInt((this.TargetSection - (1)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetSection", "int", "target-section", "SectionId", false); throw;
                }
                try {
                    if (enc.BitCount(this.TargetLane - -31) > 6 || this.TargetLane < -31)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TargetLane);
                    enc.Output.Write6BitInt((int)(this.TargetLane - (-31)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "long", "target-lane", "LaneRefID", false); throw;
                }
                try {
                    if (this.ConnectingLaneWidth != null)
                    {
                        if (enc.BitCount(this.ConnectingLaneWidth.Value - 0) > 15 || this.ConnectingLaneWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.ConnectingLaneWidth.Value);
                        enc.EncodeConstrainedInteger((this.ConnectingLaneWidth.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLaneWidth.Value", "int", "connectingLaneWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.ConnectingLanePoints != null)
                    {
                        this.ConnectingLanePoints.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLanePoints", "PointList", "connectingLanePoints", "PointList", false); throw;
                }
                try {
                    if (this.IsolatedConnectingLane != null)
                    {
                        enc.EncodeBool(this.IsolatedConnectingLane.Value);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IsolatedConnectingLane.Value", "bool", "isolatedConnectingLane", "BOOLEAN", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLaneEx", null, "ConnectingLaneEx", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.TargetSection = 1 + dec.Input.Read6BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetSection", "int", "target-section", "SectionId", false); throw;
                }
                try {
                    this.TargetLane = -31 + dec.Input.Read6BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "long", "target-lane", "LaneRefID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.ConnectingLaneWidth = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLaneWidth", "int", "connectingLaneWidth", "LaneWidth", false); throw;
                    }
                }
                else
                {
                    this.ConnectingLaneWidth = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        PointList data1 = new PointList();

                        data1.DecodePer(dec);
                        this.ConnectingLanePoints = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ConnectingLanePoints", "PointList", "connectingLanePoints", "PointList", false); throw;
                    }
                }
                else
                {
                    this.ConnectingLanePoints = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.IsolatedConnectingLane = dec.DecodeBool();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "IsolatedConnectingLane", "bool", "isolatedConnectingLane", "BOOLEAN", false); throw;
                    }
                }
                else
                {
                    this.IsolatedConnectingLane = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ConnectingLaneEx", null, "ConnectingLaneEx", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'STPointList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class STPointList : System.Collections.Generic.List<STPoint>
    {
        /// <summary>
        /// Initializes a new instance of the STPointList class that is empty and has the default initial capacity.
        /// </summary>
        public STPointList() : base() {}
        /// <summary>
        /// Initializes a new instance of the STPointList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new STPointList.</param>
        /// </summary>
        public STPointList(System.Collections.Generic.IEnumerable<STPoint> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the STPointList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new STPointList can initially store.</param>
        /// </summary>
        public STPointList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            STPointList that = right as STPointList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "STPoint", "#" + i1.ToString(), "ST-Point", false); throw;
                    }
                }
                if (this.Count < 2)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPointList", null, "STPointList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            STPointList obj0 = new STPointList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 2 || this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 2, 63);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "STPoint", "#" + i0.ToString(), "ST-Point", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPointList", null, "STPointList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(2, 63, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            STPoint data1 = new STPoint();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "STPoint", "#" + this.Count.ToString(), "ST-Point", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPointList", null, "STPointList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ST-Point' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class STPoint : Oss.Asn1.BaseType
    {
        /// <summary>Field 's-axis'</summary>
        public long SAxis { get; set; }
        /// <summary>Field 't-axis'</summary>
        public long TAxis { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            STPoint that = right as STPoint;
            if (SAxis != that.SAxis)
                return false;
            if (TAxis != that.TAxis)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= SAxis.GetHashCode();
            hash ^= TAxis.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ST-Point";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SAxis < -1024)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SAxis > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SAxis", "long", "s-axis", "INTEGER", false); throw;
                }
                try {
                    if (this.TAxis < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TAxis > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TAxis", "long", "t-axis", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPoint", null, "ST-Point", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            STPoint obj0 = new STPoint();
            {
                obj0.SAxis = this.SAxis;
            }
            {
                obj0.TAxis = this.TAxis;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("s-axis ");
                    prt.Write(this.SAxis);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("t-axis ");
                    prt.Write(this.TAxis);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.SAxis - -1024) > 17 || this.SAxis < -1024)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SAxis);
                    enc.EncodeConstrainedLongInteger((long)(this.SAxis - (-1024)), 17);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SAxis", "long", "s-axis", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.TAxis - -32768) > 16 || this.TAxis < -32768)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TAxis);
                    enc.EncodeConstrainedLongInteger((long)(this.TAxis - (-32768)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TAxis", "long", "t-axis", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPoint", null, "ST-Point", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.SAxis = dec.DecodeConstrainedLongInteger(17, -1024);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SAxis", "long", "s-axis", "INTEGER", false); throw;
                }
                try {
                    this.TAxis = dec.DecodeConstrainedLongInteger(16, -32768);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TAxis", "long", "t-axis", "INTEGER", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "STPoint", null, "ST-Point", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ProhibitedZone' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ProhibitedZone : Oss.Asn1.BaseType
    {
        /// <summary>Field 'centralCircleProhibitedZone'</summary>
        public Polygon CentralCircleProhibitedZone { get; set; }
        [System.Serializable]
        public partial class NonMotorVehicleProhibitedZonesType : System.Collections.Generic.List<MsgFrame.Polygon>
        {
            /// <summary>
            /// Initializes a new instance of the NonMotorVehicleProhibitedZonesType class that is empty and has the default initial capacity.
            /// </summary>
            public NonMotorVehicleProhibitedZonesType() : base() {}
            /// <summary>
            /// Initializes a new instance of the NonMotorVehicleProhibitedZonesType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new NonMotorVehicleProhibitedZonesType.</param>
            /// </summary>
            public NonMotorVehicleProhibitedZonesType(System.Collections.Generic.IEnumerable<MsgFrame.Polygon> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the NonMotorVehicleProhibitedZonesType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new NonMotorVehicleProhibitedZonesType can initially store.</param>
            /// </summary>
            public NonMotorVehicleProhibitedZonesType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                NonMotorVehicleProhibitedZonesType that = right as NonMotorVehicleProhibitedZonesType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'non-motorVehicleProhibitedZones'</summary>
        public NonMotorVehicleProhibitedZonesType NonMotorVehicleProhibitedZones { get; set; }
        [System.Serializable]
        public partial class GridLineMarkingProhibitedZonesType : System.Collections.Generic.List<MsgFrame.Polygon>
        {
            /// <summary>
            /// Initializes a new instance of the GridLineMarkingProhibitedZonesType class that is empty and has the default initial capacity.
            /// </summary>
            public GridLineMarkingProhibitedZonesType() : base() {}
            /// <summary>
            /// Initializes a new instance of the GridLineMarkingProhibitedZonesType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new GridLineMarkingProhibitedZonesType.</param>
            /// </summary>
            public GridLineMarkingProhibitedZonesType(System.Collections.Generic.IEnumerable<MsgFrame.Polygon> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the GridLineMarkingProhibitedZonesType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new GridLineMarkingProhibitedZonesType can initially store.</param>
            /// </summary>
            public GridLineMarkingProhibitedZonesType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                GridLineMarkingProhibitedZonesType that = right as GridLineMarkingProhibitedZonesType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'gridLineMarkingProhibitedZones'</summary>
        public GridLineMarkingProhibitedZonesType GridLineMarkingProhibitedZones { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ProhibitedZone that = right as ProhibitedZone;
            if (CentralCircleProhibitedZone != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(CentralCircleProhibitedZone, that.CentralCircleProhibitedZone))
                    return false;
            } else if (that.CentralCircleProhibitedZone != null)
                return false;
            if (NonMotorVehicleProhibitedZones != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(NonMotorVehicleProhibitedZones, that.NonMotorVehicleProhibitedZones))
                    return false;
            } else if (that.NonMotorVehicleProhibitedZones != null)
                return false;
            if (GridLineMarkingProhibitedZones != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(GridLineMarkingProhibitedZones, that.GridLineMarkingProhibitedZones))
                    return false;
            } else if (that.GridLineMarkingProhibitedZones != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (CentralCircleProhibitedZone != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(CentralCircleProhibitedZone);
            if (NonMotorVehicleProhibitedZones != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(NonMotorVehicleProhibitedZones);
            if (GridLineMarkingProhibitedZones != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(GridLineMarkingProhibitedZones);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ProhibitedZone";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.CentralCircleProhibitedZone != null) {
                        this.CentralCircleProhibitedZone.Validate();
                        if (this.CentralCircleProhibitedZone.Count < 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.CentralCircleProhibitedZone.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CentralCircleProhibitedZone", "Polygon", "centralCircleProhibitedZone", "Polygon", false); throw;
                }
                try {
                    if (this.NonMotorVehicleProhibitedZones != null) {
                        for (int i2 = 0; i2 < this.NonMotorVehicleProhibitedZones.Count; i2++)
                        {
                            try {
                                this.NonMotorVehicleProhibitedZones[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "Polygon", "#" + i2.ToString(), "Polygon", false); throw;
                            }
                        }
                        if (this.NonMotorVehicleProhibitedZones.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.NonMotorVehicleProhibitedZones.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorVehicleProhibitedZones", "NonMotorVehicleProhibitedZonesType", "non-motorVehicleProhibitedZones", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.GridLineMarkingProhibitedZones != null) {
                        for (int i2 = 0; i2 < this.GridLineMarkingProhibitedZones.Count; i2++)
                        {
                            try {
                                this.GridLineMarkingProhibitedZones[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "Polygon", "#" + i2.ToString(), "Polygon", false); throw;
                            }
                        }
                        if (this.GridLineMarkingProhibitedZones.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.GridLineMarkingProhibitedZones.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "GridLineMarkingProhibitedZones", "GridLineMarkingProhibitedZonesType", "gridLineMarkingProhibitedZones", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ProhibitedZone", null, "ProhibitedZone", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ProhibitedZone obj0 = new ProhibitedZone();
            {
                obj0.CentralCircleProhibitedZone = this.CentralCircleProhibitedZone == null ? null : (Polygon)this.CentralCircleProhibitedZone.Copy();
            }
            {
                NonMotorVehicleProhibitedZonesType seqof1 = this.NonMotorVehicleProhibitedZones;
                NonMotorVehicleProhibitedZonesType data1 = null;
                if (seqof1 != null) {
                    data1 = new NonMotorVehicleProhibitedZonesType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(seqof1[i1] == null ? null : (Polygon)seqof1[i1].Copy());
                    }
                }
                obj0.NonMotorVehicleProhibitedZones = data1;
            }
            {
                GridLineMarkingProhibitedZonesType seqof1 = this.GridLineMarkingProhibitedZones;
                GridLineMarkingProhibitedZonesType data1 = null;
                if (seqof1 != null) {
                    data1 = new GridLineMarkingProhibitedZonesType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(seqof1[i1] == null ? null : (Polygon)seqof1[i1].Copy());
                    }
                }
                obj0.GridLineMarkingProhibitedZones = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Polygon data1 = this.CentralCircleProhibitedZone;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("centralCircleProhibitedZone ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    NonMotorVehicleProhibitedZonesType data1 = this.NonMotorVehicleProhibitedZones;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("non-motorVehicleProhibitedZones ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                data1[i2].PrintAsn1ValueNotation(prt);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                {
                    GridLineMarkingProhibitedZonesType data1 = this.GridLineMarkingProhibitedZones;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("gridLineMarkingProhibitedZones ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                data1[i2].PrintAsn1ValueNotation(prt);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.CentralCircleProhibitedZone != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.NonMotorVehicleProhibitedZones != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.GridLineMarkingProhibitedZones != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (this.CentralCircleProhibitedZone != null)
                    {
                        this.CentralCircleProhibitedZone.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CentralCircleProhibitedZone", "Polygon", "centralCircleProhibitedZone", "Polygon", false); throw;
                }
                try {
                    NonMotorVehicleProhibitedZonesType data1 = this.NonMotorVehicleProhibitedZones;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 16);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                data1[i1].EncodePer(enc);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Polygon", "#" + i1.ToString(), "Polygon", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorVehicleProhibitedZones", "NonMotorVehicleProhibitedZonesType", "non-motorVehicleProhibitedZones", "SEQUENCE OF", false); throw;
                }
                try {
                    GridLineMarkingProhibitedZonesType data1 = this.GridLineMarkingProhibitedZones;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 2 || data1.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 2, 16);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                data1[i1].EncodePer(enc);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Polygon", "#" + i1.ToString(), "Polygon", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "GridLineMarkingProhibitedZones", "GridLineMarkingProhibitedZonesType", "gridLineMarkingProhibitedZones", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ProhibitedZone", null, "ProhibitedZone", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Polygon data1 = new Polygon();

                        data1.DecodePer(dec);
                        this.CentralCircleProhibitedZone = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "CentralCircleProhibitedZone", "Polygon", "centralCircleProhibitedZone", "Polygon", false); throw;
                    }
                }
                else
                {
                    this.CentralCircleProhibitedZone = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        NonMotorVehicleProhibitedZonesType data1 = new NonMotorVehicleProhibitedZonesType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 16, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    Polygon data2 = new Polygon();

                                    data2.DecodePer(dec);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "Polygon", "#" + data1.Count.ToString(), "Polygon", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.NonMotorVehicleProhibitedZones = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorVehicleProhibitedZones", "NonMotorVehicleProhibitedZonesType", "non-motorVehicleProhibitedZones", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.NonMotorVehicleProhibitedZones = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        GridLineMarkingProhibitedZonesType data1 = new GridLineMarkingProhibitedZonesType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(2, 16, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    Polygon data2 = new Polygon();

                                    data2.DecodePer(dec);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "Polygon", "#" + data1.Count.ToString(), "Polygon", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.GridLineMarkingProhibitedZones = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GridLineMarkingProhibitedZones", "GridLineMarkingProhibitedZonesType", "gridLineMarkingProhibitedZones", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.GridLineMarkingProhibitedZones = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ProhibitedZone", null, "ProhibitedZone", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Polygon' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class Polygon : System.Collections.Generic.List<PositionOffsetLLV>
    {
        /// <summary>
        /// Initializes a new instance of the Polygon class that is empty and has the default initial capacity.
        /// </summary>
        public Polygon() : base() {}
        /// <summary>
        /// Initializes a new instance of the Polygon class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new Polygon.</param>
        /// </summary>
        public Polygon(System.Collections.Generic.IEnumerable<PositionOffsetLLV> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the Polygon class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new Polygon can initially store.</param>
        /// </summary>
        public Polygon(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Polygon that = right as Polygon;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PositionOffsetLLV", "#" + i1.ToString(), "PositionOffsetLLV", false); throw;
                    }
                }
                if (this.Count < 4)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Polygon", null, "Polygon", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            Polygon obj0 = new Polygon();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 4 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 4, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PositionOffsetLLV", "#" + i0.ToString(), "PositionOffsetLLV", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Polygon", null, "Polygon", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(4, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PositionOffsetLLV data1 = new PositionOffsetLLV();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PositionOffsetLLV", "#" + this.Count.ToString(), "PositionOffsetLLV", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Polygon", null, "Polygon", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RoadsideSafetyMessage' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RoadsideSafetyMessage : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        /// <summary>Field 'participants'</summary>
        public ParticipantList Participants { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RoadsideSafetyMessage that = right as RoadsideSafetyMessage;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (Participants != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Participants, that.Participants))
                    return false;
            } else if (that.Participants != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (Participants != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Participants);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RoadsideSafetyMessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.Participants == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Participants.Validate();
                    if (this.Participants.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Participants.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "ParticipantList", "participants", "ParticipantList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideSafetyMessage", null, "RoadsideSafetyMessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RoadsideSafetyMessage obj0 = new RoadsideSafetyMessage();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                obj0.Participants = this.Participants == null ? null : (ParticipantList)this.Participants.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    ParticipantList data1 = this.Participants;

                    prt.WriteLine(",");
                    prt.Write("participants ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    this.Participants.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "ParticipantList", "participants", "ParticipantList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideSafetyMessage", null, "RoadsideSafetyMessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    ParticipantList data1 = new ParticipantList();

                    data1.DecodePer(dec);
                    this.Participants = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "ParticipantList", "participants", "ParticipantList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideSafetyMessage", null, "RoadsideSafetyMessage", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParticipantList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ParticipantList : System.Collections.Generic.List<ParticipantData>
    {
        /// <summary>
        /// Initializes a new instance of the ParticipantList class that is empty and has the default initial capacity.
        /// </summary>
        public ParticipantList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ParticipantList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ParticipantList.</param>
        /// </summary>
        public ParticipantList(System.Collections.Generic.IEnumerable<ParticipantData> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ParticipantList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ParticipantList can initially store.</param>
        /// </summary>
        public ParticipantList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParticipantList that = right as ParticipantList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ParticipantData", "#" + i1.ToString(), "ParticipantData", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantList", null, "ParticipantList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ParticipantList obj0 = new ParticipantList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ParticipantData", "#" + i0.ToString(), "ParticipantData", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantList", null, "ParticipantList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ParticipantData data1 = new ParticipantData();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ParticipantData", "#" + this.Count.ToString(), "ParticipantData", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantList", null, "ParticipantList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParticipantData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ParticipantData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'ptcType'</summary>
        public ParticipantType PtcType { get; set; }
        /// <summary>Field 'ptcld'</summary>
        public int Ptcld { get; set; }
        /// <summary>Field 'source'</summary>
        public SourceType Source { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'plateNo'</summary>
        public byte[] PlateNo { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'pos'</summary>
        public PositionOffsetLLV Pos { get; set; }
        /// <summary>Field 'accuracy'</summary>
        public PositionConfidenceSet Accuracy { get; set; }
        /// <summary>Field 'transmission'</summary>
        public TransmissionState? Transmission { get; set; }
        /// <summary>Field 'speed'</summary>
        public int Speed { get; set; }
        /// <summary>Field 'heading'</summary>
        public int Heading { get; set; }
        /// <summary>Field 'angle'</summary>
        public long? Angle { get; set; }
        /// <summary>Field 'motionCfd'</summary>
        public MotionConfidenceSet MotionCfd { get; set; }
        /// <summary>Field 'accelSet'</summary>
        public AccelerationSet4Way AccelSet { get; set; }
        /// <summary>Field 'size'</summary>
        public VehicleSize Size { get; set; }
        /// <summary>Field 'vehicleClass'</summary>
        public VehicleClassification VehicleClass { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParticipantData that = right as ParticipantData;
            if (PtcType != that.PtcType)
                return false;
            if (Ptcld != that.Ptcld)
                return false;
            if (Source != that.Source)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (PlateNo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(PlateNo, that.PlateNo))
                    return false;
            } else if (that.PlateNo != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (Accuracy != null) {
                if (!Accuracy.Equals(that.Accuracy))
                    return false;
            } else if (that.Accuracy != null)
                return false;
            if (Transmission != null) {
                if (Transmission != that.Transmission)
                    return false;
            } else if (that.Transmission != null)
                return false;
            if (Speed != that.Speed)
                return false;
            if (Heading != that.Heading)
                return false;
            if (Angle != null) {
                if (Angle != that.Angle)
                    return false;
            } else if (that.Angle != null)
                return false;
            if (MotionCfd != null) {
                if (!MotionCfd.Equals(that.MotionCfd))
                    return false;
            } else if (that.MotionCfd != null)
                return false;
            if (AccelSet != null) {
                if (!AccelSet.Equals(that.AccelSet))
                    return false;
            } else if (that.AccelSet != null)
                return false;
            if (Size != null) {
                if (!Size.Equals(that.Size))
                    return false;
            } else if (that.Size != null)
                return false;
            if (VehicleClass != null) {
                if (!VehicleClass.Equals(that.VehicleClass))
                    return false;
            } else if (that.VehicleClass != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= PtcType.GetHashCode();
            hash ^= Ptcld.GetHashCode();
            hash ^= Source.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            if (PlateNo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(PlateNo);
            hash ^= SecMark.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (Accuracy != null)
                hash ^= Accuracy.GetHashCode();
            if (Transmission != null)
                hash ^= Transmission.GetHashCode();
            hash ^= Speed.GetHashCode();
            hash ^= Heading.GetHashCode();
            if (Angle != null)
                hash ^= Angle.GetHashCode();
            if (MotionCfd != null)
                hash ^= MotionCfd.GetHashCode();
            if (AccelSet != null)
                hash ^= AccelSet.GetHashCode();
            if (Size != null)
                hash ^= Size.GetHashCode();
            if (VehicleClass != null)
                hash ^= VehicleClass.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ParticipantData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PtcType", "ParticipantType", "ptcType", "ParticipantType", false); throw;
                }
                try {
                    if (this.Ptcld < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Ptcld > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptcld", "int", "ptcld", "INTEGER", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                try {
                    if (this.Id != null) {
                        if (this.Id.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.PlateNo != null) {
                        if (this.PlateNo.Length < 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PlateNo.Length > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.Accuracy == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Accuracy.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Transmission != null) {
                        switch (this.Transmission.Value)
                        {
                            case TransmissionState.Neutral:
                            case TransmissionState.Park:
                            case TransmissionState.ForwardGears:
                            case TransmissionState.ReverseGears:
                            case TransmissionState.Reserved1:
                            case TransmissionState.Reserved2:
                            case TransmissionState.Reserved3:
                            case TransmissionState.Unavailable:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission.Value", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Speed > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Heading > 28800)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Angle != null) {
                        if (this.Angle.Value < -126)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Angle.Value > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle.Value", "long", "angle", "SteeringWheelAngle", false); throw;
                }
                try {
                    if (this.MotionCfd != null) {
                        this.MotionCfd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
                try {
                    if (this.AccelSet != null) {
                        this.AccelSet.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.Size == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Size.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                try {
                    if (this.VehicleClass != null) {
                        this.VehicleClass.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantData", null, "ParticipantData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ParticipantData obj0 = new ParticipantData();
            {
                obj0.PtcType = this.PtcType;
            }
            {
                obj0.Ptcld = this.Ptcld;
            }
            {
                obj0.Source = this.Source;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.PlateNo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.PlateNo);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.Accuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.Accuracy);
            }
            {
                obj0.Transmission = this.Transmission;
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.Angle = this.Angle;
            }
            {
                obj0.MotionCfd = Oss.Asn1.Internal.CopyUtil.CopyType(this.MotionCfd);
            }
            {
                obj0.AccelSet = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccelSet);
            }
            {
                obj0.Size = Oss.Asn1.Internal.CopyUtil.CopyType(this.Size);
            }
            {
                obj0.VehicleClass = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleClass);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("ptcType ");
                    switch (this.PtcType) {
                    case ParticipantType.Unknown:
                        prt.Write("unknown");
                        break;
                    case ParticipantType.Motor:
                        prt.Write("motor");
                        break;
                    case ParticipantType.NonMotor:
                        prt.Write("non-motor");
                        break;
                    case ParticipantType.Pedestrian:
                        prt.Write("pedestrian");
                        break;
                    case ParticipantType.Rsu:
                        prt.Write("rsu");
                        break;
                    default:
                        prt.Write((int)this.PtcType);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("ptcld ");
                    prt.Write(this.Ptcld);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("source ");
                    switch (this.Source) {
                    case SourceType.Unknown:
                        prt.Write("unknown");
                        break;
                    case SourceType.Selfinfo:
                        prt.Write("selfinfo");
                        break;
                    case SourceType.V2x:
                        prt.Write("v2x");
                        break;
                    case SourceType.Video:
                        prt.Write("video");
                        break;
                    case SourceType.MicrowaveRadar:
                        prt.Write("microwaveRadar");
                        break;
                    case SourceType.Loop:
                        prt.Write("loop");
                        break;
                    default:
                        prt.Write((int)this.Source);
                        break;
                    }
                }
                {
                    byte[] data1 = this.Id;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("id ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    byte[] data1 = this.PlateNo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("plateNo ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("accuracy ");
                    if (this.Accuracy == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Accuracy);
                    }
                }
                {
                    TransmissionState? data1 = this.Transmission;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("transmission ");
                        switch (data1.Value) {
                        case TransmissionState.Neutral:
                            prt.Write("neutral");
                            break;
                        case TransmissionState.Park:
                            prt.Write("park");
                            break;
                        case TransmissionState.ForwardGears:
                            prt.Write("forwardGears");
                            break;
                        case TransmissionState.ReverseGears:
                            prt.Write("reverseGears");
                            break;
                        case TransmissionState.Reserved1:
                            prt.Write("reserved1");
                            break;
                        case TransmissionState.Reserved2:
                            prt.Write("reserved2");
                            break;
                        case TransmissionState.Reserved3:
                            prt.Write("reserved3");
                            break;
                        case TransmissionState.Unavailable:
                            prt.Write("unavailable");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("speed ");
                    prt.Write(this.Speed);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("heading ");
                    prt.Write(this.Heading);
                }
                {
                    long? data1 = this.Angle;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("angle ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MotionConfidenceSet data1 = this.MotionCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("motionCfd ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    AccelerationSet4Way data1 = this.AccelSet;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("accelSet ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("size ");
                    if (this.Size == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Size);
                    }
                }
                {
                    VehicleClassification data1 = this.VehicleClass;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("vehicleClass ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Id != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PlateNo != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Transmission != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Angle != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.MotionCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.AccelSet != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.VehicleClass != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                enc.Output.WriteBits(optMask0, 0, 7);
                try {
                    enc.EncodeEnumWithExtension((int)this.PtcType, _InternalMetadata.PerCodecMetaData.SortedEnum15, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PtcType", "ParticipantType", "ptcType", "ParticipantType", false); throw;
                }
                try {
                    if (enc.BitCount(this.Ptcld - 0) > 16 || this.Ptcld < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Ptcld);
                    enc.EncodeConstrainedInteger((this.Ptcld - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptcld", "int", "ptcld", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Source, _InternalMetadata.PerCodecMetaData.SortedEnum16, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                try {
                    if (this.Id != null)
                    {
                        enc.EncodeOctetString(this.Id, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.PlateNo != null)
                    {
                        enc.EncodeOctetString(this.PlateNo, 4, 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    enc.EncodeType(this.Accuracy);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Transmission != null)
                    {
                        enc.EncodeEnum((int)this.Transmission.Value, _InternalMetadata.PerCodecMetaData.SortedEnum2);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission.Value", "TransmissionState", "transmission", "TransmissionState", false); throw;
                }
                try {
                    if (enc.BitCount(this.Speed - 0) > 13 || this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed);
                    enc.EncodeConstrainedInteger((this.Speed - (0)), 13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (enc.BitCount(this.Heading - 0) > 15 || this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading);
                    enc.EncodeConstrainedInteger((this.Heading - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Angle != null)
                    {
                        if (enc.BitCount(this.Angle.Value - -126) > 8 || this.Angle.Value < -126)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Angle.Value);
                        enc.Output.Write8BitInt((int)(this.Angle.Value - (-126)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle.Value", "long", "angle", "SteeringWheelAngle", false); throw;
                }
                try {
                    if (this.MotionCfd != null)
                    {
                        enc.EncodeType(this.MotionCfd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                }
                try {
                    if (this.AccelSet != null)
                    {
                        enc.EncodeType(this.AccelSet);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    enc.EncodeType(this.Size);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                try {
                    if (this.VehicleClass != null)
                    {
                        enc.EncodeType(this.VehicleClass);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantData", null, "ParticipantData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 8);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum15, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum15, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum15);
                    this.PtcType = (ParticipantType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PtcType", "ParticipantType", "ptcType", "ParticipantType", false); throw;
                }
                try {
                    this.Ptcld = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptcld", "int", "ptcld", "INTEGER", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum16, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum16, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum16);
                    this.Source = (SourceType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Id = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.Id = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.PlateNo = dec.DecodeOctetString(4, 16);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PlateNo", "byte[]", "plateNo", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.PlateNo = null;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    PositionConfidenceSet data1 = new PositionConfidenceSet();

                    dec.DecodeType(data1);
                    this.Accuracy = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Accuracy", "PositionConfidenceSet", "accuracy", "PositionConfidenceSet", false); throw;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Transmission = (TransmissionState)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum2);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Transmission", "TransmissionState", "transmission", "TransmissionState", false); throw;
                    }
                }
                else
                {
                    this.Transmission = null;
                }
                try {
                    this.Speed = dec.DecodeConstrainedInteger(13, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    this.Heading = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.Angle = -126 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Angle", "long", "angle", "SteeringWheelAngle", false); throw;
                    }
                }
                else
                {
                    this.Angle = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        MotionConfidenceSet data1 = new MotionConfidenceSet();

                        dec.DecodeType(data1);
                        this.MotionCfd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MotionCfd", "MotionConfidenceSet", "motionCfd", "MotionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.MotionCfd = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        AccelerationSet4Way data1 = new AccelerationSet4Way();

                        dec.DecodeType(data1);
                        this.AccelSet = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                    }
                }
                else
                {
                    this.AccelSet = null;
                }
                try {
                    VehicleSize data1 = new VehicleSize();

                    dec.DecodeType(data1);
                    this.Size = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "VehicleSize", "size", "VehicleSize", false); throw;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        VehicleClassification data1 = new VehicleClassification();

                        dec.DecodeType(data1);
                        this.VehicleClass = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                    }
                }
                else
                {
                    this.VehicleClass = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParticipantData", null, "ParticipantData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParticipantType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ParticipantType
    {
        Unknown = 0,
        Motor = 1,
        NonMotor = 2,
        Pedestrian = 3,
        Rsu = 4
    }
    /// <summary>
    /// Represents schema type 'SourceType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SourceType
    {
        Unknown = 0,
        Selfinfo = 1,
        V2x = 2,
        Video = 3,
        MicrowaveRadar = 4,
        Loop = 5
    }
    /// <summary>
    /// Represents schema type 'SPAT' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SPAT : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'tirneStamp'</summary>
        public int? TirneStamp { get; set; }
        /// <summary>Field 'name'</summary>
        public string Name { get; set; }
        /// <summary>Field 'intersections'</summary>
        public IntersectionStateList Intersections { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SPAT that = right as SPAT;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (TirneStamp != null) {
                if (TirneStamp != that.TirneStamp)
                    return false;
            } else if (that.TirneStamp != null)
                return false;
            if (Name != null) {
                if (!Name.Equals(that.Name))
                    return false;
            } else if (that.Name != null)
                return false;
            if (Intersections != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Intersections, that.Intersections))
                    return false;
            } else if (that.Intersections != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (TirneStamp != null)
                hash ^= TirneStamp.GetHashCode();
            if (Name != null)
                hash ^= Name.GetHashCode();
            if (Intersections != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Intersections);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SPAT";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TirneStamp != null) {
                        if (this.TirneStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TirneStamp.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TirneStamp.Value", "int", "tirneStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.Name != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Name, _InternalMetadata.CommonMetaData.S0);
                        if (this.Name.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Name.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.Intersections == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Intersections.Validate();
                    if (this.Intersections.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Intersections.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersections", "IntersectionStateList", "intersections", "IntersectionStateList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SPAT", null, "SPAT", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SPAT obj0 = new SPAT();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.TirneStamp = this.TirneStamp;
            }
            {
                obj0.Name = this.Name;
            }
            {
                obj0.Intersections = this.Intersections == null ? null : (IntersectionStateList)this.Intersections.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    int? data1 = this.TirneStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tirneStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    string data1 = this.Name;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("name ");
                        prt.PrintString(data1);
                    }
                }
                {
                    IntersectionStateList data1 = this.Intersections;

                    prt.WriteLine(",");
                    prt.Write("intersections ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TirneStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Name != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TirneStamp != null)
                    {
                        if (enc.BitCount(this.TirneStamp.Value - 0) > 20 || this.TirneStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TirneStamp.Value);
                        enc.EncodeConstrainedInteger((this.TirneStamp.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TirneStamp.Value", "int", "tirneStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.Name != null)
                    {
                        enc.EncodeKMCString(this.Name, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    this.Intersections.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersections", "IntersectionStateList", "intersections", "IntersectionStateList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SPAT", null, "SPAT", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TirneStamp = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TirneStamp", "int", "tirneStamp", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.TirneStamp = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Name = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Name = null;
                }
                try {
                    IntersectionStateList data1 = new IntersectionStateList();

                    data1.DecodePer(dec);
                    this.Intersections = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersections", "IntersectionStateList", "intersections", "IntersectionStateList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SPAT", null, "SPAT", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'IntersectionStateList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class IntersectionStateList : System.Collections.Generic.List<IntersectionState>
    {
        /// <summary>
        /// Initializes a new instance of the IntersectionStateList class that is empty and has the default initial capacity.
        /// </summary>
        public IntersectionStateList() : base() {}
        /// <summary>
        /// Initializes a new instance of the IntersectionStateList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new IntersectionStateList.</param>
        /// </summary>
        public IntersectionStateList(System.Collections.Generic.IEnumerable<IntersectionState> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the IntersectionStateList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new IntersectionStateList can initially store.</param>
        /// </summary>
        public IntersectionStateList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            IntersectionStateList that = right as IntersectionStateList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "IntersectionState", "#" + i1.ToString(), "IntersectionState", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionStateList", null, "IntersectionStateList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            IntersectionStateList obj0 = new IntersectionStateList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "IntersectionState", "#" + i0.ToString(), "IntersectionState", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionStateList", null, "IntersectionStateList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            IntersectionState data1 = new IntersectionState();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "IntersectionState", "#" + this.Count.ToString(), "IntersectionState", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionStateList", null, "IntersectionStateList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'IntersectionState' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class IntersectionState : Oss.Asn1.BaseType
    {
        /// <summary>Field 'intersectionld'</summary>
        public NodeReferenceID Intersectionld { get; set; }
        /// <summary>Field 'status'</summary>
        public Oss.Asn1.BitStringWithNamedBits Status { get; set; }
        /// <summary>Field 'moy'</summary>
        public int? Moy { get; set; }
        /// <summary>Field 'timeStamp'</summary>
        public int? TimeStamp { get; set; }
        /// <summary>Field 'phases'</summary>
        public PhaseList Phases { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            IntersectionState that = right as IntersectionState;
            if (Intersectionld != null) {
                if (!Intersectionld.Equals(that.Intersectionld))
                    return false;
            } else if (that.Intersectionld != null)
                return false;
            if (Status != null) {
                if (!Status.Equals(that.Status))
                    return false;
            } else if (that.Status != null)
                return false;
            if (Moy != null) {
                if (Moy != that.Moy)
                    return false;
            } else if (that.Moy != null)
                return false;
            if (TimeStamp != null) {
                if (TimeStamp != that.TimeStamp)
                    return false;
            } else if (that.TimeStamp != null)
                return false;
            if (Phases != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Phases, that.Phases))
                    return false;
            } else if (that.Phases != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Intersectionld != null)
                hash ^= Intersectionld.GetHashCode();
            if (Status != null)
                hash ^= Status.GetHashCode();
            if (Moy != null)
                hash ^= Moy.GetHashCode();
            if (TimeStamp != null)
                hash ^= TimeStamp.GetHashCode();
            if (Phases != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Phases);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "IntersectionState";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Intersectionld == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Intersectionld.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersectionld", "NodeReferenceID", "intersectionld", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.Status == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Status.Count != 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                try {
                    if (this.Moy != null) {
                        if (this.Moy.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Moy.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy.Value", "int", "moy", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.TimeStamp != null) {
                        if (this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeStamp.Value > 60000)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "DSecond", false); throw;
                }
                try {
                    if (this.Phases == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Phases.Validate();
                    if (this.Phases.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Phases.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionState", null, "IntersectionState", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            IntersectionState obj0 = new IntersectionState();
            {
                obj0.Intersectionld = Oss.Asn1.Internal.CopyUtil.CopyType(this.Intersectionld);
            }
            {
                obj0.Status = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Status);
            }
            {
                obj0.Moy = this.Moy;
            }
            {
                obj0.TimeStamp = this.TimeStamp;
            }
            {
                obj0.Phases = this.Phases == null ? null : (PhaseList)this.Phases.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("intersectionld ");
                    if (this.Intersectionld == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Intersectionld);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("status ");
                    if (this.Status == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintBitString(this.Status, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "manualControllsEnabled";
                                    case (int)1: return "stopTimelsActivated";
                                    case (int)2: return "failureFlash";
                                    case (int)3: return "preernptisActive";
                                    case (int)4: return "signalPrioritylsActive";
                                    case (int)5: return "fixedTimeOperation";
                                    case (int)6: return "trafficOependentOperation";
                                    case (int)7: return "standbyOperation";
                                    case (int)8: return "failureMode";
                                    case (int)9: return "off";
                                    case (int)10: return "recentMAPmessageUpdate";
                                    case (int)11: return "recentChangelnMAPassignedLanesIDsUsed";
                                    case (int)12: return "noValidMAPisAvailableAtThisTime";
                                    case (int)13: return "noValidSPATisAvailableAtThisTime";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    int? data1 = this.Moy;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("moy ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.TimeStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("phases ");
                    if (this.Phases == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.Phases.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Moy != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TimeStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.Intersectionld);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersectionld", "NodeReferenceID", "intersectionld", "NodeReferenceID", false); throw;
                }
                try {
                    int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Status.LastOneBitPos() + 1);
                    enc.EncodeBitStringWithNamedBits(this.Status, length1, 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                try {
                    if (this.Moy != null)
                    {
                        if (enc.BitCount(this.Moy.Value - 0) > 20 || this.Moy.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Moy.Value);
                        enc.EncodeConstrainedInteger((this.Moy.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy.Value", "int", "moy", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.TimeStamp != null)
                    {
                        if (enc.BitCount(this.TimeStamp.Value - 0) > 16 || this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeStamp.Value);
                        enc.EncodeConstrainedInteger((this.TimeStamp.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "DSecond", false); throw;
                }
                try {
                    this.Phases.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionState", null, "IntersectionState", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.Intersectionld = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Intersectionld", "NodeReferenceID", "intersectionld", "NodeReferenceID", false); throw;
                }
                try {
                    this.Status = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Moy = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy", "int", "moy", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.Moy = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TimeStamp = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp", "int", "timeStamp", "DSecond", false); throw;
                    }
                }
                else
                {
                    this.TimeStamp = null;
                }
                try {
                    PhaseList data1 = new PhaseList();

                    data1.DecodePer(dec);
                    this.Phases = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IntersectionState", null, "IntersectionState", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'IntersectionStatusObject' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum IntersectionStatusObject
    {
        ManualControllsEnabled = 0,
        StopTimelsActivated = 1,
        FailureFlash = 2,
        PreernptisActive = 3,
        SignalPrioritylsActive = 4,
        FixedTimeOperation = 5,
        TrafficOependentOperation = 6,
        StandbyOperation = 7,
        FailureMode = 8,
        Off = 9,
        RecentMAPmessageUpdate = 10,
        RecentChangelnMAPassignedLanesIDsUsed = 11,
        NoValidMAPisAvailableAtThisTime = 12,
        NoValidSPATisAvailableAtThisTime = 13
    }
    /// <summary>
    /// Represents schema type 'PhaseList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PhaseList : System.Collections.Generic.List<Phase>
    {
        /// <summary>
        /// Initializes a new instance of the PhaseList class that is empty and has the default initial capacity.
        /// </summary>
        public PhaseList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PhaseList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PhaseList.</param>
        /// </summary>
        public PhaseList(System.Collections.Generic.IEnumerable<Phase> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PhaseList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PhaseList can initially store.</param>
        /// </summary>
        public PhaseList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PhaseList that = right as PhaseList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Phase", "#" + i1.ToString(), "Phase", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseList", null, "PhaseList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PhaseList obj0 = new PhaseList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Phase", "#" + i0.ToString(), "Phase", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseList", null, "PhaseList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Phase data1 = new Phase();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Phase", "#" + this.Count.ToString(), "Phase", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseList", null, "PhaseList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Phase' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Phase : Oss.Asn1.BaseType
    {
        /// <summary>Field 'id'</summary>
        public int Id { get; set; }
        /// <summary>Field 'phaseStates'</summary>
        public PhaseStateList PhaseStates { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Phase that = right as Phase;
            if (Id != that.Id)
                return false;
            if (PhaseStates != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PhaseStates, that.PhaseStates))
                    return false;
            } else if (that.PhaseStates != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Id.GetHashCode();
            if (PhaseStates != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PhaseStates);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Phase";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Id > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PhaseID", false); throw;
                }
                try {
                    if (this.PhaseStates == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PhaseStates.Validate();
                    if (this.PhaseStates.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.PhaseStates.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseStates", "PhaseStateList", "phaseStates", "PhaseStateList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Phase", null, "Phase", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Phase obj0 = new Phase();
            {
                obj0.Id = this.Id;
            }
            {
                obj0.PhaseStates = this.PhaseStates == null ? null : (PhaseStateList)this.PhaseStates.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("id ");
                    prt.Write(this.Id);
                }
                {
                    PhaseStateList data1 = this.PhaseStates;

                    prt.WriteLine(",");
                    prt.Write("phaseStates ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.Id - 0) > 8 || this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Id);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.Id - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PhaseID", false); throw;
                }
                try {
                    this.PhaseStates.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseStates", "PhaseStateList", "phaseStates", "PhaseStateList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Phase", null, "Phase", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.Id = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PhaseID", false); throw;
                }
                try {
                    PhaseStateList data1 = new PhaseStateList();

                    data1.DecodePer(dec);
                    this.PhaseStates = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PhaseStates", "PhaseStateList", "phaseStates", "PhaseStateList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Phase", null, "Phase", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PhaseStateList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PhaseStateList : System.Collections.Generic.List<PhaseState>
    {
        /// <summary>
        /// Initializes a new instance of the PhaseStateList class that is empty and has the default initial capacity.
        /// </summary>
        public PhaseStateList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PhaseStateList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PhaseStateList.</param>
        /// </summary>
        public PhaseStateList(System.Collections.Generic.IEnumerable<PhaseState> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PhaseStateList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PhaseStateList can initially store.</param>
        /// </summary>
        public PhaseStateList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PhaseStateList that = right as PhaseStateList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PhaseState", "#" + i1.ToString(), "PhaseState", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseStateList", null, "PhaseStateList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PhaseStateList obj0 = new PhaseStateList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PhaseState", "#" + i0.ToString(), "PhaseState", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseStateList", null, "PhaseStateList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PhaseState data1 = new PhaseState();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PhaseState", "#" + this.Count.ToString(), "PhaseState", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseStateList", null, "PhaseStateList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PhaseState' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PhaseState : Oss.Asn1.BaseType
    {
        /// <summary>Field 'light'</summary>
        public LightState Light { get; set; }
        /// <summary>Field 'timing'</summary>
        public TimeChangeDetails Timing { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PhaseState that = right as PhaseState;
            if (Light != that.Light)
                return false;
            if (Timing != null) {
                if (!Timing.Equals(that.Timing))
                    return false;
            } else if (that.Timing != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Light.GetHashCode();
            if (Timing != null)
                hash ^= Timing.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PhaseState";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.Light)
                    {
                        case LightState.Unavailable:
                        case LightState.Dark:
                        case LightState.StopThenProceed:
                        case LightState.StopAndRemain:
                        case LightState.PreMovement:
                        case LightState.PermissiveMovementAllowed:
                        case LightState.ProtectedMovementAllowed:
                        case LightState.IntersectionClearance:
                        case LightState.CautionConflictingTraffic:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Light", "LightState", "light", "LightState", false); throw;
                }
                try {
                    if (this.Timing != null) {
                        this.Timing.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Timing", "TimeChangeDetails", "timing", "TimeChangeDetails", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseState", null, "PhaseState", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PhaseState obj0 = new PhaseState();
            {
                obj0.Light = this.Light;
            }
            {
                obj0.Timing = Oss.Asn1.Internal.CopyUtil.CopyType(this.Timing);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("light ");
                    switch (this.Light) {
                    case LightState.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case LightState.Dark:
                        prt.Write("dark");
                        break;
                    case LightState.StopThenProceed:
                        prt.Write("stop-Then-Proceed");
                        break;
                    case LightState.StopAndRemain:
                        prt.Write("stop-And-Remain");
                        break;
                    case LightState.PreMovement:
                        prt.Write("pre-Movement");
                        break;
                    case LightState.PermissiveMovementAllowed:
                        prt.Write("permissive-Movement-Allowed");
                        break;
                    case LightState.ProtectedMovementAllowed:
                        prt.Write("protected-Movement-Allowed");
                        break;
                    case LightState.IntersectionClearance:
                        prt.Write("intersection-clearance");
                        break;
                    case LightState.CautionConflictingTraffic:
                        prt.Write("caution-Conflicting-Traffic");
                        break;
                    default:
                        prt.Write((int)this.Light);
                        break;
                    }
                }
                {
                    TimeChangeDetails data1 = this.Timing;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timing ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Timing != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeEnum((int)this.Light, _InternalMetadata.PerCodecMetaData.SortedEnum17);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Light", "LightState", "light", "LightState", false); throw;
                }
                try {
                    TimeChangeDetails data1 = this.Timing;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Timing", "TimeChangeDetails", "timing", "TimeChangeDetails", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseState", null, "PhaseState", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.Light = (LightState)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum17);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Light", "LightState", "light", "LightState", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        TimeChangeDetails data1 = new TimeChangeDetails();

                        dec.DecodeType(data1);
                        this.Timing = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Timing", "TimeChangeDetails", "timing", "TimeChangeDetails", false); throw;
                    }
                }
                else
                {
                    this.Timing = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PhaseState", null, "PhaseState", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LightState' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum LightState
    {
        Unavailable = 0,
        Dark = 1,
        StopThenProceed = 2,
        StopAndRemain = 3,
        PreMovement = 4,
        PermissiveMovementAllowed = 5,
        ProtectedMovementAllowed = 6,
        IntersectionClearance = 7,
        CautionConflictingTraffic = 8
    }
    /// <summary>
    /// Represents schema type 'TimeChangeDetails' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TimeChangeDetails : Oss.Asn1.BaseType
    {
        /// <summary>Field 'startTime'</summary>
        public int StartTime { get; set; }
        /// <summary>Field 'minEndTime'</summary>
        public int? MinEndTime { get; set; }
        /// <summary>Field 'maxEndTime'</summary>
        public int? MaxEndTime { get; set; }
        /// <summary>Field 'likelyEndTime'</summary>
        public int LikelyEndTime { get; set; }
        /// <summary>Field 'timeConfidence'</summary>
        public int? TimeConfidence { get; set; }
        /// <summary>Field 'nextStartTime'</summary>
        public int? NextStartTime { get; set; }
        /// <summary>Field 'nextDuration'</summary>
        public int? NextDuration { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TimeChangeDetails that = right as TimeChangeDetails;
            if (StartTime != that.StartTime)
                return false;
            if (MinEndTime != null) {
                if (MinEndTime != that.MinEndTime)
                    return false;
            } else if (that.MinEndTime != null)
                return false;
            if (MaxEndTime != null) {
                if (MaxEndTime != that.MaxEndTime)
                    return false;
            } else if (that.MaxEndTime != null)
                return false;
            if (LikelyEndTime != that.LikelyEndTime)
                return false;
            if (TimeConfidence != null) {
                if (TimeConfidence != that.TimeConfidence)
                    return false;
            } else if (that.TimeConfidence != null)
                return false;
            if (NextStartTime != null) {
                if (NextStartTime != that.NextStartTime)
                    return false;
            } else if (that.NextStartTime != null)
                return false;
            if (NextDuration != null) {
                if (NextDuration != that.NextDuration)
                    return false;
            } else if (that.NextDuration != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= StartTime.GetHashCode();
            if (MinEndTime != null)
                hash ^= MinEndTime.GetHashCode();
            if (MaxEndTime != null)
                hash ^= MaxEndTime.GetHashCode();
            hash ^= LikelyEndTime.GetHashCode();
            if (TimeConfidence != null)
                hash ^= TimeConfidence.GetHashCode();
            if (NextStartTime != null)
                hash ^= NextStartTime.GetHashCode();
            if (NextDuration != null)
                hash ^= NextDuration.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TimeChangeDetails";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.StartTime < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.StartTime > 36001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime", "int", "startTime", "TimeMark", false); throw;
                }
                try {
                    if (this.MinEndTime != null) {
                        if (this.MinEndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.MinEndTime.Value > 36001)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MinEndTime.Value", "int", "minEndTime", "TimeMark", false); throw;
                }
                try {
                    if (this.MaxEndTime != null) {
                        if (this.MaxEndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.MaxEndTime.Value > 36001)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MaxEndTime.Value", "int", "maxEndTime", "TimeMark", false); throw;
                }
                try {
                    if (this.LikelyEndTime < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.LikelyEndTime > 36001)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LikelyEndTime", "int", "likelyEndTime", "TimeMark", false); throw;
                }
                try {
                    if (this.TimeConfidence != null) {
                        if (this.TimeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "int", "timeConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.NextStartTime != null) {
                        if (this.NextStartTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.NextStartTime.Value > 36001)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NextStartTime.Value", "int", "nextStartTime", "TimeMark", false); throw;
                }
                try {
                    if (this.NextDuration != null) {
                        if (this.NextDuration.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.NextDuration.Value > 36001)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NextDuration.Value", "int", "nextDuration", "TimeMark", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TimeChangeDetails", null, "TimeChangeDetails", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TimeChangeDetails obj0 = new TimeChangeDetails();
            {
                obj0.StartTime = this.StartTime;
            }
            {
                obj0.MinEndTime = this.MinEndTime;
            }
            {
                obj0.MaxEndTime = this.MaxEndTime;
            }
            {
                obj0.LikelyEndTime = this.LikelyEndTime;
            }
            {
                obj0.TimeConfidence = this.TimeConfidence;
            }
            {
                obj0.NextStartTime = this.NextStartTime;
            }
            {
                obj0.NextDuration = this.NextDuration;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("startTime ");
                    prt.Write(this.StartTime);
                }
                {
                    int? data1 = this.MinEndTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("minEndTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.MaxEndTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("maxEndTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("likelyEndTime ");
                    prt.Write(this.LikelyEndTime);
                }
                {
                    int? data1 = this.TimeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.NextStartTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("nextStartTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.NextDuration;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("nextDuration ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.MinEndTime != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.MaxEndTime != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TimeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.NextStartTime != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.NextDuration != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (enc.BitCount(this.StartTime - 0) > 16 || this.StartTime < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.StartTime);
                    enc.EncodeConstrainedInteger((this.StartTime - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime", "int", "startTime", "TimeMark", false); throw;
                }
                try {
                    if (this.MinEndTime != null)
                    {
                        if (enc.BitCount(this.MinEndTime.Value - 0) > 16 || this.MinEndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MinEndTime.Value);
                        enc.EncodeConstrainedInteger((this.MinEndTime.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MinEndTime.Value", "int", "minEndTime", "TimeMark", false); throw;
                }
                try {
                    if (this.MaxEndTime != null)
                    {
                        if (enc.BitCount(this.MaxEndTime.Value - 0) > 16 || this.MaxEndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MaxEndTime.Value);
                        enc.EncodeConstrainedInteger((this.MaxEndTime.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MaxEndTime.Value", "int", "maxEndTime", "TimeMark", false); throw;
                }
                try {
                    if (enc.BitCount(this.LikelyEndTime - 0) > 16 || this.LikelyEndTime < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LikelyEndTime);
                    enc.EncodeConstrainedInteger((this.LikelyEndTime - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LikelyEndTime", "int", "likelyEndTime", "TimeMark", false); throw;
                }
                try {
                    if (this.TimeConfidence != null)
                    {
                        if (enc.BitCount(this.TimeConfidence.Value - 0) > 8 || this.TimeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeConfidence.Value);
                        enc.Output.Write8BitInt((this.TimeConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "int", "timeConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.NextStartTime != null)
                    {
                        if (enc.BitCount(this.NextStartTime.Value - 0) > 16 || this.NextStartTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.NextStartTime.Value);
                        enc.EncodeConstrainedInteger((this.NextStartTime.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NextStartTime.Value", "int", "nextStartTime", "TimeMark", false); throw;
                }
                try {
                    if (this.NextDuration != null)
                    {
                        if (enc.BitCount(this.NextDuration.Value - 0) > 16 || this.NextDuration.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.NextDuration.Value);
                        enc.EncodeConstrainedInteger((this.NextDuration.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NextDuration.Value", "int", "nextDuration", "TimeMark", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TimeChangeDetails", null, "TimeChangeDetails", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    this.StartTime = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime", "int", "startTime", "TimeMark", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.MinEndTime = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MinEndTime", "int", "minEndTime", "TimeMark", false); throw;
                    }
                }
                else
                {
                    this.MinEndTime = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.MaxEndTime = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "MaxEndTime", "int", "maxEndTime", "TimeMark", false); throw;
                    }
                }
                else
                {
                    this.MaxEndTime = null;
                }
                try {
                    this.LikelyEndTime = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LikelyEndTime", "int", "likelyEndTime", "TimeMark", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.TimeConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence", "int", "timeConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.TimeConfidence = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.NextStartTime = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "NextStartTime", "int", "nextStartTime", "TimeMark", false); throw;
                    }
                }
                else
                {
                    this.NextStartTime = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.NextDuration = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "NextDuration", "int", "nextDuration", "TimeMark", false); throw;
                    }
                }
                else
                {
                    this.NextDuration = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TimeChangeDetails", null, "TimeChangeDetails", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RoadSideInformation' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RoadSideInformation : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'timeStamp'</summary>
        public int? TimeStamp { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'rsild'</summary>
        public int Rsild { get; set; }
        /// <summary>Field 'alertType'</summary>
        public int AlertType { get; set; }
        /// <summary>Field 'description'</summary>
        public string Description { get; set; }
        /// <summary>Field 'priority'</summary>
        public byte[] Priority { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        /// <summary>Field 'alertPath'</summary>
        public PathPointList AlertPath { get; set; }
        /// <summary>Field 'alertRadius'</summary>
        public int AlertRadius { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RoadSideInformation that = right as RoadSideInformation;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (TimeStamp != null) {
                if (TimeStamp != that.TimeStamp)
                    return false;
            } else if (that.TimeStamp != null)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (Rsild != that.Rsild)
                return false;
            if (AlertType != that.AlertType)
                return false;
            if (Description != null) {
                if (!Description.Equals(that.Description))
                    return false;
            } else if (that.Description != null)
                return false;
            if (Priority != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Priority, that.Priority))
                    return false;
            } else if (that.Priority != null)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (AlertPath != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(AlertPath, that.AlertPath))
                    return false;
            } else if (that.AlertPath != null)
                return false;
            if (AlertRadius != that.AlertRadius)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (TimeStamp != null)
                hash ^= TimeStamp.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= Rsild.GetHashCode();
            hash ^= AlertType.GetHashCode();
            if (Description != null)
                hash ^= Description.GetHashCode();
            if (Priority != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Priority);
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (AlertPath != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(AlertPath);
            hash ^= AlertRadius.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RoadSideInformation";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null) {
                        if (this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeStamp.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Rsild < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Rsild > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rsild", "int", "rsild", "INTEGER", false); throw;
                }
                try {
                    if (this.AlertType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.AlertType > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertType", "int", "alertType", "AlertType", false); throw;
                }
                try {
                    if (this.Description != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Description, _InternalMetadata.CommonMetaData.S0);
                        if (this.Description.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Description.Length > 256)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "string", "description", "IA5String", false); throw;
                }
                try {
                    if (this.Priority != null) {
                        if (this.Priority.Length != 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.AlertPath == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.AlertPath.Validate();
                    if (this.AlertPath.Count < 2)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.AlertPath.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertPath", "PathPointList", "alertPath", "PathPointList", false); throw;
                }
                try {
                    if (this.AlertRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.AlertRadius > 1024)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertRadius", "int", "alertRadius", "Radius", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadSideInformation", null, "RoadSideInformation", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RoadSideInformation obj0 = new RoadSideInformation();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.TimeStamp = this.TimeStamp;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.Rsild = this.Rsild;
            }
            {
                obj0.AlertType = this.AlertType;
            }
            {
                obj0.Description = this.Description;
            }
            {
                obj0.Priority = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Priority);
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                obj0.AlertPath = this.AlertPath == null ? null : (PathPointList)this.AlertPath.Copy();
            }
            {
                obj0.AlertRadius = this.AlertRadius;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    int? data1 = this.TimeStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rsild ");
                    prt.Write(this.Rsild);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("alertType ");
                    prt.Write(this.AlertType);
                }
                {
                    string data1 = this.Description;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("description ");
                        prt.PrintString(data1);
                    }
                }
                {
                    byte[] data1 = this.Priority;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("priority ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("alertPath ");
                    if (this.AlertPath == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.AlertPath.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("alertRadius ");
                    prt.Write(this.AlertRadius);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TimeStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Description != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Priority != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null)
                    {
                        if (enc.BitCount(this.TimeStamp.Value - 0) > 20 || this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeStamp.Value);
                        enc.EncodeConstrainedInteger((this.TimeStamp.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.Rsild - 0) > 8 || this.Rsild < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Rsild);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.Rsild - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rsild", "int", "rsild", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.AlertType - 0) > 16 || this.AlertType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.AlertType);
                    enc.EncodeConstrainedInteger((this.AlertType - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertType", "int", "alertType", "AlertType", false); throw;
                }
                try {
                    if (this.Description != null)
                    {
                        enc.EncodeKMCString(this.Description, 1, 256, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "string", "description", "IA5String", false); throw;
                }
                try {
                    if (this.Priority != null)
                    {
                        enc.EncodeOctetString(this.Priority, 1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    this.AlertPath.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertPath", "PathPointList", "alertPath", "PathPointList", false); throw;
                }
                try {
                    if (enc.BitCount(this.AlertRadius - 0) > 11 || this.AlertRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.AlertRadius);
                    enc.EncodeConstrainedInteger((this.AlertRadius - (0)), 11);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertRadius", "int", "alertRadius", "Radius", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadSideInformation", null, "RoadSideInformation", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TimeStamp = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.TimeStamp = null;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.Rsild = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rsild", "int", "rsild", "INTEGER", false); throw;
                }
                try {
                    this.AlertType = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertType", "int", "alertType", "AlertType", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Description = dec.DecodeKMCString(1, 256, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "string", "description", "IA5String", false); throw;
                    }
                }
                else
                {
                    this.Description = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Priority = dec.DecodeOctetString(1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                    }
                }
                else
                {
                    this.Priority = null;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    PathPointList data1 = new PathPointList();

                    data1.DecodePer(dec);
                    this.AlertPath = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertPath", "PathPointList", "alertPath", "PathPointList", false); throw;
                }
                try {
                    this.AlertRadius = dec.DecodeConstrainedInteger(11, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AlertRadius", "int", "alertRadius", "Radius", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadSideInformation", null, "RoadSideInformation", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PathPointList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PathPointList : System.Collections.Generic.List<PositionOffsetLLV>
    {
        /// <summary>
        /// Initializes a new instance of the PathPointList class that is empty and has the default initial capacity.
        /// </summary>
        public PathPointList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PathPointList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PathPointList.</param>
        /// </summary>
        public PathPointList(System.Collections.Generic.IEnumerable<PositionOffsetLLV> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PathPointList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PathPointList can initially store.</param>
        /// </summary>
        public PathPointList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathPointList that = right as PathPointList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PositionOffsetLLV", "#" + i1.ToString(), "PositionOffsetLLV", false); throw;
                    }
                }
                if (this.Count < 2)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPointList", null, "PathPointList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PathPointList obj0 = new PathPointList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 2 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 2, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PositionOffsetLLV", "#" + i0.ToString(), "PositionOffsetLLV", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPointList", null, "PathPointList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(2, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PositionOffsetLLV data1 = new PositionOffsetLLV();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PositionOffsetLLV", "#" + this.Count.ToString(), "PositionOffsetLLV", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPointList", null, "PathPointList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TestMsg' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TestMsg : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'userData'</summary>
        public byte[] UserData { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TestMsg that = right as TestMsg;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (UserData != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(UserData, that.UserData))
                    return false;
            } else if (that.UserData != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (UserData != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(UserData);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TestMsg";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.UserData == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.UserData.Length < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.UserData.Length > 2048)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UserData", "byte[]", "userData", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TestMsg", null, "TestMsg", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TestMsg obj0 = new TestMsg();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.UserData = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.UserData);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("userData ");
                    if (this.UserData == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.UserData);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.UserData, 1, 2048);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UserData", "byte[]", "userData", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TestMsg", null, "TestMsg", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.UserData = dec.DecodeOctetString(1, 2048);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UserData", "byte[]", "userData", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TestMsg", null, "TestMsg", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RTCMcorrections' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RTCMcorrections : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        [System.Serializable]
        public partial class CorrectionsType : System.Collections.Generic.List<RTCMmsg>
        {
            /// <summary>
            /// Initializes a new instance of the CorrectionsType class that is empty and has the default initial capacity.
            /// </summary>
            public CorrectionsType() : base() {}
            /// <summary>
            /// Initializes a new instance of the CorrectionsType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new CorrectionsType.</param>
            /// </summary>
            public CorrectionsType(System.Collections.Generic.IEnumerable<RTCMmsg> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the CorrectionsType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new CorrectionsType can initially store.</param>
            /// </summary>
            public CorrectionsType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                CorrectionsType that = right as CorrectionsType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'corrections'</summary>
        public CorrectionsType Corrections { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTCMcorrections that = right as RTCMcorrections;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Corrections != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Corrections, that.Corrections))
                    return false;
            } else if (that.Corrections != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Corrections != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Corrections);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RTCMcorrections";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Corrections == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    for (int i2 = 0; i2 < this.Corrections.Count; i2++)
                    {
                        try {
                            this.Corrections[i2].Validate();
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "RTCMmsg", "#" + i2.ToString(), "RTCMmsg", false); throw;
                        }
                    }
                    if (this.Corrections.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Corrections.Count > 5)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Corrections", "CorrectionsType", "corrections", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMcorrections", null, "RTCMcorrections", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RTCMcorrections obj0 = new RTCMcorrections();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                CorrectionsType seqof1 = this.Corrections;
                CorrectionsType data1 = null;
                if (seqof1 != null) {
                    data1 = new CorrectionsType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.Corrections = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    CorrectionsType data1 = this.Corrections;

                    prt.WriteLine(",");
                    prt.Write("corrections ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    CorrectionsType seqof1 = this.Corrections;
                    int i1 = 0;
                    if (seqof1.Count < 1 || seqof1.Count > 5)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + seqof1.Count);
                    enc.EncodeConstrainedLength(this.Corrections.Count, 1, 5);
                    for (i1 = 0; i1 < seqof1.Count; i1++)
                    {
                        try {
                            enc.EncodeType(seqof1[i1]);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "RTCMmsg", "#" + i1.ToString(), "RTCMmsg", false); throw;
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Corrections", "CorrectionsType", "corrections", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMcorrections", null, "RTCMcorrections", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    CorrectionsType data1 = new CorrectionsType();
                    int i1 = 0;
                    int fragcount1 = 0;
                    int fraglast1 = 65536;
                    while (true)
                    {
                        fragcount1 = dec.DecodeConstrainedLength(1, 5, ref fraglast1);
                        for (i1 = 0; i1 < fragcount1; i1++)
                        {
                            try {
                                RTCMmsg data2 = new RTCMmsg();

                                dec.DecodeType(data2);
                                data1.Add(data2);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "RTCMmsg", "#" + data1.Count.ToString(), "RTCMmsg", false); throw;
                            }
                        }
                        if (fraglast1 < 0)
                            break;
                        fraglast1 = fragcount1;
                    }
                    this.Corrections = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Corrections", "CorrectionsType", "corrections", "SEQUENCE OF", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMcorrections", null, "RTCMcorrections", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RTCMmsg' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RTCMmsg : Oss.Asn1.BaseType
    {
        /// <summary>Field 'rev'</summary>
        public RTCMRevision? Rev { get; set; }
        /// <summary>Field 'rtcmID'</summary>
        public int? RtcmID { get; set; }
        /// <summary>Field 'payload'</summary>
        public byte[] Payload { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTCMmsg that = right as RTCMmsg;
            if (Rev != null) {
                if (Rev != that.Rev)
                    return false;
            } else if (that.Rev != null)
                return false;
            if (RtcmID != null) {
                if (RtcmID != that.RtcmID)
                    return false;
            } else if (that.RtcmID != null)
                return false;
            if (Payload != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Payload, that.Payload))
                    return false;
            } else if (that.Payload != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Rev != null)
                hash ^= Rev.GetHashCode();
            if (RtcmID != null)
                hash ^= RtcmID.GetHashCode();
            if (Payload != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Payload);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RTCMmsg";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Rev != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rev.Value", "RTCMRevision", "rev", "RTCM-Revision", false); throw;
                }
                try {
                    if (this.RtcmID != null) {
                        if (this.RtcmID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.RtcmID.Value > 32767)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmID.Value", "int", "rtcmID", "RTCM-ID", false); throw;
                }
                try {
                    if (this.Payload == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Payload.Length < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Payload.Length > 2047)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payload", "byte[]", "payload", "RTCM-Payload", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMmsg", null, "RTCMmsg", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RTCMmsg obj0 = new RTCMmsg();
            {
                obj0.Rev = this.Rev;
            }
            {
                obj0.RtcmID = this.RtcmID;
            }
            {
                obj0.Payload = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Payload);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    RTCMRevision? data1 = this.Rev;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("rev ");
                        switch (data1.Value) {
                        case RTCMRevision.Unknown:
                            prt.Write("unknown");
                            break;
                        case RTCMRevision.Reserved:
                            prt.Write("reserved");
                            break;
                        case RTCMRevision.RtcmCMR:
                            prt.Write("rtcmCMR");
                            break;
                        case RTCMRevision.RtcmCMRPlus:
                            prt.Write("rtcmCMR-Plus");
                            break;
                        case RTCMRevision.RtcmSAPOS:
                            prt.Write("rtcmSAPOS");
                            break;
                        case RTCMRevision.RtcmSAPOSAdv:
                            prt.Write("rtcmSAPOS-Adv");
                            break;
                        case RTCMRevision.RtcmRTCA:
                            prt.Write("rtcmRTCA");
                            break;
                        case RTCMRevision.RtcmRAW:
                            prt.Write("rtcmRAW");
                            break;
                        case RTCMRevision.RtcmRINEX:
                            prt.Write("rtcmRINEX");
                            break;
                        case RTCMRevision.RtcmSP3:
                            prt.Write("rtcmSP3");
                            break;
                        case RTCMRevision.RtcmBINEX:
                            prt.Write("rtcmBINEX");
                            break;
                        case RTCMRevision.RtcmRev2X:
                            prt.Write("rtcmRev2-x");
                            break;
                        case RTCMRevision.RtcmRev20:
                            prt.Write("rtcmRev2-0");
                            break;
                        case RTCMRevision.RtcmRev21:
                            prt.Write("rtcmRev2-1");
                            break;
                        case RTCMRevision.RtcmRev23:
                            prt.Write("rtcmRev2-3");
                            break;
                        case RTCMRevision.RtcmRev30:
                            prt.Write("rtcmRev3-0");
                            break;
                        case RTCMRevision.RtcmRev31:
                            prt.Write("rtcmRev3-1");
                            break;
                        case RTCMRevision.RtcmRev32:
                            prt.Write("rtcmRev3-2");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    int? data1 = this.RtcmID;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("rtcmID ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("payload ");
                    if (this.Payload == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Payload);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Rev != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.RtcmID != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.Rev != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.Rev.Value, _InternalMetadata.PerCodecMetaData.SortedEnum18, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum18);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rev.Value", "RTCMRevision", "rev", "RTCM-Revision", false); throw;
                }
                try {
                    if (this.RtcmID != null)
                    {
                        if (enc.BitCount(this.RtcmID.Value - 0) > 15 || this.RtcmID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RtcmID.Value);
                        enc.EncodeConstrainedInteger((this.RtcmID.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmID.Value", "int", "rtcmID", "RTCM-ID", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Payload, 1, 2047);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payload", "byte[]", "payload", "RTCM-Payload", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMmsg", null, "RTCMmsg", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum18, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum18, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum18);
                        this.Rev = (RTCMRevision)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Rev", "RTCMRevision", "rev", "RTCM-Revision", false); throw;
                    }
                }
                else
                {
                    this.Rev = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.RtcmID = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RtcmID", "int", "rtcmID", "RTCM-ID", false); throw;
                    }
                }
                else
                {
                    this.RtcmID = null;
                }
                try {
                    this.Payload = dec.DecodeOctetString(1, 2047);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payload", "byte[]", "payload", "RTCM-Payload", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTCMmsg", null, "RTCMmsg", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RTCM-Revision' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum RTCMRevision
    {
        Unknown = 0,
        Reserved = 1,
        RtcmCMR = 2,
        RtcmCMRPlus = 3,
        RtcmSAPOS = 4,
        RtcmSAPOSAdv = 5,
        RtcmRTCA = 6,
        RtcmRAW = 7,
        RtcmRINEX = 8,
        RtcmSP3 = 9,
        RtcmBINEX = 10,
        RtcmRev2X = 19,
        RtcmRev20 = 20,
        RtcmRev21 = 21,
        RtcmRev23 = 23,
        RtcmRev30 = 30,
        RtcmRev31 = 31,
        RtcmRev32 = 32
    }
    /// <summary>
    /// Represents schema type 'PAMData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PAMData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'timeStamp'</summary>
        public int? TimeStamp { get; set; }
        /// <summary>Field 'parkingLotInfo'</summary>
        public MsgFrame.ParkingLotInfo ParkingLotInfo { get; set; }
        /// <summary>Field 'pamNodes'</summary>
        public PAMNodeList PamNodes { get; set; }
        [System.Serializable]
        public partial class ParkingAreaGuidanceType : System.Collections.Generic.List<ParkingGuide>
        {
            /// <summary>
            /// Initializes a new instance of the ParkingAreaGuidanceType class that is empty and has the default initial capacity.
            /// </summary>
            public ParkingAreaGuidanceType() : base() {}
            /// <summary>
            /// Initializes a new instance of the ParkingAreaGuidanceType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new ParkingAreaGuidanceType.</param>
            /// </summary>
            public ParkingAreaGuidanceType(System.Collections.Generic.IEnumerable<ParkingGuide> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the ParkingAreaGuidanceType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new ParkingAreaGuidanceType can initially store.</param>
            /// </summary>
            public ParkingAreaGuidanceType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                ParkingAreaGuidanceType that = right as ParkingAreaGuidanceType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'parkingAreaGuidance'</summary>
        public ParkingAreaGuidanceType ParkingAreaGuidance { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMData that = right as PAMData;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (TimeStamp != null) {
                if (TimeStamp != that.TimeStamp)
                    return false;
            } else if (that.TimeStamp != null)
                return false;
            if (ParkingLotInfo != null) {
                if (!ParkingLotInfo.Equals(that.ParkingLotInfo))
                    return false;
            } else if (that.ParkingLotInfo != null)
                return false;
            if (PamNodes != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PamNodes, that.PamNodes))
                    return false;
            } else if (that.PamNodes != null)
                return false;
            if (ParkingAreaGuidance != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ParkingAreaGuidance, that.ParkingAreaGuidance))
                    return false;
            } else if (that.ParkingAreaGuidance != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (TimeStamp != null)
                hash ^= TimeStamp.GetHashCode();
            if (ParkingLotInfo != null)
                hash ^= ParkingLotInfo.GetHashCode();
            if (PamNodes != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PamNodes);
            if (ParkingAreaGuidance != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ParkingAreaGuidance);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PAMData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null) {
                        if (this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeStamp.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.ParkingLotInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ParkingLotInfo.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLotInfo", "MsgFrame.ParkingLotInfo", "parkingLotInfo", "ParkingLotInfo", false); throw;
                }
                try {
                    if (this.PamNodes == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PamNodes.Validate();
                    if (this.PamNodes.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.PamNodes.Count > 63)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PamNodes", "PAMNodeList", "pamNodes", "PAMNodeList", false); throw;
                }
                try {
                    if (this.ParkingAreaGuidance != null) {
                        for (int i2 = 0; i2 < this.ParkingAreaGuidance.Count; i2++)
                        {
                            try {
                                this.ParkingAreaGuidance[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "ParkingGuide", "#" + i2.ToString(), "ParkingGuide", false); throw;
                            }
                        }
                        if (this.ParkingAreaGuidance.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ParkingAreaGuidance.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingAreaGuidance", "ParkingAreaGuidanceType", "parkingAreaGuidance", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMData", null, "PAMData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PAMData obj0 = new PAMData();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.TimeStamp = this.TimeStamp;
            }
            {
                obj0.ParkingLotInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.ParkingLotInfo);
            }
            {
                obj0.PamNodes = this.PamNodes == null ? null : (PAMNodeList)this.PamNodes.Copy();
            }
            {
                ParkingAreaGuidanceType seqof1 = this.ParkingAreaGuidance;
                ParkingAreaGuidanceType data1 = null;
                if (seqof1 != null) {
                    data1 = new ParkingAreaGuidanceType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.ParkingAreaGuidance = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    int? data1 = this.TimeStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.ParkingLotInfo data1 = this.ParkingLotInfo;

                    prt.WriteLine(",");
                    prt.Write("parkingLotInfo ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                {
                    PAMNodeList data1 = this.PamNodes;

                    prt.WriteLine(",");
                    prt.Write("pamNodes ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    ParkingAreaGuidanceType data1 = this.ParkingAreaGuidance;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("parkingAreaGuidance ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TimeStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ParkingAreaGuidance != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.TimeStamp != null)
                    {
                        if (enc.BitCount(this.TimeStamp.Value - 0) > 20 || this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeStamp.Value);
                        enc.EncodeConstrainedInteger((this.TimeStamp.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                }
                try {
                    enc.EncodeType(this.ParkingLotInfo);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLotInfo", "MsgFrame.ParkingLotInfo", "parkingLotInfo", "ParkingLotInfo", false); throw;
                }
                try {
                    this.PamNodes.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PamNodes", "PAMNodeList", "pamNodes", "PAMNodeList", false); throw;
                }
                try {
                    ParkingAreaGuidanceType data1 = this.ParkingAreaGuidance;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 16);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ParkingGuide", "#" + i1.ToString(), "ParkingGuide", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingAreaGuidance", "ParkingAreaGuidanceType", "parkingAreaGuidance", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMData", null, "PAMData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TimeStamp = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp", "int", "timeStamp", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.TimeStamp = null;
                }
                try {
                    MsgFrame.ParkingLotInfo data1 = new MsgFrame.ParkingLotInfo();

                    dec.DecodeType(data1);
                    this.ParkingLotInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLotInfo", "MsgFrame.ParkingLotInfo", "parkingLotInfo", "ParkingLotInfo", false); throw;
                }
                try {
                    PAMNodeList data1 = new PAMNodeList();

                    data1.DecodePer(dec);
                    this.PamNodes = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PamNodes", "PAMNodeList", "pamNodes", "PAMNodeList", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        ParkingAreaGuidanceType data1 = new ParkingAreaGuidanceType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 16, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    ParkingGuide data2 = new ParkingGuide();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "ParkingGuide", "#" + data1.Count.ToString(), "ParkingGuide", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.ParkingAreaGuidance = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingAreaGuidance", "ParkingAreaGuidanceType", "parkingAreaGuidance", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.ParkingAreaGuidance = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMData", null, "PAMData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingLotInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ParkingLotInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'id'</summary>
        public int? Id { get; set; }
        /// <summary>Field 'name'</summary>
        public string Name { get; set; }
        /// <summary>Field 'number'</summary>
        public int? Number { get; set; }
        /// <summary>Field 'buildingLayerNum'</summary>
        public int? BuildingLayerNum { get; set; }
        /// <summary>Field 'avpType'</summary>
        public MsgFrame.AVPType? AvpType { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParkingLotInfo that = right as ParkingLotInfo;
            if (Id != null) {
                if (Id != that.Id)
                    return false;
            } else if (that.Id != null)
                return false;
            if (Name != null) {
                if (!Name.Equals(that.Name))
                    return false;
            } else if (that.Name != null)
                return false;
            if (Number != null) {
                if (Number != that.Number)
                    return false;
            } else if (that.Number != null)
                return false;
            if (BuildingLayerNum != null) {
                if (BuildingLayerNum != that.BuildingLayerNum)
                    return false;
            } else if (that.BuildingLayerNum != null)
                return false;
            if (AvpType != null) {
                if (AvpType != that.AvpType)
                    return false;
            } else if (that.AvpType != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Id != null)
                hash ^= Id.GetHashCode();
            if (Name != null)
                hash ^= Name.GetHashCode();
            if (Number != null)
                hash ^= Number.GetHashCode();
            if (BuildingLayerNum != null)
                hash ^= BuildingLayerNum.GetHashCode();
            if (AvpType != null)
                hash ^= AvpType.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ParkingLotInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Id != null) {
                        if (this.Id.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Id.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id.Value", "int", "id", "INTEGER", false); throw;
                }
                try {
                    if (this.Name != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Name, _InternalMetadata.CommonMetaData.S0);
                        if (this.Name.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Name.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.Number != null) {
                        if (this.Number.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Number.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Number.Value", "int", "number", "INTEGER", false); throw;
                }
                try {
                    if (this.BuildingLayerNum != null) {
                        if (this.BuildingLayerNum.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.BuildingLayerNum.Value > 256)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BuildingLayerNum.Value", "int", "buildingLayerNum", "INTEGER", false); throw;
                }
                try {
                    if (this.AvpType != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AvpType.Value", "MsgFrame.AVPType", "avpType", "AVPType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingLotInfo", null, "ParkingLotInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ParkingLotInfo obj0 = new ParkingLotInfo();
            {
                obj0.Id = this.Id;
            }
            {
                obj0.Name = this.Name;
            }
            {
                obj0.Number = this.Number;
            }
            {
                obj0.BuildingLayerNum = this.BuildingLayerNum;
            }
            {
                obj0.AvpType = this.AvpType;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.Id;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("id ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    string data1 = this.Name;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("name ");
                        prt.PrintString(data1);
                    }
                }
                {
                    int? data1 = this.Number;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("number ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.BuildingLayerNum;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("buildingLayerNum ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.AVPType? data1 = this.AvpType;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("avpType ");
                        switch (data1.Value) {
                        case MsgFrame.AVPType.P0:
                            prt.Write("p0");
                            break;
                        case MsgFrame.AVPType.P1:
                            prt.Write("p1");
                            break;
                        case MsgFrame.AVPType.P2:
                            prt.Write("p2");
                            break;
                        case MsgFrame.AVPType.P3:
                            prt.Write("p3");
                            break;
                        case MsgFrame.AVPType.P4:
                            prt.Write("p4");
                            break;
                        case MsgFrame.AVPType.P5:
                            prt.Write("p5");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Id != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Name != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Number != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.BuildingLayerNum != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.AvpType != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (this.Id != null)
                    {
                        if (enc.BitCount(this.Id.Value - 0) > 16 || this.Id.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Id.Value);
                        enc.EncodeConstrainedInteger((this.Id.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id.Value", "int", "id", "INTEGER", false); throw;
                }
                try {
                    if (this.Name != null)
                    {
                        enc.EncodeKMCString(this.Name, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                }
                try {
                    if (this.Number != null)
                    {
                        if (enc.BitCount(this.Number.Value - 0) > 16 || this.Number.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Number.Value);
                        enc.EncodeConstrainedInteger((this.Number.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Number.Value", "int", "number", "INTEGER", false); throw;
                }
                try {
                    if (this.BuildingLayerNum != null)
                    {
                        if (enc.BitCount(this.BuildingLayerNum.Value - 0) > 9 || this.BuildingLayerNum.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.BuildingLayerNum.Value);
                        enc.EncodeConstrainedInteger((this.BuildingLayerNum.Value - (0)), 9);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BuildingLayerNum.Value", "int", "buildingLayerNum", "INTEGER", false); throw;
                }
                try {
                    if (this.AvpType != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.AvpType.Value, _InternalMetadata.PerCodecMetaData.SortedEnum19, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum19);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AvpType.Value", "MsgFrame.AVPType", "avpType", "AVPType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingLotInfo", null, "ParkingLotInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Id = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Id = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Name = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Name", "string", "name", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Name = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Number = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Number", "int", "number", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Number = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.BuildingLayerNum = dec.DecodeConstrainedInteger(9, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "BuildingLayerNum", "int", "buildingLayerNum", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.BuildingLayerNum = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum19, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum19, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum19);
                        this.AvpType = (MsgFrame.AVPType)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AvpType", "MsgFrame.AVPType", "avpType", "AVPType", false); throw;
                    }
                }
                else
                {
                    this.AvpType = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingLotInfo", null, "ParkingLotInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AVPType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AVPType
    {
        P0 = 0,
        P1 = 1,
        P2 = 2,
        P3 = 3,
        P4 = 4,
        P5 = 5
    }
    /// <summary>
    /// Represents schema type 'PAMNodeList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PAMNodeList : System.Collections.Generic.List<PAMNode>
    {
        /// <summary>
        /// Initializes a new instance of the PAMNodeList class that is empty and has the default initial capacity.
        /// </summary>
        public PAMNodeList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PAMNodeList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PAMNodeList.</param>
        /// </summary>
        public PAMNodeList(System.Collections.Generic.IEnumerable<PAMNode> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PAMNodeList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PAMNodeList can initially store.</param>
        /// </summary>
        public PAMNodeList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMNodeList that = right as PAMNodeList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PAMNode", "#" + i1.ToString(), "PAMNode", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNodeList", null, "PAMNodeList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PAMNodeList obj0 = new PAMNodeList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 63);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PAMNode", "#" + i0.ToString(), "PAMNode", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNodeList", null, "PAMNodeList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 63, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PAMNode data1 = new PAMNode();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PAMNode", "#" + this.Count.ToString(), "PAMNode", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNodeList", null, "PAMNodeList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PAMNode' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PAMNode : Oss.Asn1.BaseType
    {
        /// <summary>Field 'id'</summary>
        public int Id { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        /// <summary>Field 'floor'</summary>
        public long? Floor { get; set; }
        /// <summary>Field 'attributes'</summary>
        public Oss.Asn1.BitStringWithNamedBits Attributes { get; set; }
        /// <summary>Field 'inDrives'</summary>
        public PAMDriveList InDrives { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMNode that = right as PAMNode;
            if (Id != that.Id)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (Floor != null) {
                if (Floor != that.Floor)
                    return false;
            } else if (that.Floor != null)
                return false;
            if (Attributes != null) {
                if (!Attributes.Equals(that.Attributes))
                    return false;
            } else if (that.Attributes != null)
                return false;
            if (InDrives != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(InDrives, that.InDrives))
                    return false;
            } else if (that.InDrives != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Id.GetHashCode();
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (Floor != null)
                hash ^= Floor.GetHashCode();
            if (Attributes != null)
                hash ^= Attributes.GetHashCode();
            if (InDrives != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(InDrives);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PAMNode";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Id > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PAMNodeID", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.Floor != null) {
                        if (this.Floor.Value < -128)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Floor.Value > 128)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Floor.Value", "long", "floor", "INTEGER", false); throw;
                }
                try {
                    if (this.Attributes != null) {
                        try {
                            if (this.Attributes.Count != 8)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Attributes", "Oss.Asn1.BitStringWithNamedBits", "attributes", "PAMNodeAttributes", false); throw;
                }
                try {
                    if (this.InDrives != null) {
                        this.InDrives.Validate();
                        if (this.InDrives.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.InDrives.Count > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InDrives", "PAMDriveList", "inDrives", "PAMDriveList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNode", null, "PAMNode", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PAMNode obj0 = new PAMNode();
            {
                obj0.Id = this.Id;
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                obj0.Floor = this.Floor;
            }
            {
                obj0.Attributes = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Attributes);
            }
            {
                obj0.InDrives = this.InDrives == null ? null : (PAMDriveList)this.InDrives.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("id ");
                    prt.Write(this.Id);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    long? data1 = this.Floor;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("floor ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Attributes;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("attributes ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "entrance";
                                    case (int)1: return "exit";
                                    case (int)2: return "toUpstair";
                                    case (int)3: return "toDownstair";
                                    case (int)4: return "etc";
                                    case (int)5: return "mtc";
                                    case (int)6: return "passAfterPayment";
                                    case (int)7: return "blocked";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    PAMDriveList data1 = this.InDrives;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("inDrives ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Floor != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Attributes != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.InDrives != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (enc.BitCount(this.Id - 0) > 16 || this.Id < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Id);
                    enc.EncodeConstrainedInteger((this.Id - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PAMNodeID", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.Floor != null)
                    {
                        if (enc.BitCount(this.Floor.Value - -128) > 9 || this.Floor.Value < -128)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Floor.Value);
                        enc.EncodeConstrainedLongInteger((long)(this.Floor.Value - (-128)), 9);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Floor.Value", "long", "floor", "INTEGER", false); throw;
                }
                try {
                    if (this.Attributes != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges4, this.Attributes.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 8);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Attributes, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Attributes, length1, 8);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Attributes", "Oss.Asn1.BitStringWithNamedBits", "attributes", "PAMNodeAttributes", false); throw;
                }
                try {
                    PAMDriveList data1 = this.InDrives;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "InDrives", "PAMDriveList", "inDrives", "PAMDriveList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNode", null, "PAMNode", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    this.Id = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "int", "id", "PAMNodeID", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Floor = dec.DecodeConstrainedLongInteger(9, -128);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Floor", "long", "floor", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Floor = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges4);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(8, _InternalMetadata.BerCodecMetaData.Ranges4);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 8))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Attributes = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Attributes", "Oss.Asn1.BitStringWithNamedBits", "attributes", "PAMNodeAttributes", false); throw;
                    }
                }
                else
                {
                    this.Attributes = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        PAMDriveList data1 = new PAMDriveList();

                        data1.DecodePer(dec);
                        this.InDrives = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "InDrives", "PAMDriveList", "inDrives", "PAMDriveList", false); throw;
                    }
                }
                else
                {
                    this.InDrives = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMNode", null, "PAMNode", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PAMNodeAttributes' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum PAMNodeAttributes
    {
        Entrance = 0,
        Exit = 1,
        ToUpstair = 2,
        ToDownstair = 3,
        Etc = 4,
        Mtc = 5,
        PassAfterPayment = 6,
        Blocked = 7
    }
    /// <summary>
    /// Represents schema type 'PAMDriveList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PAMDriveList : System.Collections.Generic.List<PAMDrive>
    {
        /// <summary>
        /// Initializes a new instance of the PAMDriveList class that is empty and has the default initial capacity.
        /// </summary>
        public PAMDriveList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PAMDriveList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PAMDriveList.</param>
        /// </summary>
        public PAMDriveList(System.Collections.Generic.IEnumerable<PAMDrive> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PAMDriveList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PAMDriveList can initially store.</param>
        /// </summary>
        public PAMDriveList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMDriveList that = right as PAMDriveList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PAMDrive", "#" + i1.ToString(), "PAMDrive", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDriveList", null, "PAMDriveList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PAMDriveList obj0 = new PAMDriveList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 63)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 63);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PAMDrive", "#" + i0.ToString(), "PAMDrive", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDriveList", null, "PAMDriveList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 63, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PAMDrive data1 = new PAMDrive();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PAMDrive", "#" + this.Count.ToString(), "PAMDrive", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDriveList", null, "PAMDriveList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PAMDrive' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PAMDrive : Oss.Asn1.BaseType
    {
        /// <summary>Field 'upstreamPAMNodeId'</summary>
        public int UpstreamPAMNodeId { get; set; }
        /// <summary>Field 'driveID'</summary>
        public int? DriveID { get; set; }
        /// <summary>Field 'twowaySepration'</summary>
        public bool? TwowaySepration { get; set; }
        /// <summary>Field 'speedLimit'</summary>
        public int? SpeedLimit { get; set; }
        /// <summary>Field 'heightRestriction'</summary>
        public int? HeightRestriction { get; set; }
        /// <summary>Field 'driveWidth'</summary>
        public int? DriveWidth { get; set; }
        /// <summary>Field 'laneNum'</summary>
        public int? LaneNum { get; set; }
        /// <summary>Field 'points'</summary>
        public PointList Points { get; set; }
        /// <summary>Field 'movements'</summary>
        public PAMMovementList Movements { get; set; }
        /// <summary>Field 'parkingSlots'</summary>
        public MsgFrame.ParkingSlots ParkingSlots { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMDrive that = right as PAMDrive;
            if (UpstreamPAMNodeId != that.UpstreamPAMNodeId)
                return false;
            if (DriveID != null) {
                if (DriveID != that.DriveID)
                    return false;
            } else if (that.DriveID != null)
                return false;
            if (TwowaySepration != null) {
                if (TwowaySepration != that.TwowaySepration)
                    return false;
            } else if (that.TwowaySepration != null)
                return false;
            if (SpeedLimit != null) {
                if (SpeedLimit != that.SpeedLimit)
                    return false;
            } else if (that.SpeedLimit != null)
                return false;
            if (HeightRestriction != null) {
                if (HeightRestriction != that.HeightRestriction)
                    return false;
            } else if (that.HeightRestriction != null)
                return false;
            if (DriveWidth != null) {
                if (DriveWidth != that.DriveWidth)
                    return false;
            } else if (that.DriveWidth != null)
                return false;
            if (LaneNum != null) {
                if (LaneNum != that.LaneNum)
                    return false;
            } else if (that.LaneNum != null)
                return false;
            if (Points != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Points, that.Points))
                    return false;
            } else if (that.Points != null)
                return false;
            if (Movements != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Movements, that.Movements))
                    return false;
            } else if (that.Movements != null)
                return false;
            if (ParkingSlots != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ParkingSlots, that.ParkingSlots))
                    return false;
            } else if (that.ParkingSlots != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= UpstreamPAMNodeId.GetHashCode();
            if (DriveID != null)
                hash ^= DriveID.GetHashCode();
            if (TwowaySepration != null)
                hash ^= TwowaySepration.GetHashCode();
            if (SpeedLimit != null)
                hash ^= SpeedLimit.GetHashCode();
            if (HeightRestriction != null)
                hash ^= HeightRestriction.GetHashCode();
            if (DriveWidth != null)
                hash ^= DriveWidth.GetHashCode();
            if (LaneNum != null)
                hash ^= LaneNum.GetHashCode();
            if (Points != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Points);
            if (Movements != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Movements);
            if (ParkingSlots != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ParkingSlots);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PAMDrive";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UpstreamPAMNodeId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.UpstreamPAMNodeId > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamPAMNodeId", "int", "upstreamPAMNodeId", "PAMNodeID", false); throw;
                }
                try {
                    if (this.DriveID != null) {
                        if (this.DriveID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.DriveID.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveID.Value", "int", "driveID", "INTEGER", false); throw;
                }
                try {
                    if (this.TwowaySepration != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TwowaySepration.Value", "bool", "twowaySepration", "BOOLEAN", false); throw;
                }
                try {
                    if (this.SpeedLimit != null) {
                        if (this.SpeedLimit.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.SpeedLimit.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimit.Value", "int", "speedLimit", "Speed", false); throw;
                }
                try {
                    if (this.HeightRestriction != null) {
                        if (this.HeightRestriction.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.HeightRestriction.Value > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightRestriction.Value", "int", "heightRestriction", "INTEGER", false); throw;
                }
                try {
                    if (this.DriveWidth != null) {
                        if (this.DriveWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.DriveWidth.Value > 32767)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveWidth.Value", "int", "driveWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.LaneNum != null) {
                        if (this.LaneNum.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.LaneNum.Value > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneNum.Value", "int", "laneNum", "INTEGER", false); throw;
                }
                try {
                    if (this.Points != null) {
                        this.Points.Validate();
                        if (this.Points.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Points.Count > 31)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    if (this.Movements != null) {
                        this.Movements.Validate();
                        if (this.Movements.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Movements.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "PAMMovementList", "movements", "PAMMovementList", false); throw;
                }
                try {
                    if (this.ParkingSlots != null) {
                        this.ParkingSlots.Validate();
                        if (this.ParkingSlots.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ParkingSlots.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSlots", "MsgFrame.ParkingSlots", "parkingSlots", "ParkingSlots", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDrive", null, "PAMDrive", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PAMDrive obj0 = new PAMDrive();
            {
                obj0.UpstreamPAMNodeId = this.UpstreamPAMNodeId;
            }
            {
                obj0.DriveID = this.DriveID;
            }
            {
                obj0.TwowaySepration = this.TwowaySepration;
            }
            {
                obj0.SpeedLimit = this.SpeedLimit;
            }
            {
                obj0.HeightRestriction = this.HeightRestriction;
            }
            {
                obj0.DriveWidth = this.DriveWidth;
            }
            {
                obj0.LaneNum = this.LaneNum;
            }
            {
                obj0.Points = this.Points == null ? null : (PointList)this.Points.Copy();
            }
            {
                obj0.Movements = this.Movements == null ? null : (PAMMovementList)this.Movements.Copy();
            }
            {
                obj0.ParkingSlots = this.ParkingSlots == null ? null : (MsgFrame.ParkingSlots)this.ParkingSlots.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("upstreamPAMNodeId ");
                    prt.Write(this.UpstreamPAMNodeId);
                }
                {
                    int? data1 = this.DriveID;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("driveID ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    bool? data1 = this.TwowaySepration;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("twowaySepration ");
                        prt.Write(data1.Value ? "TRUE" : "FALSE");
                    }
                }
                {
                    int? data1 = this.SpeedLimit;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedLimit ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.HeightRestriction;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("heightRestriction ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.DriveWidth;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("driveWidth ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.LaneNum;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("laneNum ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PointList data1 = this.Points;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("points ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    PAMMovementList data1 = this.Movements;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("movements ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MsgFrame.ParkingSlots data1 = this.ParkingSlots;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("parkingSlots ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[2];

                enc.Output.WriteBool(extPresent0);
                if (this.DriveID != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TwowaySepration != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.SpeedLimit != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.HeightRestriction != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.DriveWidth != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.LaneNum != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.Points != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.Movements != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                if (this.ParkingSlots != null)
                    optMask0[1] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 9);
                try {
                    if (enc.BitCount(this.UpstreamPAMNodeId - 0) > 16 || this.UpstreamPAMNodeId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.UpstreamPAMNodeId);
                    enc.EncodeConstrainedInteger((this.UpstreamPAMNodeId - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamPAMNodeId", "int", "upstreamPAMNodeId", "PAMNodeID", false); throw;
                }
                try {
                    if (this.DriveID != null)
                    {
                        if (enc.BitCount(this.DriveID.Value - 0) > 8 || this.DriveID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.DriveID.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.DriveID.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveID.Value", "int", "driveID", "INTEGER", false); throw;
                }
                try {
                    if (this.TwowaySepration != null)
                    {
                        enc.EncodeBool(this.TwowaySepration.Value);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TwowaySepration.Value", "bool", "twowaySepration", "BOOLEAN", false); throw;
                }
                try {
                    if (this.SpeedLimit != null)
                    {
                        if (enc.BitCount(this.SpeedLimit.Value - 0) > 13 || this.SpeedLimit.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SpeedLimit.Value);
                        enc.EncodeConstrainedInteger((this.SpeedLimit.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimit.Value", "int", "speedLimit", "Speed", false); throw;
                }
                try {
                    if (this.HeightRestriction != null)
                    {
                        if (enc.BitCount(this.HeightRestriction.Value - 0) > 7 || this.HeightRestriction.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.HeightRestriction.Value);
                        enc.Output.Write7BitInt((this.HeightRestriction.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightRestriction.Value", "int", "heightRestriction", "INTEGER", false); throw;
                }
                try {
                    if (this.DriveWidth != null)
                    {
                        if (enc.BitCount(this.DriveWidth.Value - 0) > 15 || this.DriveWidth.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.DriveWidth.Value);
                        enc.EncodeConstrainedInteger((this.DriveWidth.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveWidth.Value", "int", "driveWidth", "LaneWidth", false); throw;
                }
                try {
                    if (this.LaneNum != null)
                    {
                        if (enc.BitCount(this.LaneNum.Value - 0) > 7 || this.LaneNum.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LaneNum.Value);
                        enc.Output.Write7BitInt((this.LaneNum.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneNum.Value", "int", "laneNum", "INTEGER", false); throw;
                }
                try {
                    if (this.Points != null)
                    {
                        this.Points.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                }
                try {
                    PAMMovementList data1 = this.Movements;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "PAMMovementList", "movements", "PAMMovementList", false); throw;
                }
                try {
                    MsgFrame.ParkingSlots data1 = this.ParkingSlots;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSlots", "MsgFrame.ParkingSlots", "parkingSlots", "ParkingSlots", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDrive", null, "PAMDrive", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 10);
                try {
                    this.UpstreamPAMNodeId = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamPAMNodeId", "int", "upstreamPAMNodeId", "PAMNodeID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.DriveID = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveID", "int", "driveID", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.DriveID = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.TwowaySepration = dec.DecodeBool();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TwowaySepration", "bool", "twowaySepration", "BOOLEAN", false); throw;
                    }
                }
                else
                {
                    this.TwowaySepration = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.SpeedLimit = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedLimit", "int", "speedLimit", "Speed", false); throw;
                    }
                }
                else
                {
                    this.SpeedLimit = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.HeightRestriction = 0 + dec.Input.Read7BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightRestriction", "int", "heightRestriction", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.HeightRestriction = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.DriveWidth = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveWidth", "int", "driveWidth", "LaneWidth", false); throw;
                    }
                }
                else
                {
                    this.DriveWidth = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        this.LaneNum = 0 + dec.Input.Read7BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneNum", "int", "laneNum", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.LaneNum = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        PointList data1 = new PointList();

                        data1.DecodePer(dec);
                        this.Points = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Points", "PointList", "points", "PointList", false); throw;
                    }
                }
                else
                {
                    this.Points = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        PAMMovementList data1 = new PAMMovementList();

                        data1.DecodePer(dec);
                        this.Movements = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Movements", "PAMMovementList", "movements", "PAMMovementList", false); throw;
                    }
                }
                else
                {
                    this.Movements = null;
                }
                if ((optMask0[1] & 0x40) != 0)
                {
                    try {
                        MsgFrame.ParkingSlots data1 = new MsgFrame.ParkingSlots();

                        data1.DecodePer(dec);
                        this.ParkingSlots = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSlots", "MsgFrame.ParkingSlots", "parkingSlots", "ParkingSlots", false); throw;
                    }
                }
                else
                {
                    this.ParkingSlots = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMDrive", null, "PAMDrive", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PAMMovementList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PAMMovementList : System.Collections.Generic.List<int>
    {
        /// <summary>
        /// Initializes a new instance of the PAMMovementList class that is empty and has the default initial capacity.
        /// </summary>
        public PAMMovementList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PAMMovementList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PAMMovementList.</param>
        /// </summary>
        public PAMMovementList(System.Collections.Generic.IEnumerable<int> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PAMMovementList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PAMMovementList can initially store.</param>
        /// </summary>
        public PAMMovementList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PAMMovementList that = right as PAMMovementList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        if (this[i1] < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this[i1] > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "int", "#" + i1.ToString(), "PAMNodeID", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMMovementList", null, "PAMMovementList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PAMMovementList obj0 = new PAMMovementList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(this[i0]);
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    prt.WriteLine();
                    prt.Write(this[i1]);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        if (enc.BitCount(this[i0] - 0) > 16 || this[i0] < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this[i0]);
                        enc.EncodeConstrainedInteger((this[i0] - (0)), 16);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "int", "#" + i0.ToString(), "PAMNodeID", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMMovementList", null, "PAMMovementList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            this.Add(dec.DecodeConstrainedInteger(16, 0));
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "int", "#" + this.Count.ToString(), "PAMNodeID", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PAMMovementList", null, "PAMMovementList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingSlots' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ParkingSlots : System.Collections.Generic.List<ParkingSlot>
    {
        /// <summary>
        /// Initializes a new instance of the ParkingSlots class that is empty and has the default initial capacity.
        /// </summary>
        public ParkingSlots() : base() {}
        /// <summary>
        /// Initializes a new instance of the ParkingSlots class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ParkingSlots.</param>
        /// </summary>
        public ParkingSlots(System.Collections.Generic.IEnumerable<ParkingSlot> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ParkingSlots class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ParkingSlots can initially store.</param>
        /// </summary>
        public ParkingSlots(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParkingSlots that = right as ParkingSlots;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ParkingSlot", "#" + i1.ToString(), "ParkingSlot", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlots", null, "ParkingSlots", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ParkingSlots obj0 = new ParkingSlots();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ParkingSlot", "#" + i0.ToString(), "ParkingSlot", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlots", null, "ParkingSlots", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ParkingSlot data1 = new ParkingSlot();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ParkingSlot", "#" + this.Count.ToString(), "ParkingSlot", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlots", null, "ParkingSlots", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingSlot' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ParkingSlot : Oss.Asn1.BaseType
    {
        /// <summary>Field 'slotID'</summary>
        public int SlotID { get; set; }
        /// <summary>Field 'position'</summary>
        public ParkingSlotPosition Position { get; set; }
        /// <summary>Field 'sign'</summary>
        public string Sign { get; set; }
        /// <summary>Field 'parkingType'</summary>
        public Oss.Asn1.BitStringWithNamedBits ParkingType { get; set; }
        /// <summary>Field 'status'</summary>
        public SlotStatus Status { get; set; }
        /// <summary>Field 'parkingSpaceTheta'</summary>
        public MsgFrame.ParkingSpaceTheta ParkingSpaceTheta { get; set; }
        /// <summary>Field 'parkingLock'</summary>
        public MsgFrame.ParkingLock ParkingLock { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParkingSlot that = right as ParkingSlot;
            if (SlotID != that.SlotID)
                return false;
            if (Position != null) {
                if (!Position.Equals(that.Position))
                    return false;
            } else if (that.Position != null)
                return false;
            if (Sign != null) {
                if (!Sign.Equals(that.Sign))
                    return false;
            } else if (that.Sign != null)
                return false;
            if (ParkingType != null) {
                if (!ParkingType.Equals(that.ParkingType))
                    return false;
            } else if (that.ParkingType != null)
                return false;
            if (Status != that.Status)
                return false;
            if (ParkingSpaceTheta != that.ParkingSpaceTheta)
                return false;
            if (ParkingLock != that.ParkingLock)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= SlotID.GetHashCode();
            if (Position != null)
                hash ^= Position.GetHashCode();
            if (Sign != null)
                hash ^= Sign.GetHashCode();
            if (ParkingType != null)
                hash ^= ParkingType.GetHashCode();
            hash ^= Status.GetHashCode();
            hash ^= ParkingSpaceTheta.GetHashCode();
            hash ^= ParkingLock.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ParkingSlot";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SlotID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SlotID > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SlotID", "int", "slotID", "INTEGER", false); throw;
                }
                try {
                    if (this.Position != null) {
                        this.Position.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Position", "ParkingSlotPosition", "position", "ParkingSlotPosition", false); throw;
                }
                try {
                    if (this.Sign != null) {
                        Oss.Asn1.Internal.Validator.ValidateKMCString(this.Sign, _InternalMetadata.CommonMetaData.S0);
                        if (this.Sign.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Sign.Length > 63)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Sign", "string", "sign", "DescriptiveName", false); throw;
                }
                try {
                    if (this.ParkingType == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.ParkingType.Count != 10)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "SlotStatus", "status", "SlotStatus", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSpaceTheta", "MsgFrame.ParkingSpaceTheta", "parkingSpaceTheta", "ParkingSpaceTheta", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLock", "MsgFrame.ParkingLock", "parkingLock", "ParkingLock", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlot", null, "ParkingSlot", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ParkingSlot obj0 = new ParkingSlot();
            {
                obj0.SlotID = this.SlotID;
            }
            {
                obj0.Position = Oss.Asn1.Internal.CopyUtil.CopyType(this.Position);
            }
            {
                obj0.Sign = this.Sign;
            }
            {
                obj0.ParkingType = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.ParkingType);
            }
            {
                obj0.Status = this.Status;
            }
            {
                obj0.ParkingSpaceTheta = this.ParkingSpaceTheta;
            }
            {
                obj0.ParkingLock = this.ParkingLock;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("slotID ");
                    prt.Write(this.SlotID);
                }
                {
                    ParkingSlotPosition data1 = this.Position;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("position ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    string data1 = this.Sign;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("sign ");
                        prt.PrintString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("parkingType ");
                    if (this.ParkingType == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintBitString(this.ParkingType, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unknown";
                                    case (int)1: return "ordinary";
                                    case (int)2: return "disabled";
                                    case (int)3: return "mini";
                                    case (int)4: return "attached";
                                    case (int)5: return "charging";
                                    case (int)6: return "stereo";
                                    case (int)7: return "lady";
                                    case (int)8: return "extended";
                                    case (int)9: return "private";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("status ");
                    switch (this.Status) {
                    case SlotStatus.Unknown:
                        prt.Write("unknown");
                        break;
                    case SlotStatus.Available:
                        prt.Write("available");
                        break;
                    case SlotStatus.Occupied:
                        prt.Write("occupied");
                        break;
                    default:
                        prt.Write((int)this.Status);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("parkingSpaceTheta ");
                    switch (this.ParkingSpaceTheta) {
                    case MsgFrame.ParkingSpaceTheta.Unknown:
                        prt.Write("unknown");
                        break;
                    case MsgFrame.ParkingSpaceTheta.Vertical:
                        prt.Write("vertical");
                        break;
                    case MsgFrame.ParkingSpaceTheta.Side:
                        prt.Write("side");
                        break;
                    case MsgFrame.ParkingSpaceTheta.Oblique:
                        prt.Write("oblique");
                        break;
                    default:
                        prt.Write((int)this.ParkingSpaceTheta);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("parkingLock ");
                    switch (this.ParkingLock) {
                    case MsgFrame.ParkingLock.Unknown:
                        prt.Write("unknown");
                        break;
                    case MsgFrame.ParkingLock.Nolock:
                        prt.Write("nolock");
                        break;
                    case MsgFrame.ParkingLock.Locked:
                        prt.Write("locked");
                        break;
                    case MsgFrame.ParkingLock.Unlocked:
                        prt.Write("unlocked");
                        break;
                    default:
                        prt.Write((int)this.ParkingLock);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Position != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Sign != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (enc.BitCount(this.SlotID - 0) > 16 || this.SlotID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SlotID);
                    enc.EncodeConstrainedInteger((this.SlotID - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SlotID", "int", "slotID", "INTEGER", false); throw;
                }
                try {
                    ParkingSlotPosition data1 = this.Position;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Position", "ParkingSlotPosition", "position", "ParkingSlotPosition", false); throw;
                }
                try {
                    if (this.Sign != null)
                    {
                        enc.EncodeKMCString(this.Sign, 1, 63, _InternalMetadata.CommonMetaData.S0);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Sign", "string", "sign", "DescriptiveName", false); throw;
                }
                try {
                    int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges6, this.ParkingType.LastOneBitPos() + 1);
                    bool extPresent1 = !(length1 == 10);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeBitStringWithNamedBits(this.ParkingType, length1);
                    else {
                        enc.EncodeBitStringWithNamedBits(this.ParkingType, length1, 10);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Status, _InternalMetadata.PerCodecMetaData.SortedEnum20, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum20);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "SlotStatus", "status", "SlotStatus", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.ParkingSpaceTheta, _InternalMetadata.PerCodecMetaData.SortedEnum21, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum21);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSpaceTheta", "MsgFrame.ParkingSpaceTheta", "parkingSpaceTheta", "ParkingSpaceTheta", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.ParkingLock, _InternalMetadata.PerCodecMetaData.SortedEnum22, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum22);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLock", "MsgFrame.ParkingLock", "parkingLock", "ParkingLock", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlot", null, "ParkingSlot", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.SlotID = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SlotID", "int", "slotID", "INTEGER", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        ParkingSlotPosition data1 = new ParkingSlotPosition();

                        dec.DecodeType(data1);
                        this.Position = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Position", "ParkingSlotPosition", "position", "ParkingSlotPosition", false); throw;
                    }
                }
                else
                {
                    this.Position = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Sign = dec.DecodeKMCString(1, 63, _InternalMetadata.CommonMetaData.S0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Sign", "string", "sign", "DescriptiveName", false); throw;
                    }
                }
                else
                {
                    this.Sign = null;
                }
                try {
                    Oss.Asn1.BitStringWithNamedBits data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges6);
                    else
                        data1 = dec.DecodeBitStringWithNamedBits(10, _InternalMetadata.BerCodecMetaData.Ranges6);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 10))
                        dec.RaiseExtLengthError(extPresent1);
                    this.ParkingType = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum20, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum20, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum20);
                    this.Status = (SlotStatus)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "SlotStatus", "status", "SlotStatus", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum21, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum21, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum21);
                    this.ParkingSpaceTheta = (MsgFrame.ParkingSpaceTheta)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingSpaceTheta", "MsgFrame.ParkingSpaceTheta", "parkingSpaceTheta", "ParkingSpaceTheta", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum22, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum22, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum22);
                    this.ParkingLock = (MsgFrame.ParkingLock)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingLock", "MsgFrame.ParkingLock", "parkingLock", "ParkingLock", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlot", null, "ParkingSlot", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingSlotPosition' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ParkingSlotPosition : Oss.Asn1.BaseType
    {
        /// <summary>Field 'topLeft'</summary>
        public PositionOffsetLLV TopLeft { get; set; }
        /// <summary>Field 'topRight'</summary>
        public PositionOffsetLLV TopRight { get; set; }
        /// <summary>Field 'bottomLeft'</summary>
        public PositionOffsetLLV BottomLeft { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParkingSlotPosition that = right as ParkingSlotPosition;
            if (TopLeft != null) {
                if (!TopLeft.Equals(that.TopLeft))
                    return false;
            } else if (that.TopLeft != null)
                return false;
            if (TopRight != null) {
                if (!TopRight.Equals(that.TopRight))
                    return false;
            } else if (that.TopRight != null)
                return false;
            if (BottomLeft != null) {
                if (!BottomLeft.Equals(that.BottomLeft))
                    return false;
            } else if (that.BottomLeft != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TopLeft != null)
                hash ^= TopLeft.GetHashCode();
            if (TopRight != null)
                hash ^= TopRight.GetHashCode();
            if (BottomLeft != null)
                hash ^= BottomLeft.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ParkingSlotPosition";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TopLeft == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.TopLeft.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopLeft", "PositionOffsetLLV", "topLeft", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.TopRight == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.TopRight.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopRight", "PositionOffsetLLV", "topRight", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.BottomLeft == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.BottomLeft.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BottomLeft", "PositionOffsetLLV", "bottomLeft", "PositionOffsetLLV", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlotPosition", null, "ParkingSlotPosition", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ParkingSlotPosition obj0 = new ParkingSlotPosition();
            {
                obj0.TopLeft = Oss.Asn1.Internal.CopyUtil.CopyType(this.TopLeft);
            }
            {
                obj0.TopRight = Oss.Asn1.Internal.CopyUtil.CopyType(this.TopRight);
            }
            {
                obj0.BottomLeft = Oss.Asn1.Internal.CopyUtil.CopyType(this.BottomLeft);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("topLeft ");
                    if (this.TopLeft == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.TopLeft);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("topRight ");
                    if (this.TopRight == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.TopRight);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("bottomLeft ");
                    if (this.BottomLeft == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.BottomLeft);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeType(this.TopLeft);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopLeft", "PositionOffsetLLV", "topLeft", "PositionOffsetLLV", false); throw;
                }
                try {
                    enc.EncodeType(this.TopRight);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopRight", "PositionOffsetLLV", "topRight", "PositionOffsetLLV", false); throw;
                }
                try {
                    enc.EncodeType(this.BottomLeft);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BottomLeft", "PositionOffsetLLV", "bottomLeft", "PositionOffsetLLV", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlotPosition", null, "ParkingSlotPosition", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.TopLeft = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopLeft", "PositionOffsetLLV", "topLeft", "PositionOffsetLLV", false); throw;
                }
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.TopRight = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TopRight", "PositionOffsetLLV", "topRight", "PositionOffsetLLV", false); throw;
                }
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.BottomLeft = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BottomLeft", "PositionOffsetLLV", "bottomLeft", "PositionOffsetLLV", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingSlotPosition", null, "ParkingSlotPosition", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingType' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum ParkingType
    {
        Unknown = 0,
        Ordinary = 1,
        Disabled = 2,
        Mini = 3,
        Attached = 4,
        Charging = 5,
        Stereo = 6,
        Lady = 7,
        Extended = 8,
        Private = 9
    }
    /// <summary>
    /// Represents schema type 'SlotStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SlotStatus
    {
        Unknown = 0,
        Available = 1,
        Occupied = 2
    }
    /// <summary>
    /// Represents schema type 'ParkingSpaceTheta' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ParkingSpaceTheta
    {
        Unknown = 0,
        Vertical = 1,
        Side = 2,
        Oblique = 3
    }
    /// <summary>
    /// Represents schema type 'ParkingLock' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ParkingLock
    {
        Unknown = 0,
        Nolock = 1,
        Locked = 2,
        Unlocked = 3
    }
    /// <summary>
    /// Represents schema type 'ParkingGuide' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ParkingGuide : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehId'</summary>
        public byte[] VehId { get; set; }
        [System.Serializable]
        public partial class DrivePathType : System.Collections.Generic.List<int>
        {
            /// <summary>
            /// Initializes a new instance of the DrivePathType class that is empty and has the default initial capacity.
            /// </summary>
            public DrivePathType() : base() {}
            /// <summary>
            /// Initializes a new instance of the DrivePathType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new DrivePathType.</param>
            /// </summary>
            public DrivePathType(System.Collections.Generic.IEnumerable<int> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the DrivePathType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new DrivePathType can initially store.</param>
            /// </summary>
            public DrivePathType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                DrivePathType that = right as DrivePathType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'drivePath'</summary>
        public DrivePathType DrivePath { get; set; }
        /// <summary>Field 'targetParkingSlot'</summary>
        public int? TargetParkingSlot { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ParkingGuide that = right as ParkingGuide;
            if (VehId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehId, that.VehId))
                    return false;
            } else if (that.VehId != null)
                return false;
            if (DrivePath != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(DrivePath, that.DrivePath))
                    return false;
            } else if (that.DrivePath != null)
                return false;
            if (TargetParkingSlot != null) {
                if (TargetParkingSlot != that.TargetParkingSlot)
                    return false;
            } else if (that.TargetParkingSlot != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehId);
            if (DrivePath != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(DrivePath);
            if (TargetParkingSlot != null)
                hash ^= TargetParkingSlot.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ParkingGuide";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehId.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.DrivePath == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    for (int i2 = 0; i2 < this.DrivePath.Count; i2++)
                    {
                        try {
                            if (this.DrivePath[i2] < 0)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.DrivePath[i2] > 65535)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "int", "#" + i2.ToString(), "PAMNodeID", false); throw;
                        }
                    }
                    if (this.DrivePath.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.DrivePath.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivePath", "DrivePathType", "drivePath", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.TargetParkingSlot != null) {
                        if (this.TargetParkingSlot.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TargetParkingSlot.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetParkingSlot.Value", "int", "targetParkingSlot", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingGuide", null, "ParkingGuide", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ParkingGuide obj0 = new ParkingGuide();
            {
                obj0.VehId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehId);
            }
            {
                DrivePathType seqof1 = this.DrivePath;
                DrivePathType data1 = null;
                if (seqof1 != null) {
                    data1 = new DrivePathType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(seqof1[i1]);
                    }
                }
                obj0.DrivePath = data1;
            }
            {
                obj0.TargetParkingSlot = this.TargetParkingSlot;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehId ");
                    if (this.VehId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehId);
                    }
                }
                {
                    DrivePathType data1 = this.DrivePath;

                    prt.WriteLine(",");
                    prt.Write("drivePath ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            prt.WriteLine();
                            prt.Write(data1[i2]);
                        }
                        prt.EndConstructedValue();
                    }
                }
                {
                    int? data1 = this.TargetParkingSlot;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetParkingSlot ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TargetParkingSlot != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeOctetString(this.VehId, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                try {
                    DrivePathType seqof1 = this.DrivePath;
                    int i1 = 0;
                    if (seqof1.Count < 1 || seqof1.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + seqof1.Count);
                    enc.EncodeConstrainedLength(this.DrivePath.Count, 1, 32);
                    for (i1 = 0; i1 < seqof1.Count; i1++)
                    {
                        try {
                            if (enc.BitCount(seqof1[i1] - 0) > 16 || seqof1[i1] < 0)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + seqof1[i1]);
                            enc.EncodeConstrainedInteger((seqof1[i1] - (0)), 16);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "int", "#" + i1.ToString(), "PAMNodeID", false); throw;
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivePath", "DrivePathType", "drivePath", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.TargetParkingSlot != null)
                    {
                        if (enc.BitCount(this.TargetParkingSlot.Value - 0) > 16 || this.TargetParkingSlot.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TargetParkingSlot.Value);
                        enc.EncodeConstrainedInteger((this.TargetParkingSlot.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetParkingSlot.Value", "int", "targetParkingSlot", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingGuide", null, "ParkingGuide", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.VehId = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                try {
                    DrivePathType data1 = new DrivePathType();
                    int i1 = 0;
                    int fragcount1 = 0;
                    int fraglast1 = 65536;
                    while (true)
                    {
                        fragcount1 = dec.DecodeConstrainedLength(1, 32, ref fraglast1);
                        for (i1 = 0; i1 < fragcount1; i1++)
                        {
                            try {
                                data1.Add(dec.DecodeConstrainedInteger(16, 0));
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "int", "#" + data1.Count.ToString(), "PAMNodeID", false); throw;
                            }
                        }
                        if (fraglast1 < 0)
                            break;
                        fraglast1 = fragcount1;
                    }
                    this.DrivePath = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivePath", "DrivePathType", "drivePath", "SEQUENCE OF", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TargetParkingSlot = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetParkingSlot", "int", "targetParkingSlot", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.TargetParkingSlot = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ParkingGuide", null, "ParkingGuide", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PlatooningManagementMessage' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PlatooningManagementMessage : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'pid'</summary>
        public byte[] Pid { get; set; }
        /// <summary>Field 'role'</summary>
        public RoleInPlatooning Role { get; set; }
        /// <summary>Field 'status'</summary>
        public StatusInPlatooning Status { get; set; }
        /// <summary>Field 'leadingExt'</summary>
        public MemberManagement LeadingExt { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PlatooningManagementMessage that = right as PlatooningManagementMessage;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (Pid != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Pid, that.Pid))
                    return false;
            } else if (that.Pid != null)
                return false;
            if (Role != that.Role)
                return false;
            if (Status != that.Status)
                return false;
            if (LeadingExt != null) {
                if (!LeadingExt.Equals(that.LeadingExt))
                    return false;
            } else if (that.LeadingExt != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= SecMark.GetHashCode();
            if (Pid != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Pid);
            hash ^= Role.GetHashCode();
            hash ^= Status.GetHashCode();
            if (LeadingExt != null)
                hash ^= LeadingExt.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PlatooningManagementMessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.Pid == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Pid.Length != 17)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "byte[]", "pid", "OCTET STRING", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Role", "RoleInPlatooning", "role", "RoleInPlatooning", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "StatusInPlatooning", "status", "StatusInPlatooning", false); throw;
                }
                try {
                    if (this.LeadingExt != null) {
                        this.LeadingExt.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeadingExt", "MemberManagement", "leadingExt", "MemberManagement", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlatooningManagementMessage", null, "PlatooningManagementMessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PlatooningManagementMessage obj0 = new PlatooningManagementMessage();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.Pid = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Pid);
            }
            {
                obj0.Role = this.Role;
            }
            {
                obj0.Status = this.Status;
            }
            {
                obj0.LeadingExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.LeadingExt);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pid ");
                    if (this.Pid == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Pid);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("role ");
                    switch (this.Role) {
                    case RoleInPlatooning.Leader:
                        prt.Write("leader");
                        break;
                    case RoleInPlatooning.Follower:
                        prt.Write("follower");
                        break;
                    case RoleInPlatooning.Tail:
                        prt.Write("tail");
                        break;
                    case RoleInPlatooning.FreeVehicle:
                        prt.Write("free-vehicle");
                        break;
                    default:
                        prt.Write((int)this.Role);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("status ");
                    switch (this.Status) {
                    case StatusInPlatooning.Navigating:
                        prt.Write("navigating");
                        break;
                    case StatusInPlatooning.BeginToDissmiss:
                        prt.Write("beginToDissmiss");
                        break;
                    case StatusInPlatooning.AskForJoining:
                        prt.Write("askForJoining");
                        break;
                    case StatusInPlatooning.Joining:
                        prt.Write("joining");
                        break;
                    case StatusInPlatooning.Following:
                        prt.Write("following");
                        break;
                    case StatusInPlatooning.AskForLeaving:
                        prt.Write("askForLeaving");
                        break;
                    case StatusInPlatooning.Leaving:
                        prt.Write("leaving");
                        break;
                    default:
                        prt.Write((int)this.Status);
                        break;
                    }
                }
                {
                    MemberManagement data1 = this.LeadingExt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("leadingExt ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.LeadingExt != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Pid, 17);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "byte[]", "pid", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Role, _InternalMetadata.PerCodecMetaData.SortedEnum23, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum23);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Role", "RoleInPlatooning", "role", "RoleInPlatooning", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Status, _InternalMetadata.PerCodecMetaData.SortedEnum24, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum24);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "StatusInPlatooning", "status", "StatusInPlatooning", false); throw;
                }
                try {
                    MemberManagement data1 = this.LeadingExt;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeadingExt", "MemberManagement", "leadingExt", "MemberManagement", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlatooningManagementMessage", null, "PlatooningManagementMessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    this.Pid = dec.DecodeOctetString(17);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "byte[]", "pid", "OCTET STRING", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum23, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum23, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum23);
                    this.Role = (RoleInPlatooning)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Role", "RoleInPlatooning", "role", "RoleInPlatooning", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum24, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum24, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum24);
                    this.Status = (StatusInPlatooning)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "StatusInPlatooning", "status", "StatusInPlatooning", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MemberManagement data1 = new MemberManagement();

                        dec.DecodeType(data1);
                        this.LeadingExt = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LeadingExt", "MemberManagement", "leadingExt", "MemberManagement", false); throw;
                    }
                }
                else
                {
                    this.LeadingExt = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlatooningManagementMessage", null, "PlatooningManagementMessage", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RoleInPlatooning' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum RoleInPlatooning
    {
        Leader = 0,
        Follower = 1,
        Tail = 2,
        FreeVehicle = 3
    }
    /// <summary>
    /// Represents schema type 'StatusInPlatooning' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum StatusInPlatooning
    {
        Navigating = 0,
        BeginToDissmiss = 1,
        AskForJoining = 2,
        Joining = 3,
        Following = 4,
        AskForLeaving = 5,
        Leaving = 6
    }
    /// <summary>
    /// Represents schema type 'MemberManagement' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MemberManagement : Oss.Asn1.BaseType
    {
        /// <summary>Field 'memberList'</summary>
        public MsgFrame.MemberList MemberList { get; set; }
        /// <summary>Field 'joiningList'</summary>
        public MsgFrame.MemberList JoiningList { get; set; }
        /// <summary>Field 'leavingList'</summary>
        public MsgFrame.MemberList LeavingList { get; set; }
        /// <summary>Field 'capacity'</summary>
        public int Capacity { get; set; }
        /// <summary>Field 'openToJoin'</summary>
        public bool OpenToJoin { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MemberManagement that = right as MemberManagement;
            if (MemberList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(MemberList, that.MemberList))
                    return false;
            } else if (that.MemberList != null)
                return false;
            if (JoiningList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(JoiningList, that.JoiningList))
                    return false;
            } else if (that.JoiningList != null)
                return false;
            if (LeavingList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(LeavingList, that.LeavingList))
                    return false;
            } else if (that.LeavingList != null)
                return false;
            if (Capacity != that.Capacity)
                return false;
            if (OpenToJoin != that.OpenToJoin)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (MemberList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(MemberList);
            if (JoiningList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(JoiningList);
            if (LeavingList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(LeavingList);
            hash ^= Capacity.GetHashCode();
            hash ^= OpenToJoin.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MemberManagement";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MemberList == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.MemberList.Validate();
                    if (this.MemberList.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.MemberList.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MemberList", "MsgFrame.MemberList", "memberList", "MemberList", false); throw;
                }
                try {
                    if (this.JoiningList != null) {
                        this.JoiningList.Validate();
                        if (this.JoiningList.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.JoiningList.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "JoiningList", "MsgFrame.MemberList", "joiningList", "MemberList", false); throw;
                }
                try {
                    if (this.LeavingList != null) {
                        this.LeavingList.Validate();
                        if (this.LeavingList.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.LeavingList.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeavingList", "MsgFrame.MemberList", "leavingList", "MemberList", false); throw;
                }
                try {
                    if (this.Capacity < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Capacity > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Capacity", "int", "capacity", "INTEGER", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OpenToJoin", "bool", "openToJoin", "BOOLEAN", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberManagement", null, "MemberManagement", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MemberManagement obj0 = new MemberManagement();
            {
                obj0.MemberList = this.MemberList == null ? null : (MsgFrame.MemberList)this.MemberList.Copy();
            }
            {
                obj0.JoiningList = this.JoiningList == null ? null : (MsgFrame.MemberList)this.JoiningList.Copy();
            }
            {
                obj0.LeavingList = this.LeavingList == null ? null : (MsgFrame.MemberList)this.LeavingList.Copy();
            }
            {
                obj0.Capacity = this.Capacity;
            }
            {
                obj0.OpenToJoin = this.OpenToJoin;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("memberList ");
                    if (this.MemberList == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.MemberList.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MsgFrame.MemberList data1 = this.JoiningList;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("joiningList ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MsgFrame.MemberList data1 = this.LeavingList;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("leavingList ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("capacity ");
                    prt.Write(this.Capacity);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("openToJoin ");
                    prt.Write(this.OpenToJoin ? "TRUE" : "FALSE");
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.JoiningList != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.LeavingList != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    this.MemberList.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MemberList", "MsgFrame.MemberList", "memberList", "MemberList", false); throw;
                }
                try {
                    if (this.JoiningList != null)
                    {
                        this.JoiningList.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "JoiningList", "MsgFrame.MemberList", "joiningList", "MemberList", false); throw;
                }
                try {
                    if (this.LeavingList != null)
                    {
                        this.LeavingList.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeavingList", "MsgFrame.MemberList", "leavingList", "MemberList", false); throw;
                }
                try {
                    if (enc.BitCount(this.Capacity - 1) > 5 || this.Capacity < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Capacity);
                    enc.Output.Write5BitInt((this.Capacity - (1)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Capacity", "int", "capacity", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeBool(this.OpenToJoin);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OpenToJoin", "bool", "openToJoin", "BOOLEAN", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberManagement", null, "MemberManagement", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    MsgFrame.MemberList data1 = new MsgFrame.MemberList();

                    data1.DecodePer(dec);
                    this.MemberList = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MemberList", "MsgFrame.MemberList", "memberList", "MemberList", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.MemberList data1 = new MsgFrame.MemberList();

                        data1.DecodePer(dec);
                        this.JoiningList = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "JoiningList", "MsgFrame.MemberList", "joiningList", "MemberList", false); throw;
                    }
                }
                else
                {
                    this.JoiningList = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.MemberList data1 = new MsgFrame.MemberList();

                        data1.DecodePer(dec);
                        this.LeavingList = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LeavingList", "MsgFrame.MemberList", "leavingList", "MemberList", false); throw;
                    }
                }
                else
                {
                    this.LeavingList = null;
                }
                try {
                    this.Capacity = 1 + dec.Input.Read5BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Capacity", "int", "capacity", "INTEGER", false); throw;
                }
                try {
                    this.OpenToJoin = dec.DecodeBool();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OpenToJoin", "bool", "openToJoin", "BOOLEAN", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberManagement", null, "MemberManagement", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MemberList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class MemberList : System.Collections.Generic.List<MemberNode>
    {
        /// <summary>
        /// Initializes a new instance of the MemberList class that is empty and has the default initial capacity.
        /// </summary>
        public MemberList() : base() {}
        /// <summary>
        /// Initializes a new instance of the MemberList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new MemberList.</param>
        /// </summary>
        public MemberList(System.Collections.Generic.IEnumerable<MemberNode> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the MemberList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new MemberList can initially store.</param>
        /// </summary>
        public MemberList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MemberList that = right as MemberList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "MemberNode", "#" + i1.ToString(), "MemberNode", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberList", null, "MemberList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            MemberList obj0 = new MemberList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 32)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 32);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "MemberNode", "#" + i0.ToString(), "MemberNode", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberList", null, "MemberList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 32, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            MemberNode data1 = new MemberNode();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "MemberNode", "#" + this.Count.ToString(), "MemberNode", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberList", null, "MemberList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MemberNode' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MemberNode : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vid'</summary>
        public byte[] Vid { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MemberNode that = right as MemberNode;
            if (Vid != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Vid, that.Vid))
                    return false;
            } else if (that.Vid != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Vid != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Vid);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MemberNode";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Vid == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Vid.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vid", "byte[]", "vid", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberNode", null, "MemberNode", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MemberNode obj0 = new MemberNode();
            {
                obj0.Vid = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Vid);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vid ");
                    if (this.Vid == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Vid);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeOctetString(this.Vid, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vid", "byte[]", "vid", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberNode", null, "MemberNode", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Vid = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Vid", "byte[]", "vid", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MemberNode", null, "MemberNode", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PersonalSafetyMessage' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PersonalSafetyMessage : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'timeConfidence'</summary>
        public MsgFrame.TimeConfidence? TimeConfidence { get; set; }
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }
        /// <summary>Field 'posAccuracy'</summary>
        public PositionConfidenceSet PosAccuracy { get; set; }
        /// <summary>Field 'speed'</summary>
        public int Speed { get; set; }
        /// <summary>Field 'heading'</summary>
        public int Heading { get; set; }
        /// <summary>Field 'accelSet'</summary>
        public AccelerationSet4Way AccelSet { get; set; }
        /// <summary>Field 'pathHistory'</summary>
        public MsgFrame.PathHistory PathHistory { get; set; }
        /// <summary>Field 'path-Planning'</summary>
        public MsgFrame.PathPlanning PathPlanning { get; set; }
        /// <summary>Field 'overallRadius'</summary>
        public int OverallRadius { get; set; }
        /// <summary>Field 'non-motorData'</summary>
        public MsgFrame.NonMotorData NonMotorData { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PersonalSafetyMessage that = right as PersonalSafetyMessage;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (TimeConfidence != null) {
                if (TimeConfidence != that.TimeConfidence)
                    return false;
            } else if (that.TimeConfidence != null)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (PosAccuracy != null) {
                if (!PosAccuracy.Equals(that.PosAccuracy))
                    return false;
            } else if (that.PosAccuracy != null)
                return false;
            if (Speed != that.Speed)
                return false;
            if (Heading != that.Heading)
                return false;
            if (AccelSet != null) {
                if (!AccelSet.Equals(that.AccelSet))
                    return false;
            } else if (that.AccelSet != null)
                return false;
            if (PathHistory != null) {
                if (!PathHistory.Equals(that.PathHistory))
                    return false;
            } else if (that.PathHistory != null)
                return false;
            if (PathPlanning != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PathPlanning, that.PathPlanning))
                    return false;
            } else if (that.PathPlanning != null)
                return false;
            if (OverallRadius != that.OverallRadius)
                return false;
            if (NonMotorData != null) {
                if (!NonMotorData.Equals(that.NonMotorData))
                    return false;
            } else if (that.NonMotorData != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= SecMark.GetHashCode();
            if (TimeConfidence != null)
                hash ^= TimeConfidence.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (PosAccuracy != null)
                hash ^= PosAccuracy.GetHashCode();
            hash ^= Speed.GetHashCode();
            hash ^= Heading.GetHashCode();
            if (AccelSet != null)
                hash ^= AccelSet.GetHashCode();
            if (PathHistory != null)
                hash ^= PathHistory.GetHashCode();
            if (PathPlanning != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PathPlanning);
            hash ^= OverallRadius.GetHashCode();
            if (NonMotorData != null)
                hash ^= NonMotorData.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PersonalSafetyMessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.TimeConfidence != null) {
                        switch (this.TimeConfidence.Value)
                        {
                            case MsgFrame.TimeConfidence.Unavailable:
                            case MsgFrame.TimeConfidence.Time100000:
                            case MsgFrame.TimeConfidence.Time050000:
                            case MsgFrame.TimeConfidence.Time020000:
                            case MsgFrame.TimeConfidence.Time010000:
                            case MsgFrame.TimeConfidence.Time002000:
                            case MsgFrame.TimeConfidence.Time001000:
                            case MsgFrame.TimeConfidence.Time000500:
                            case MsgFrame.TimeConfidence.Time000200:
                            case MsgFrame.TimeConfidence.Time000100:
                            case MsgFrame.TimeConfidence.Time000050:
                            case MsgFrame.TimeConfidence.Time000020:
                            case MsgFrame.TimeConfidence.Time000010:
                            case MsgFrame.TimeConfidence.Time000005:
                            case MsgFrame.TimeConfidence.Time000002:
                            case MsgFrame.TimeConfidence.Time000001:
                            case MsgFrame.TimeConfidence.Time0000005:
                            case MsgFrame.TimeConfidence.Time0000002:
                            case MsgFrame.TimeConfidence.Time0000001:
                            case MsgFrame.TimeConfidence.Time00000005:
                            case MsgFrame.TimeConfidence.Time00000002:
                            case MsgFrame.TimeConfidence.Time00000001:
                            case MsgFrame.TimeConfidence.Time000000005:
                            case MsgFrame.TimeConfidence.Time000000002:
                            case MsgFrame.TimeConfidence.Time000000001:
                            case MsgFrame.TimeConfidence.Time0000000005:
                            case MsgFrame.TimeConfidence.Time0000000002:
                            case MsgFrame.TimeConfidence.Time0000000001:
                            case MsgFrame.TimeConfidence.Time00000000005:
                            case MsgFrame.TimeConfidence.Time00000000002:
                            case MsgFrame.TimeConfidence.Time00000000001:
                            case MsgFrame.TimeConfidence.Time000000000005:
                            case MsgFrame.TimeConfidence.Time000000000002:
                            case MsgFrame.TimeConfidence.Time000000000001:
                            case MsgFrame.TimeConfidence.Time0000000000005:
                            case MsgFrame.TimeConfidence.Time0000000000002:
                            case MsgFrame.TimeConfidence.Time0000000000001:
                            case MsgFrame.TimeConfidence.Time00000000000005:
                            case MsgFrame.TimeConfidence.Time00000000000002:
                            case MsgFrame.TimeConfidence.Time00000000000001:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.PosAccuracy == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PosAccuracy.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Speed > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Heading > 28800)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.AccelSet != null) {
                        this.AccelSet.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.PathHistory != null) {
                        this.PathHistory.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    if (this.PathPlanning != null) {
                        this.PathPlanning.Validate();
                        if (this.PathPlanning.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PathPlanning.Count > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                }
                try {
                    if (this.OverallRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.OverallRadius > 200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    if (this.NonMotorData == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.NonMotorData.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalSafetyMessage", null, "PersonalSafetyMessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PersonalSafetyMessage obj0 = new PersonalSafetyMessage();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.TimeConfidence = this.TimeConfidence;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.PosAccuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosAccuracy);
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.AccelSet = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccelSet);
            }
            {
                obj0.PathHistory = Oss.Asn1.Internal.CopyUtil.CopyType(this.PathHistory);
            }
            {
                obj0.PathPlanning = this.PathPlanning == null ? null : (MsgFrame.PathPlanning)this.PathPlanning.Copy();
            }
            {
                obj0.OverallRadius = this.OverallRadius;
            }
            {
                obj0.NonMotorData = Oss.Asn1.Internal.CopyUtil.CopyType(this.NonMotorData);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    MsgFrame.TimeConfidence? data1 = this.TimeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeConfidence ");
                        switch (data1.Value) {
                        case MsgFrame.TimeConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case MsgFrame.TimeConfidence.Time100000:
                            prt.Write("time-100-000");
                            break;
                        case MsgFrame.TimeConfidence.Time050000:
                            prt.Write("time-050-000");
                            break;
                        case MsgFrame.TimeConfidence.Time020000:
                            prt.Write("time-020-000");
                            break;
                        case MsgFrame.TimeConfidence.Time010000:
                            prt.Write("time-010-000");
                            break;
                        case MsgFrame.TimeConfidence.Time002000:
                            prt.Write("time-002-000");
                            break;
                        case MsgFrame.TimeConfidence.Time001000:
                            prt.Write("time-001-000");
                            break;
                        case MsgFrame.TimeConfidence.Time000500:
                            prt.Write("time-000-500");
                            break;
                        case MsgFrame.TimeConfidence.Time000200:
                            prt.Write("time-000-200");
                            break;
                        case MsgFrame.TimeConfidence.Time000100:
                            prt.Write("time-000-100");
                            break;
                        case MsgFrame.TimeConfidence.Time000050:
                            prt.Write("time-000-050");
                            break;
                        case MsgFrame.TimeConfidence.Time000020:
                            prt.Write("time-000-020");
                            break;
                        case MsgFrame.TimeConfidence.Time000010:
                            prt.Write("time-000-010");
                            break;
                        case MsgFrame.TimeConfidence.Time000005:
                            prt.Write("time-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000002:
                            prt.Write("time-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000001:
                            prt.Write("time-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000005:
                            prt.Write("time-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000002:
                            prt.Write("time-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000001:
                            prt.Write("time-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000005:
                            prt.Write("time-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000002:
                            prt.Write("time-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000001:
                            prt.Write("time-000-000-01");
                            break;
                        case MsgFrame.TimeConfidence.Time000000005:
                            prt.Write("time-000-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000000002:
                            prt.Write("time-000-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000000001:
                            prt.Write("time-000-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000005:
                            prt.Write("time-000-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000002:
                            prt.Write("time-000-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000001:
                            prt.Write("time-000-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000005:
                            prt.Write("time-000-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000002:
                            prt.Write("time-000-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000001:
                            prt.Write("time-000-000-000-01");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000005:
                            prt.Write("time-000-000-000-005");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000002:
                            prt.Write("time-000-000-000-002");
                            break;
                        case MsgFrame.TimeConfidence.Time000000000001:
                            prt.Write("time-000-000-000-001");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000005:
                            prt.Write("time-000-000-000-000-5");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000002:
                            prt.Write("time-000-000-000-000-2");
                            break;
                        case MsgFrame.TimeConfidence.Time0000000000001:
                            prt.Write("time-000-000-000-000-1");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000005:
                            prt.Write("time-000-000-000-000-05");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000002:
                            prt.Write("time-000-000-000-000-02");
                            break;
                        case MsgFrame.TimeConfidence.Time00000000000001:
                            prt.Write("time-000-000-000-000-01");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("posAccuracy ");
                    if (this.PosAccuracy == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.PosAccuracy);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("speed ");
                    prt.Write(this.Speed);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("heading ");
                    prt.Write(this.Heading);
                }
                {
                    AccelerationSet4Way data1 = this.AccelSet;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("accelSet ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PathHistory data1 = this.PathHistory;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("pathHistory ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PathPlanning data1 = this.PathPlanning;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("path-Planning ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("overallRadius ");
                    prt.Write(this.OverallRadius);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("non-motorData ");
                    if (this.NonMotorData == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.NonMotorData);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TimeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.AccelSet != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.PathHistory != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.PathPlanning != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.TimeConfidence != null)
                    {
                        enc.EncodeEnum((int)this.TimeConfidence.Value, _InternalMetadata.PerCodecMetaData.SortedEnum12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    enc.EncodeType(this.PosAccuracy);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (enc.BitCount(this.Speed - 0) > 13 || this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed);
                    enc.EncodeConstrainedInteger((this.Speed - (0)), 13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (enc.BitCount(this.Heading - 0) > 15 || this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading);
                    enc.EncodeConstrainedInteger((this.Heading - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.AccelSet != null)
                    {
                        enc.EncodeType(this.AccelSet);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.PathHistory != null)
                    {
                        enc.EncodeType(this.PathHistory);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    if (this.PathPlanning != null)
                    {
                        this.PathPlanning.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                }
                try {
                    if (enc.BitCount(this.OverallRadius - 0) > 8 || this.OverallRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.OverallRadius);
                    enc.Output.Write8BitInt((this.OverallRadius - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeType(this.NonMotorData);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalSafetyMessage", null, "PersonalSafetyMessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TimeConfidence = (MsgFrame.TimeConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum12);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence", "MsgFrame.TimeConfidence", "timeConfidence", "TimeConfidence", false); throw;
                    }
                }
                else
                {
                    this.TimeConfidence = null;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    PositionConfidenceSet data1 = new PositionConfidenceSet();

                    dec.DecodeType(data1);
                    this.PosAccuracy = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    this.Speed = dec.DecodeConstrainedInteger(13, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    this.Heading = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        AccelerationSet4Way data1 = new AccelerationSet4Way();

                        dec.DecodeType(data1);
                        this.AccelSet = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                    }
                }
                else
                {
                    this.AccelSet = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.PathHistory data1 = new MsgFrame.PathHistory();

                        dec.DecodeType(data1);
                        this.PathHistory = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                    }
                }
                else
                {
                    this.PathHistory = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        MsgFrame.PathPlanning data1 = new MsgFrame.PathPlanning();

                        data1.DecodePer(dec);
                        this.PathPlanning = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                    }
                }
                else
                {
                    this.PathPlanning = null;
                }
                try {
                    this.OverallRadius = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    MsgFrame.NonMotorData data1 = new MsgFrame.NonMotorData();

                    dec.DecodeType(data1);
                    this.NonMotorData = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalSafetyMessage", null, "PersonalSafetyMessage", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PathPlanning' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PathPlanning : System.Collections.Generic.List<PathPlanningPoint>
    {
        /// <summary>
        /// Initializes a new instance of the PathPlanning class that is empty and has the default initial capacity.
        /// </summary>
        public PathPlanning() : base() {}
        /// <summary>
        /// Initializes a new instance of the PathPlanning class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PathPlanning.</param>
        /// </summary>
        public PathPlanning(System.Collections.Generic.IEnumerable<PathPlanningPoint> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PathPlanning class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PathPlanning can initially store.</param>
        /// </summary>
        public PathPlanning(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathPlanning that = right as PathPlanning;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "PathPlanningPoint", "#" + i1.ToString(), "PathPlanningPoint", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 100)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanning", null, "PathPlanning", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PathPlanning obj0 = new PathPlanning();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 100)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 100);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "PathPlanningPoint", "#" + i0.ToString(), "PathPlanningPoint", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanning", null, "PathPlanning", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 100, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            PathPlanningPoint data1 = new PathPlanningPoint();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "PathPlanningPoint", "#" + this.Count.ToString(), "PathPlanningPoint", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanning", null, "PathPlanning", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PathPlanningPoint' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PathPlanningPoint : Oss.Asn1.BaseType
    {
        /// <summary>Field 'posInMap'</summary>
        public ReferenceLink PosInMap { get; set; }
        /// <summary>Field 'pos'</summary>
        public PositionOffsetLLV Pos { get; set; }
        /// <summary>Field 'posAccuracy'</summary>
        public PositionConfidenceSet PosAccuracy { get; set; }
        /// <summary>Field 'speed'</summary>
        public int? Speed { get; set; }
        /// <summary>Field 'speedCfd'</summary>
        public SpeedConfidence? SpeedCfd { get; set; }
        /// <summary>Field 'heading'</summary>
        public int? Heading { get; set; }
        /// <summary>Field 'headingCfd'</summary>
        public HeadingConfidence? HeadingCfd { get; set; }
        /// <summary>Field 'accelSet'</summary>
        public AccelerationSet4Way AccelSet { get; set; }
        /// <summary>Field 'acc4WayConfidence'</summary>
        public AccSet4WayConfidence Acc4WayConfidence { get; set; }
        /// <summary>Field 'estimatedTime'</summary>
        public int? EstimatedTime { get; set; }
        /// <summary>Field 'timeConfidence'</summary>
        public int? TimeConfidence { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PathPlanningPoint that = right as PathPlanningPoint;
            if (PosInMap != null) {
                if (!PosInMap.Equals(that.PosInMap))
                    return false;
            } else if (that.PosInMap != null)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (PosAccuracy != null) {
                if (!PosAccuracy.Equals(that.PosAccuracy))
                    return false;
            } else if (that.PosAccuracy != null)
                return false;
            if (Speed != null) {
                if (Speed != that.Speed)
                    return false;
            } else if (that.Speed != null)
                return false;
            if (SpeedCfd != null) {
                if (SpeedCfd != that.SpeedCfd)
                    return false;
            } else if (that.SpeedCfd != null)
                return false;
            if (Heading != null) {
                if (Heading != that.Heading)
                    return false;
            } else if (that.Heading != null)
                return false;
            if (HeadingCfd != null) {
                if (HeadingCfd != that.HeadingCfd)
                    return false;
            } else if (that.HeadingCfd != null)
                return false;
            if (AccelSet != null) {
                if (!AccelSet.Equals(that.AccelSet))
                    return false;
            } else if (that.AccelSet != null)
                return false;
            if (Acc4WayConfidence != null) {
                if (!Acc4WayConfidence.Equals(that.Acc4WayConfidence))
                    return false;
            } else if (that.Acc4WayConfidence != null)
                return false;
            if (EstimatedTime != null) {
                if (EstimatedTime != that.EstimatedTime)
                    return false;
            } else if (that.EstimatedTime != null)
                return false;
            if (TimeConfidence != null) {
                if (TimeConfidence != that.TimeConfidence)
                    return false;
            } else if (that.TimeConfidence != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (PosInMap != null)
                hash ^= PosInMap.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (PosAccuracy != null)
                hash ^= PosAccuracy.GetHashCode();
            if (Speed != null)
                hash ^= Speed.GetHashCode();
            if (SpeedCfd != null)
                hash ^= SpeedCfd.GetHashCode();
            if (Heading != null)
                hash ^= Heading.GetHashCode();
            if (HeadingCfd != null)
                hash ^= HeadingCfd.GetHashCode();
            if (AccelSet != null)
                hash ^= AccelSet.GetHashCode();
            if (Acc4WayConfidence != null)
                hash ^= Acc4WayConfidence.GetHashCode();
            if (EstimatedTime != null)
                hash ^= EstimatedTime.GetHashCode();
            if (TimeConfidence != null)
                hash ^= TimeConfidence.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PathPlanningPoint";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.PosInMap != null) {
                        this.PosInMap.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosInMap", "ReferenceLink", "posInMap", "ReferenceLink", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.PosAccuracy != null) {
                        this.PosAccuracy.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Speed != null) {
                        if (this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Speed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.SpeedCfd != null) {
                        switch (this.SpeedCfd.Value)
                        {
                            case SpeedConfidence.Unavailable:
                            case SpeedConfidence.Prec100ms:
                            case SpeedConfidence.Prec10ms:
                            case SpeedConfidence.Prec5ms:
                            case SpeedConfidence.Prec1ms:
                            case SpeedConfidence.Prec01ms:
                            case SpeedConfidence.Prec005ms:
                            case SpeedConfidence.Prec001ms:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.Heading != null) {
                        if (this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Heading.Value > 28800)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.HeadingCfd != null) {
                        switch (this.HeadingCfd.Value)
                        {
                            case HeadingConfidence.Unavailable:
                            case HeadingConfidence.Precl0deg:
                            case HeadingConfidence.Prec05deg:
                            case HeadingConfidence.Prec0ldegId0:
                            case HeadingConfidence.Prec0LdegId:
                            case HeadingConfidence.Prec005deg:
                            case HeadingConfidence.PrecO0ldeg:
                            case HeadingConfidence.Prec00125deg:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.AccelSet != null) {
                        this.AccelSet.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.Acc4WayConfidence != null) {
                        this.Acc4WayConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                }
                try {
                    if (this.EstimatedTime != null) {
                        if (this.EstimatedTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.EstimatedTime.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedTime.Value", "int", "estimatedTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.TimeConfidence != null) {
                        if (this.TimeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "int", "timeConfidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanningPoint", null, "PathPlanningPoint", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PathPlanningPoint obj0 = new PathPlanningPoint();
            {
                obj0.PosInMap = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosInMap);
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.PosAccuracy = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosAccuracy);
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.SpeedCfd = this.SpeedCfd;
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.HeadingCfd = this.HeadingCfd;
            }
            {
                obj0.AccelSet = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccelSet);
            }
            {
                obj0.Acc4WayConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.Acc4WayConfidence);
            }
            {
                obj0.EstimatedTime = this.EstimatedTime;
            }
            {
                obj0.TimeConfidence = this.TimeConfidence;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    ReferenceLink data1 = this.PosInMap;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("posInMap ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(first0 ? "" : ",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    PositionConfidenceSet data1 = this.PosAccuracy;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("posAccuracy ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.Speed;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speed ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    SpeedConfidence? data1 = this.SpeedCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedCfd ");
                        switch (data1.Value) {
                        case SpeedConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SpeedConfidence.Prec100ms:
                            prt.Write("prec100ms");
                            break;
                        case SpeedConfidence.Prec10ms:
                            prt.Write("prec10ms");
                            break;
                        case SpeedConfidence.Prec5ms:
                            prt.Write("prec5ms");
                            break;
                        case SpeedConfidence.Prec1ms:
                            prt.Write("prec1ms");
                            break;
                        case SpeedConfidence.Prec01ms:
                            prt.Write("prec0-1ms");
                            break;
                        case SpeedConfidence.Prec005ms:
                            prt.Write("prec0-05ms");
                            break;
                        case SpeedConfidence.Prec001ms:
                            prt.Write("prec0-01ms");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    int? data1 = this.Heading;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("heading ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    HeadingConfidence? data1 = this.HeadingCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("headingCfd ");
                        switch (data1.Value) {
                        case HeadingConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case HeadingConfidence.Precl0deg:
                            prt.Write("precl0deg");
                            break;
                        case HeadingConfidence.Prec05deg:
                            prt.Write("prec05deg");
                            break;
                        case HeadingConfidence.Prec0ldegId0:
                            prt.Write("prec0ldeg");
                            break;
                        case HeadingConfidence.Prec0LdegId:
                            prt.Write("prec0-ldeg");
                            break;
                        case HeadingConfidence.Prec005deg:
                            prt.Write("prec0-05deg");
                            break;
                        case HeadingConfidence.PrecO0ldeg:
                            prt.Write("precO-0ldeg");
                            break;
                        case HeadingConfidence.Prec00125deg:
                            prt.Write("prec0-0125deg");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    AccelerationSet4Way data1 = this.AccelSet;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("accelSet ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    AccSet4WayConfidence data1 = this.Acc4WayConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("acc4WayConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.EstimatedTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("estimatedTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.TimeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[2];

                enc.Output.WriteBool(extPresent0);
                if (this.PosInMap != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PosAccuracy != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Speed != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.SpeedCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.Heading != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.HeadingCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.AccelSet != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.Acc4WayConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                if (this.EstimatedTime != null)
                    optMask0[1] |= (byte)(0x80 >> 0);
                if (this.TimeConfidence != null)
                    optMask0[1] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 10);
                try {
                    if (this.PosInMap != null)
                    {
                        enc.EncodeType(this.PosInMap);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosInMap", "ReferenceLink", "posInMap", "ReferenceLink", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.PosAccuracy != null)
                    {
                        enc.EncodeType(this.PosAccuracy);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Speed != null)
                    {
                        if (enc.BitCount(this.Speed.Value - 0) > 13 || this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed.Value);
                        enc.EncodeConstrainedInteger((this.Speed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.SpeedCfd != null)
                    {
                        enc.EncodeEnum((int)this.SpeedCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum3);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.Heading != null)
                    {
                        if (enc.BitCount(this.Heading.Value - 0) > 15 || this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading.Value);
                        enc.EncodeConstrainedInteger((this.Heading.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.HeadingCfd != null)
                    {
                        enc.EncodeEnum((int)this.HeadingCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.AccelSet != null)
                    {
                        enc.EncodeType(this.AccelSet);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.Acc4WayConfidence != null)
                    {
                        enc.EncodeType(this.Acc4WayConfidence);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                }
                try {
                    if (this.EstimatedTime != null)
                    {
                        if (enc.BitCount(this.EstimatedTime.Value - 1) > 16 || this.EstimatedTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EstimatedTime.Value);
                        enc.EncodeConstrainedInteger((this.EstimatedTime.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedTime.Value", "int", "estimatedTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.TimeConfidence != null)
                    {
                        if (enc.BitCount(this.TimeConfidence.Value - 0) > 8 || this.TimeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeConfidence.Value);
                        enc.Output.Write8BitInt((this.TimeConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence.Value", "int", "timeConfidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanningPoint", null, "PathPlanningPoint", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 11);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        ReferenceLink data1 = new ReferenceLink();

                        dec.DecodeType(data1);
                        this.PosInMap = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PosInMap", "ReferenceLink", "posInMap", "ReferenceLink", false); throw;
                    }
                }
                else
                {
                    this.PosInMap = null;
                }
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PositionConfidenceSet data1 = new PositionConfidenceSet();

                        dec.DecodeType(data1);
                        this.PosAccuracy = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PosAccuracy", "PositionConfidenceSet", "posAccuracy", "PositionConfidenceSet", false); throw;
                    }
                }
                else
                {
                    this.PosAccuracy = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Speed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.Speed = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.SpeedCfd = (SpeedConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum3);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                    }
                }
                else
                {
                    this.SpeedCfd = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.Heading = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                    }
                }
                else
                {
                    this.Heading = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        this.HeadingCfd = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                    }
                }
                else
                {
                    this.HeadingCfd = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        AccelerationSet4Way data1 = new AccelerationSet4Way();

                        dec.DecodeType(data1);
                        this.AccelSet = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                    }
                }
                else
                {
                    this.AccelSet = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        AccSet4WayConfidence data1 = new AccSet4WayConfidence();

                        dec.DecodeType(data1);
                        this.Acc4WayConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                    }
                }
                else
                {
                    this.Acc4WayConfidence = null;
                }
                if ((optMask0[1] & 0x40) != 0)
                {
                    try {
                        this.EstimatedTime = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedTime", "int", "estimatedTime", "TimeOffset", false); throw;
                    }
                }
                else
                {
                    this.EstimatedTime = null;
                }
                if ((optMask0[1] & 0x20) != 0)
                {
                    try {
                        this.TimeConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeConfidence", "int", "timeConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.TimeConfidence = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PathPlanningPoint", null, "PathPlanningPoint", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReferenceLink' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReferenceLink : Oss.Asn1.BaseType
    {
        /// <summary>Field 'upstreamNodeId'</summary>
        public NodeReferenceID UpstreamNodeId { get; set; }
        /// <summary>Field 'downstreamNodeId'</summary>
        public NodeReferenceID DownstreamNodeId { get; set; }
        /// <summary>Field 'referenceLanes'</summary>
        public Oss.Asn1.BitStringWithNamedBits ReferenceLanes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReferenceLink that = right as ReferenceLink;
            if (UpstreamNodeId != null) {
                if (!UpstreamNodeId.Equals(that.UpstreamNodeId))
                    return false;
            } else if (that.UpstreamNodeId != null)
                return false;
            if (DownstreamNodeId != null) {
                if (!DownstreamNodeId.Equals(that.DownstreamNodeId))
                    return false;
            } else if (that.DownstreamNodeId != null)
                return false;
            if (ReferenceLanes != null) {
                if (!ReferenceLanes.Equals(that.ReferenceLanes))
                    return false;
            } else if (that.ReferenceLanes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (UpstreamNodeId != null)
                hash ^= UpstreamNodeId.GetHashCode();
            if (DownstreamNodeId != null)
                hash ^= DownstreamNodeId.GetHashCode();
            if (ReferenceLanes != null)
                hash ^= ReferenceLanes.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ReferenceLink";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UpstreamNodeId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.UpstreamNodeId.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.DownstreamNodeId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.DownstreamNodeId.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNodeId", "NodeReferenceID", "downstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.ReferenceLanes != null) {
                        if (this.ReferenceLanes.Count != 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLanes", "Oss.Asn1.BitStringWithNamedBits", "referenceLanes", "ReferenceLanes", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLink", null, "ReferenceLink", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReferenceLink obj0 = new ReferenceLink();
            {
                obj0.UpstreamNodeId = Oss.Asn1.Internal.CopyUtil.CopyType(this.UpstreamNodeId);
            }
            {
                obj0.DownstreamNodeId = Oss.Asn1.Internal.CopyUtil.CopyType(this.DownstreamNodeId);
            }
            {
                obj0.ReferenceLanes = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.ReferenceLanes);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("upstreamNodeId ");
                    if (this.UpstreamNodeId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.UpstreamNodeId);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("downstreamNodeId ");
                    if (this.DownstreamNodeId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.DownstreamNodeId);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.ReferenceLanes;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("referenceLanes ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "reserved";
                                    case (int)1: return "lane1";
                                    case (int)2: return "lane2";
                                    case (int)3: return "lane3";
                                    case (int)4: return "lane4";
                                    case (int)5: return "lane5";
                                    case (int)6: return "lane6";
                                    case (int)7: return "lane7";
                                    case (int)8: return "lane8";
                                    case (int)9: return "lane9";
                                    case (int)10: return "lane10";
                                    case (int)11: return "lane11";
                                    case (int)12: return "lane12";
                                    case (int)13: return "lane13";
                                    case (int)14: return "lane14";
                                    case (int)15: return "lane15";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.ReferenceLanes != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeType(this.UpstreamNodeId);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    enc.EncodeType(this.DownstreamNodeId);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNodeId", "NodeReferenceID", "downstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.ReferenceLanes != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.ReferenceLanes.LastOneBitPos() + 1);
                        enc.EncodeBitStringWithNamedBits(this.ReferenceLanes, length1, 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLanes", "Oss.Asn1.BitStringWithNamedBits", "referenceLanes", "ReferenceLanes", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLink", null, "ReferenceLink", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.UpstreamNodeId = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNodeId", "NodeReferenceID", "upstreamNodeId", "NodeReferenceID", false); throw;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.DownstreamNodeId = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNodeId", "NodeReferenceID", "downstreamNodeId", "NodeReferenceID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.ReferenceLanes = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLanes", "Oss.Asn1.BitStringWithNamedBits", "referenceLanes", "ReferenceLanes", false); throw;
                    }
                }
                else
                {
                    this.ReferenceLanes = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLink", null, "ReferenceLink", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReferenceLanes' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum ReferenceLanes
    {
        Reserved = 0,
        Lane1 = 1,
        Lane2 = 2,
        Lane3 = 3,
        Lane4 = 4,
        Lane5 = 5,
        Lane6 = 6,
        Lane7 = 7,
        Lane8 = 8,
        Lane9 = 9,
        Lane10 = 10,
        Lane11 = 11,
        Lane12 = 12,
        Lane13 = 13,
        Lane14 = 14,
        Lane15 = 15
    }
    /// <summary>
    /// Represents schema type 'AccSet4WayConfidence' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AccSet4WayConfidence : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lonAccConfidence'</summary>
        public AccConfidence LonAccConfidence { get; set; }
        /// <summary>Field 'latAccConfidence'</summary>
        public AccConfidence LatAccConfidence { get; set; }
        /// <summary>Field 'vertAccConfidence'</summary>
        public AccConfidence VertAccConfidence { get; set; }
        /// <summary>Field 'yawRateCon'</summary>
        public AngularVConfidence YawRateCon { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AccSet4WayConfidence that = right as AccSet4WayConfidence;
            if (LonAccConfidence != that.LonAccConfidence)
                return false;
            if (LatAccConfidence != that.LatAccConfidence)
                return false;
            if (VertAccConfidence != that.VertAccConfidence)
                return false;
            if (YawRateCon != that.YawRateCon)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= LonAccConfidence.GetHashCode();
            hash ^= LatAccConfidence.GetHashCode();
            hash ^= VertAccConfidence.GetHashCode();
            hash ^= YawRateCon.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AccSet4WayConfidence";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.LonAccConfidence)
                    {
                        case AccConfidence.Unavailable:
                        case AccConfidence.Prec100deg:
                        case AccConfidence.Prec10deg:
                        case AccConfidence.Prec5deg:
                        case AccConfidence.Prec1deg:
                        case AccConfidence.Prec01deg:
                        case AccConfidence.Prec005deg:
                        case AccConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LonAccConfidence", "AccConfidence", "lonAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    switch (this.LatAccConfidence)
                    {
                        case AccConfidence.Unavailable:
                        case AccConfidence.Prec100deg:
                        case AccConfidence.Prec10deg:
                        case AccConfidence.Prec5deg:
                        case AccConfidence.Prec1deg:
                        case AccConfidence.Prec01deg:
                        case AccConfidence.Prec005deg:
                        case AccConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LatAccConfidence", "AccConfidence", "latAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    switch (this.VertAccConfidence)
                    {
                        case AccConfidence.Unavailable:
                        case AccConfidence.Prec100deg:
                        case AccConfidence.Prec10deg:
                        case AccConfidence.Prec5deg:
                        case AccConfidence.Prec1deg:
                        case AccConfidence.Prec01deg:
                        case AccConfidence.Prec005deg:
                        case AccConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VertAccConfidence", "AccConfidence", "vertAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    switch (this.YawRateCon)
                    {
                        case AngularVConfidence.Unavailable:
                        case AngularVConfidence.Prec100deg:
                        case AngularVConfidence.Prec10deg:
                        case AngularVConfidence.Prec5deg:
                        case AngularVConfidence.Prec1deg:
                        case AngularVConfidence.Prec01deg:
                        case AngularVConfidence.Prec005deg:
                        case AngularVConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRateCon", "AngularVConfidence", "yawRateCon", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccSet4WayConfidence", null, "AccSet4WayConfidence", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AccSet4WayConfidence obj0 = new AccSet4WayConfidence();
            {
                obj0.LonAccConfidence = this.LonAccConfidence;
            }
            {
                obj0.LatAccConfidence = this.LatAccConfidence;
            }
            {
                obj0.VertAccConfidence = this.VertAccConfidence;
            }
            {
                obj0.YawRateCon = this.YawRateCon;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("lonAccConfidence ");
                    switch (this.LonAccConfidence) {
                    case AccConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AccConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AccConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AccConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AccConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AccConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AccConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AccConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.LonAccConfidence);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("latAccConfidence ");
                    switch (this.LatAccConfidence) {
                    case AccConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AccConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AccConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AccConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AccConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AccConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AccConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AccConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.LatAccConfidence);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vertAccConfidence ");
                    switch (this.VertAccConfidence) {
                    case AccConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AccConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AccConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AccConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AccConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AccConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AccConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AccConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.VertAccConfidence);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yawRateCon ");
                    switch (this.YawRateCon) {
                    case AngularVConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AngularVConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AngularVConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AngularVConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AngularVConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AngularVConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AngularVConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AngularVConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.YawRateCon);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeEnum((int)this.LonAccConfidence, _InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LonAccConfidence", "AccConfidence", "lonAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.LatAccConfidence, _InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LatAccConfidence", "AccConfidence", "latAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.VertAccConfidence, _InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VertAccConfidence", "AccConfidence", "vertAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.YawRateCon, _InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRateCon", "AngularVConfidence", "yawRateCon", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccSet4WayConfidence", null, "AccSet4WayConfidence", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.LonAccConfidence = (AccConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LonAccConfidence", "AccConfidence", "lonAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    this.LatAccConfidence = (AccConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LatAccConfidence", "AccConfidence", "latAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    this.VertAccConfidence = (AccConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum25);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VertAccConfidence", "AccConfidence", "vertAccConfidence", "AccConfidence", false); throw;
                }
                try {
                    this.YawRateCon = (AngularVConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRateCon", "AngularVConfidence", "yawRateCon", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccSet4WayConfidence", null, "AccSet4WayConfidence", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AccConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AccConfidence
    {
        Unavailable = 0,
        Prec100deg = 1,
        Prec10deg = 2,
        Prec5deg = 3,
        Prec1deg = 4,
        Prec01deg = 5,
        Prec005deg = 6,
        Prec001deg = 7
    }
    /// <summary>
    /// Represents schema type 'AngularVConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AngularVConfidence
    {
        Unavailable = 0,
        Prec100deg = 1,
        Prec10deg = 2,
        Prec5deg = 3,
        Prec1deg = 4,
        Prec01deg = 5,
        Prec005deg = 6,
        Prec001deg = 7
    }
    /// <summary>
    /// Represents schema type 'Non-motorData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class NonMotorData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'basicType'</summary>
        public PersonalDeviceUserType BasicType { get; set; }
        /// <summary>Field 'propulsion'</summary>
        public PropelledInformation Propulsion { get; set; }
        /// <summary>Field 'clusterSize'</summary>
        public NumberOfParticipantsInCluster? ClusterSize { get; set; }
        /// <summary>Field 'attachment'</summary>
        public MsgFrame.Attachment? Attachment { get; set; }
        /// <summary>Field 'personalExt'</summary>
        public PersonalExtensions PersonalExt { get; set; }
        /// <summary>Field 'roadWorkerExt'</summary>
        public RoadWorkerExtensions RoadWorkerExt { get; set; }
        /// <summary>Field 'personalReq'</summary>
        public PersonalRequest PersonalReq { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            NonMotorData that = right as NonMotorData;
            if (BasicType != that.BasicType)
                return false;
            if (Propulsion != null) {
                if (!Propulsion.Equals(that.Propulsion))
                    return false;
            } else if (that.Propulsion != null)
                return false;
            if (ClusterSize != null) {
                if (ClusterSize != that.ClusterSize)
                    return false;
            } else if (that.ClusterSize != null)
                return false;
            if (Attachment != null) {
                if (Attachment != that.Attachment)
                    return false;
            } else if (that.Attachment != null)
                return false;
            if (PersonalExt != null) {
                if (!PersonalExt.Equals(that.PersonalExt))
                    return false;
            } else if (that.PersonalExt != null)
                return false;
            if (RoadWorkerExt != null) {
                if (!RoadWorkerExt.Equals(that.RoadWorkerExt))
                    return false;
            } else if (that.RoadWorkerExt != null)
                return false;
            if (PersonalReq != null) {
                if (!PersonalReq.Equals(that.PersonalReq))
                    return false;
            } else if (that.PersonalReq != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= BasicType.GetHashCode();
            if (Propulsion != null)
                hash ^= Propulsion.GetHashCode();
            if (ClusterSize != null)
                hash ^= ClusterSize.GetHashCode();
            if (Attachment != null)
                hash ^= Attachment.GetHashCode();
            if (PersonalExt != null)
                hash ^= PersonalExt.GetHashCode();
            if (RoadWorkerExt != null)
                hash ^= RoadWorkerExt.GetHashCode();
            if (PersonalReq != null)
                hash ^= PersonalReq.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Non-motorData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BasicType", "PersonalDeviceUserType", "basicType", "PersonalDeviceUserType", false); throw;
                }
                try {
                    if (this.Propulsion != null) {
                        this.Propulsion.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Propulsion", "PropelledInformation", "propulsion", "PropelledInformation", false); throw;
                }
                try {
                    if (this.ClusterSize != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ClusterSize.Value", "NumberOfParticipantsInCluster", "clusterSize", "NumberOfParticipantsInCluster", false); throw;
                }
                try {
                    if (this.Attachment != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Attachment.Value", "MsgFrame.Attachment", "attachment", "Attachment", false); throw;
                }
                try {
                    if (this.PersonalExt != null) {
                        this.PersonalExt.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalExt", "PersonalExtensions", "personalExt", "PersonalExtensions", false); throw;
                }
                try {
                    if (this.RoadWorkerExt != null) {
                        this.RoadWorkerExt.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RoadWorkerExt", "RoadWorkerExtensions", "roadWorkerExt", "RoadWorkerExtensions", false); throw;
                }
                try {
                    if (this.PersonalReq != null) {
                        this.PersonalReq.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalReq", "PersonalRequest", "personalReq", "PersonalRequest", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorData", null, "Non-motorData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            NonMotorData obj0 = new NonMotorData();
            {
                obj0.BasicType = this.BasicType;
            }
            {
                obj0.Propulsion = Oss.Asn1.Internal.CopyUtil.CopyType(this.Propulsion);
            }
            {
                obj0.ClusterSize = this.ClusterSize;
            }
            {
                obj0.Attachment = this.Attachment;
            }
            {
                obj0.PersonalExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.PersonalExt);
            }
            {
                obj0.RoadWorkerExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.RoadWorkerExt);
            }
            {
                obj0.PersonalReq = Oss.Asn1.Internal.CopyUtil.CopyType(this.PersonalReq);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("basicType ");
                    switch (this.BasicType) {
                    case PersonalDeviceUserType.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case PersonalDeviceUserType.APEDESTRIAN:
                        prt.Write("aPEDESTRIAN");
                        break;
                    case PersonalDeviceUserType.APEDALCYCLIST:
                        prt.Write("aPEDALCYCLIST");
                        break;
                    case PersonalDeviceUserType.AROADWORKER:
                        prt.Write("aROADWORKER");
                        break;
                    case PersonalDeviceUserType.AnANIMAL:
                        prt.Write("anANIMAL");
                        break;
                    default:
                        prt.Write((int)this.BasicType);
                        break;
                    }
                }
                {
                    PropelledInformation data1 = this.Propulsion;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("propulsion ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    NumberOfParticipantsInCluster? data1 = this.ClusterSize;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("clusterSize ");
                        switch (data1.Value) {
                        case NumberOfParticipantsInCluster.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case NumberOfParticipantsInCluster.Small:
                            prt.Write("small");
                            break;
                        case NumberOfParticipantsInCluster.Medium:
                            prt.Write("medium");
                            break;
                        case NumberOfParticipantsInCluster.Large:
                            prt.Write("large");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    MsgFrame.Attachment? data1 = this.Attachment;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("attachment ");
                        switch (data1.Value) {
                        case MsgFrame.Attachment.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case MsgFrame.Attachment.Stroller:
                            prt.Write("stroller");
                            break;
                        case MsgFrame.Attachment.BicycleTrailer:
                            prt.Write("bicycleTrailer");
                            break;
                        case MsgFrame.Attachment.Cart:
                            prt.Write("cart");
                            break;
                        case MsgFrame.Attachment.Wheelchair:
                            prt.Write("wheelchair");
                            break;
                        case MsgFrame.Attachment.OtherWalkAssistAttachments:
                            prt.Write("otherWalkAssistAttachments");
                            break;
                        case MsgFrame.Attachment.Pet:
                            prt.Write("pet");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    PersonalExtensions data1 = this.PersonalExt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("personalExt ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    RoadWorkerExtensions data1 = this.RoadWorkerExt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("roadWorkerExt ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PersonalRequest data1 = this.PersonalReq;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("personalReq ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Propulsion != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ClusterSize != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Attachment != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.PersonalExt != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.RoadWorkerExt != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.PersonalReq != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                enc.Output.WriteBits(optMask0, 0, 6);
                try {
                    enc.EncodeEnumWithExtension((int)this.BasicType, _InternalMetadata.PerCodecMetaData.SortedEnum27, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum27);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BasicType", "PersonalDeviceUserType", "basicType", "PersonalDeviceUserType", false); throw;
                }
                try {
                    PropelledInformation data1 = this.Propulsion;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Propulsion", "PropelledInformation", "propulsion", "PropelledInformation", false); throw;
                }
                try {
                    if (this.ClusterSize != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.ClusterSize.Value, _InternalMetadata.PerCodecMetaData.SortedEnum31, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum31);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ClusterSize.Value", "NumberOfParticipantsInCluster", "clusterSize", "NumberOfParticipantsInCluster", false); throw;
                }
                try {
                    if (this.Attachment != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.Attachment.Value, _InternalMetadata.PerCodecMetaData.SortedEnum32, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum32);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Attachment.Value", "MsgFrame.Attachment", "attachment", "Attachment", false); throw;
                }
                try {
                    PersonalExtensions data1 = this.PersonalExt;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalExt", "PersonalExtensions", "personalExt", "PersonalExtensions", false); throw;
                }
                try {
                    RoadWorkerExtensions data1 = this.RoadWorkerExt;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RoadWorkerExt", "RoadWorkerExtensions", "roadWorkerExt", "RoadWorkerExtensions", false); throw;
                }
                try {
                    PersonalRequest data1 = this.PersonalReq;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalReq", "PersonalRequest", "personalReq", "PersonalRequest", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorData", null, "Non-motorData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 7);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum27, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum27, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum27);
                    this.BasicType = (PersonalDeviceUserType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "BasicType", "PersonalDeviceUserType", "basicType", "PersonalDeviceUserType", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        PropelledInformation data1 = new PropelledInformation();

                        dec.DecodeType(data1);
                        this.Propulsion = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Propulsion", "PropelledInformation", "propulsion", "PropelledInformation", false); throw;
                    }
                }
                else
                {
                    this.Propulsion = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum31, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum31, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum31);
                        this.ClusterSize = (NumberOfParticipantsInCluster)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ClusterSize", "NumberOfParticipantsInCluster", "clusterSize", "NumberOfParticipantsInCluster", false); throw;
                    }
                }
                else
                {
                    this.ClusterSize = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum32, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum32, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum32);
                        this.Attachment = (MsgFrame.Attachment)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Attachment", "MsgFrame.Attachment", "attachment", "Attachment", false); throw;
                    }
                }
                else
                {
                    this.Attachment = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        PersonalExtensions data1 = new PersonalExtensions();

                        dec.DecodeType(data1);
                        this.PersonalExt = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalExt", "PersonalExtensions", "personalExt", "PersonalExtensions", false); throw;
                    }
                }
                else
                {
                    this.PersonalExt = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        RoadWorkerExtensions data1 = new RoadWorkerExtensions();

                        dec.DecodeType(data1);
                        this.RoadWorkerExt = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RoadWorkerExt", "RoadWorkerExtensions", "roadWorkerExt", "RoadWorkerExtensions", false); throw;
                    }
                }
                else
                {
                    this.RoadWorkerExt = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        PersonalRequest data1 = new PersonalRequest();

                        dec.DecodeType(data1);
                        this.PersonalReq = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PersonalReq", "PersonalRequest", "personalReq", "PersonalRequest", false); throw;
                    }
                }
                else
                {
                    this.PersonalReq = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorData", null, "Non-motorData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PersonalDeviceUserType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum PersonalDeviceUserType
    {
        Unavailable = 0,
        APEDESTRIAN = 1,
        APEDALCYCLIST = 2,
        AROADWORKER = 3,
        AnANIMAL = 4
    }
    /// <summary>
    /// Represents schema type 'PropelledInformation' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class PropelledInformation : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            HumanChosen = 1,
            AnimalChosen = 2,
            MotorChosen = 3
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'human'</summary>
        public HumanPropelledType? Human {
            get {
                if (_id == Id.HumanChosen)
                    return (_contained as HumanPropelledType?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.HumanChosen;
            }
        }
        /// <summary>Gets or selects alternative 'animal'</summary>
        public AnimalPropelledType? Animal {
            get {
                if (_id == Id.AnimalChosen)
                    return (_contained as AnimalPropelledType?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.AnimalChosen;
            }
        }
        /// <summary>Gets or selects alternative 'motor'</summary>
        public MotorizedPropelledType? Motor {
            get {
                if (_id == Id.MotorChosen)
                    return (_contained as MotorizedPropelledType?);
                else
                    return null;
            }
            set {
                _contained = value;
                if (value == null)
                    _id = Id.Unselected;
                else
                    _id = Id.MotorChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PropelledInformation that = right as PropelledInformation;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PropelledInformation";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case PropelledInformation.Id.HumanChosen:
                    try {
                        if (this.Human == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Human", "HumanPropelledType", "human", "HumanPropelledType", false); throw;
                    }
                    break;
                case PropelledInformation.Id.AnimalChosen:
                    try {
                        if (this.Animal == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Animal", "AnimalPropelledType", "animal", "AnimalPropelledType", false); throw;
                    }
                    break;
                case PropelledInformation.Id.MotorChosen:
                    try {
                        if (this.Motor == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Motor", "MotorizedPropelledType", "motor", "MotorizedPropelledType", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PropelledInformation", null, "PropelledInformation", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PropelledInformation obj0 = new PropelledInformation();
            switch (this.Selected) {
                case PropelledInformation.Id.HumanChosen:
                {
                    obj0.Human = this.Human;
                    break;
                }
                case PropelledInformation.Id.AnimalChosen:
                {
                    obj0.Animal = this.Animal;
                    break;
                }
                case PropelledInformation.Id.MotorChosen:
                {
                    obj0.Motor = this.Motor;
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case PropelledInformation.Id.MotorChosen:
                    {
                        prt.Write("motor : ");
                        switch (this.Motor.Value) {
                        case MotorizedPropelledType.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case MotorizedPropelledType.OtherTypes:
                            prt.Write("otherTypes");
                            break;
                        case MotorizedPropelledType.WheelChair:
                            prt.Write("wheelChair");
                            break;
                        case MotorizedPropelledType.Bicycle:
                            prt.Write("bicycle");
                            break;
                        case MotorizedPropelledType.Scooter:
                            prt.Write("scooter");
                            break;
                        case MotorizedPropelledType.SelfBalancingDevice:
                            prt.Write("selfBalancingDevice");
                            break;
                        default:
                            prt.Write((int)this.Motor.Value);
                            break;
                        }
                    }
                    break;
                case PropelledInformation.Id.AnimalChosen:
                    {
                        prt.Write("animal : ");
                        switch (this.Animal.Value) {
                        case AnimalPropelledType.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case AnimalPropelledType.OtherTypes:
                            prt.Write("otherTypes");
                            break;
                        case AnimalPropelledType.AnimalMounted:
                            prt.Write("animalMounted");
                            break;
                        case AnimalPropelledType.AnimalDrawnCarriage:
                            prt.Write("animalDrawnCarriage");
                            break;
                        default:
                            prt.Write((int)this.Animal.Value);
                            break;
                        }
                    }
                    break;
                case PropelledInformation.Id.HumanChosen:
                    {
                        prt.Write("human : ");
                        switch (this.Human.Value) {
                        case HumanPropelledType.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case HumanPropelledType.OtherTypes:
                            prt.Write("otherTypes");
                            break;
                        case HumanPropelledType.OnFoot:
                            prt.Write("onFoot");
                            break;
                        case HumanPropelledType.Skateboard:
                            prt.Write("skateboard");
                            break;
                        case HumanPropelledType.PushOrKickScooter:
                            prt.Write("pushOrKickScooter");
                            break;
                        case HumanPropelledType.Wheelchair:
                            prt.Write("wheelchair");
                            break;
                        default:
                            prt.Write((int)this.Human.Value);
                            break;
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 3)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 4);
                else
                {
                    enc.Output.Write2BitInt((int)this.Selected - 1);
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case PropelledInformation.Id.HumanChosen:
                        try {
                            enc.EncodeEnumWithExtension((int)this.Human.Value, _InternalMetadata.PerCodecMetaData.SortedEnum28, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum28);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Human", "HumanPropelledType", "human", "HumanPropelledType", false); throw;
                        }
                        break;
                    case PropelledInformation.Id.AnimalChosen:
                        try {
                            enc.EncodeEnumWithExtension((int)this.Animal.Value, _InternalMetadata.PerCodecMetaData.SortedEnum29, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum29);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Animal", "AnimalPropelledType", "animal", "AnimalPropelledType", false); throw;
                        }
                        break;
                    case PropelledInformation.Id.MotorChosen:
                        try {
                            enc.EncodeEnumWithExtension((int)this.Motor.Value, _InternalMetadata.PerCodecMetaData.SortedEnum30, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum30);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Motor", "MotorizedPropelledType", "motor", "MotorizedPropelledType", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PropelledInformation", null, "PropelledInformation", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 4;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = dec.Input.Read2BitInt() + 1;
                    if (choice_alt0 > 3)
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                switch ((PropelledInformation.Id)choice_alt0)
                {
                    case PropelledInformation.Id.HumanChosen:
                        try {
                            long data1;

                            data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum28, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum28, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum28);
                            this.Human = (HumanPropelledType)data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Human", "HumanPropelledType", "human", "HumanPropelledType", false); throw;
                        }
                        break;
                    case PropelledInformation.Id.AnimalChosen:
                        try {
                            long data1;

                            data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum29, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum29, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum29);
                            this.Animal = (AnimalPropelledType)data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Animal", "AnimalPropelledType", "animal", "AnimalPropelledType", false); throw;
                        }
                        break;
                    case PropelledInformation.Id.MotorChosen:
                        try {
                            long data1;

                            data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum30, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum30, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum30);
                            this.Motor = (MotorizedPropelledType)data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Motor", "MotorizedPropelledType", "motor", "MotorizedPropelledType", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PropelledInformation", null, "PropelledInformation", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'HumanPropelledType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum HumanPropelledType
    {
        Unavailable = 0,
        OtherTypes = 1,
        OnFoot = 2,
        Skateboard = 3,
        PushOrKickScooter = 4,
        Wheelchair = 5
    }
    /// <summary>
    /// Represents schema type 'AnimalPropelledType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AnimalPropelledType
    {
        Unavailable = 0,
        OtherTypes = 1,
        AnimalMounted = 2,
        AnimalDrawnCarriage = 3
    }
    /// <summary>
    /// Represents schema type 'MotorizedPropelledType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum MotorizedPropelledType
    {
        Unavailable = 0,
        OtherTypes = 1,
        WheelChair = 2,
        Bicycle = 3,
        Scooter = 4,
        SelfBalancingDevice = 5
    }
    /// <summary>
    /// Represents schema type 'NumberOfParticipantsInCluster' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum NumberOfParticipantsInCluster
    {
        Unavailable = 0,
        Small = 1,
        Medium = 2,
        Large = 3
    }
    /// <summary>
    /// Represents schema type 'Attachment' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum Attachment
    {
        Unavailable = 0,
        Stroller = 1,
        BicycleTrailer = 2,
        Cart = 3,
        Wheelchair = 4,
        OtherWalkAssistAttachments = 5,
        Pet = 6
    }
    /// <summary>
    /// Represents schema type 'PersonalExtensions' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PersonalExtensions : Oss.Asn1.BaseType
    {
        /// <summary>Field 'useState'</summary>
        public Oss.Asn1.BitStringWithNamedBits UseState { get; set; }
        /// <summary>Field 'assistType'</summary>
        public Oss.Asn1.BitStringWithNamedBits AssistType { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PersonalExtensions that = right as PersonalExtensions;
            if (UseState != null) {
                if (!UseState.Equals(that.UseState))
                    return false;
            } else if (that.UseState != null)
                return false;
            if (AssistType != null) {
                if (!AssistType.Equals(that.AssistType))
                    return false;
            } else if (that.AssistType != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (UseState != null)
                hash ^= UseState.GetHashCode();
            if (AssistType != null)
                hash ^= AssistType.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PersonalExtensions";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UseState != null) {
                        try {
                            if (this.UseState.Count != 9)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UseState", "Oss.Asn1.BitStringWithNamedBits", "useState", "PersonalDeviceUsageState", false); throw;
                }
                try {
                    if (this.AssistType != null) {
                        try {
                            if (this.AssistType.Count != 6)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AssistType", "Oss.Asn1.BitStringWithNamedBits", "assistType", "PersonalAssistive", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalExtensions", null, "PersonalExtensions", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PersonalExtensions obj0 = new PersonalExtensions();
            {
                obj0.UseState = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.UseState);
            }
            {
                obj0.AssistType = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.AssistType);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.UseState;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("useState ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unavailable";
                                    case (int)1: return "other";
                                    case (int)2: return "idle";
                                    case (int)3: return "listeningToAudio";
                                    case (int)4: return "typing";
                                    case (int)5: return "calling";
                                    case (int)6: return "playingGames";
                                    case (int)7: return "reading";
                                    case (int)8: return "viewing";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.AssistType;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("assistType ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unavailable";
                                    case (int)1: return "otherType";
                                    case (int)2: return "vision";
                                    case (int)3: return "hearing";
                                    case (int)4: return "movement";
                                    case (int)5: return "cognition";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.UseState != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.AssistType != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.UseState != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges3, this.UseState.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 9);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.UseState, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.UseState, length1, 9);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UseState", "Oss.Asn1.BitStringWithNamedBits", "useState", "PersonalDeviceUsageState", false); throw;
                }
                try {
                    if (this.AssistType != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges8, this.AssistType.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 6);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.AssistType, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.AssistType, length1, 6);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AssistType", "Oss.Asn1.BitStringWithNamedBits", "assistType", "PersonalAssistive", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalExtensions", null, "PersonalExtensions", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges3);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(9, _InternalMetadata.BerCodecMetaData.Ranges3);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 9))
                            dec.RaiseExtLengthError(extPresent1);
                        this.UseState = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "UseState", "Oss.Asn1.BitStringWithNamedBits", "useState", "PersonalDeviceUsageState", false); throw;
                    }
                }
                else
                {
                    this.UseState = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges8);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(6, _InternalMetadata.BerCodecMetaData.Ranges8);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 6))
                            dec.RaiseExtLengthError(extPresent1);
                        this.AssistType = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AssistType", "Oss.Asn1.BitStringWithNamedBits", "assistType", "PersonalAssistive", false); throw;
                    }
                }
                else
                {
                    this.AssistType = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalExtensions", null, "PersonalExtensions", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PersonalDeviceUsageState' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum PersonalDeviceUsageState
    {
        Unavailable = 0,
        Other = 1,
        Idle = 2,
        ListeningToAudio = 3,
        Typing = 4,
        Calling = 5,
        PlayingGames = 6,
        Reading = 7,
        Viewing = 8
    }
    /// <summary>
    /// Represents schema type 'PersonalAssistive' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum PersonalAssistive
    {
        Unavailable = 0,
        OtherType = 1,
        Vision = 2,
        Hearing = 3,
        Movement = 4,
        Cognition = 5
    }
    /// <summary>
    /// Represents schema type 'RoadWorkerExtensions' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RoadWorkerExtensions : Oss.Asn1.BaseType
    {
        /// <summary>Field 'workerType'</summary>
        public RoadWorkerType? WorkerType { get; set; }
        /// <summary>Field 'activityType'</summary>
        public Oss.Asn1.BitStringWithNamedBits ActivityType { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RoadWorkerExtensions that = right as RoadWorkerExtensions;
            if (WorkerType != null) {
                if (WorkerType != that.WorkerType)
                    return false;
            } else if (that.WorkerType != null)
                return false;
            if (ActivityType != null) {
                if (!ActivityType.Equals(that.ActivityType))
                    return false;
            } else if (that.ActivityType != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (WorkerType != null)
                hash ^= WorkerType.GetHashCode();
            if (ActivityType != null)
                hash ^= ActivityType.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RoadWorkerExtensions";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.WorkerType != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WorkerType.Value", "RoadWorkerType", "workerType", "RoadWorkerType", false); throw;
                }
                try {
                    if (this.ActivityType != null) {
                        try {
                            if (this.ActivityType.Count != 6)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivityType", "Oss.Asn1.BitStringWithNamedBits", "activityType", "RoadWorkerActivityType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadWorkerExtensions", null, "RoadWorkerExtensions", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RoadWorkerExtensions obj0 = new RoadWorkerExtensions();
            {
                obj0.WorkerType = this.WorkerType;
            }
            {
                obj0.ActivityType = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.ActivityType);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    RoadWorkerType? data1 = this.WorkerType;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("workerType ");
                        switch (data1.Value) {
                        case RoadWorkerType.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case RoadWorkerType.TrafficPolice:
                            prt.Write("trafficPolice");
                            break;
                        case RoadWorkerType.ConstructionPersonnel:
                            prt.Write("constructionPersonnel");
                            break;
                        case RoadWorkerType.PoliceOfficers:
                            prt.Write("policeOfficers");
                            break;
                        case RoadWorkerType.TrafficControlPersons:
                            prt.Write("trafficControlPersons");
                            break;
                        case RoadWorkerType.RailroadCrossingGuards:
                            prt.Write("railroadCrossingGuards");
                            break;
                        case RoadWorkerType.EmergencyOrganizationPersonnel:
                            prt.Write("emergencyOrganizationPersonnel");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.ActivityType;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("activityType ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unavailable";
                                    case (int)1: return "workingOnRoad";
                                    case (int)2: return "settingUpClosures";
                                    case (int)3: return "respondingToEvents";
                                    case (int)4: return "directingTraffic";
                                    case (int)5: return "otherActivities";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.WorkerType != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ActivityType != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.WorkerType != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.WorkerType.Value, _InternalMetadata.PerCodecMetaData.SortedEnum33, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum33);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WorkerType.Value", "RoadWorkerType", "workerType", "RoadWorkerType", false); throw;
                }
                try {
                    if (this.ActivityType != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges8, this.ActivityType.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 6);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.ActivityType, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.ActivityType, length1, 6);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivityType", "Oss.Asn1.BitStringWithNamedBits", "activityType", "RoadWorkerActivityType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadWorkerExtensions", null, "RoadWorkerExtensions", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum33, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum33, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum33);
                        this.WorkerType = (RoadWorkerType)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "WorkerType", "RoadWorkerType", "workerType", "RoadWorkerType", false); throw;
                    }
                }
                else
                {
                    this.WorkerType = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges8);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(6, _InternalMetadata.BerCodecMetaData.Ranges8);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 6))
                            dec.RaiseExtLengthError(extPresent1);
                        this.ActivityType = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivityType", "Oss.Asn1.BitStringWithNamedBits", "activityType", "RoadWorkerActivityType", false); throw;
                    }
                }
                else
                {
                    this.ActivityType = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadWorkerExtensions", null, "RoadWorkerExtensions", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RoadWorkerType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum RoadWorkerType
    {
        Unavailable = 0,
        TrafficPolice = 1,
        ConstructionPersonnel = 2,
        PoliceOfficers = 3,
        TrafficControlPersons = 4,
        RailroadCrossingGuards = 5,
        EmergencyOrganizationPersonnel = 6
    }
    /// <summary>
    /// Represents schema type 'RoadWorkerActivityType' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum RoadWorkerActivityType
    {
        Unavailable = 0,
        WorkingOnRoad = 1,
        SettingUpClosures = 2,
        RespondingToEvents = 3,
        DirectingTraffic = 4,
        OtherActivities = 5
    }
    /// <summary>
    /// Represents schema type 'PersonalRequest' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PersonalRequest : Oss.Asn1.BaseType
    {
        /// <summary>Field 'crossing'</summary>
        public PersonalCrossing? Crossing { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PersonalRequest that = right as PersonalRequest;
            if (Crossing != null) {
                if (Crossing != that.Crossing)
                    return false;
            } else if (that.Crossing != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Crossing != null)
                hash ^= Crossing.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PersonalRequest";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Crossing != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Crossing.Value", "PersonalCrossing", "crossing", "PersonalCrossing", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalRequest", null, "PersonalRequest", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PersonalRequest obj0 = new PersonalRequest();
            {
                obj0.Crossing = this.Crossing;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    PersonalCrossing? data1 = this.Crossing;

                    if (data1 != null) {
                        prt.WriteLine();
                        prt.Write("crossing ");
                        switch (data1.Value) {
                        case PersonalCrossing.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case PersonalCrossing.Request:
                            prt.Write("request");
                            break;
                        case PersonalCrossing.Crossing:
                            prt.Write("crossing");
                            break;
                        case PersonalCrossing.Finish:
                            prt.Write("finish");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Crossing != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (this.Crossing != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.Crossing.Value, _InternalMetadata.PerCodecMetaData.SortedEnum34, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum34);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Crossing.Value", "PersonalCrossing", "crossing", "PersonalCrossing", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalRequest", null, "PersonalRequest", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum34, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum34, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum34);
                        this.Crossing = (PersonalCrossing)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Crossing", "PersonalCrossing", "crossing", "PersonalCrossing", false); throw;
                    }
                }
                else
                {
                    this.Crossing = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PersonalRequest", null, "PersonalRequest", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PersonalCrossing' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum PersonalCrossing
    {
        Unavailable = 0,
        Request = 1,
        Crossing = 2,
        Finish = 3
    }
    /// <summary>
    /// Represents schema type 'RoadsideCoordination' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RoadsideCoordination : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        [System.Serializable]
        public partial class CoordinatesType : System.Collections.Generic.List<VehicleCoordination>
        {
            /// <summary>
            /// Initializes a new instance of the CoordinatesType class that is empty and has the default initial capacity.
            /// </summary>
            public CoordinatesType() : base() {}
            /// <summary>
            /// Initializes a new instance of the CoordinatesType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new CoordinatesType.</param>
            /// </summary>
            public CoordinatesType(System.Collections.Generic.IEnumerable<VehicleCoordination> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the CoordinatesType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new CoordinatesType can initially store.</param>
            /// </summary>
            public CoordinatesType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                CoordinatesType that = right as CoordinatesType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'coordinates'</summary>
        public CoordinatesType Coordinates { get; set; }
        [System.Serializable]
        public partial class LaneCoordinatesType : System.Collections.Generic.List<LaneCoordination>
        {
            /// <summary>
            /// Initializes a new instance of the LaneCoordinatesType class that is empty and has the default initial capacity.
            /// </summary>
            public LaneCoordinatesType() : base() {}
            /// <summary>
            /// Initializes a new instance of the LaneCoordinatesType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new LaneCoordinatesType.</param>
            /// </summary>
            public LaneCoordinatesType(System.Collections.Generic.IEnumerable<LaneCoordination> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the LaneCoordinatesType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new LaneCoordinatesType can initially store.</param>
            /// </summary>
            public LaneCoordinatesType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                LaneCoordinatesType that = right as LaneCoordinatesType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'laneCoordinates'</summary>
        public LaneCoordinatesType LaneCoordinates { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RoadsideCoordination that = right as RoadsideCoordination;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (Coordinates != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Coordinates, that.Coordinates))
                    return false;
            } else if (that.Coordinates != null)
                return false;
            if (LaneCoordinates != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(LaneCoordinates, that.LaneCoordinates))
                    return false;
            } else if (that.LaneCoordinates != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= SecMark.GetHashCode();
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (Coordinates != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Coordinates);
            if (LaneCoordinates != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(LaneCoordinates);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RoadsideCoordination";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.Coordinates != null) {
                        for (int i2 = 0; i2 < this.Coordinates.Count; i2++)
                        {
                            try {
                                this.Coordinates[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "VehicleCoordination", "#" + i2.ToString(), "VehicleCoordination", false); throw;
                            }
                        }
                        if (this.Coordinates.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Coordinates.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Coordinates", "CoordinatesType", "coordinates", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.LaneCoordinates != null) {
                        for (int i2 = 0; i2 < this.LaneCoordinates.Count; i2++)
                        {
                            try {
                                this.LaneCoordinates[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "LaneCoordination", "#" + i2.ToString(), "LaneCoordination", false); throw;
                            }
                        }
                        if (this.LaneCoordinates.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.LaneCoordinates.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneCoordinates", "LaneCoordinatesType", "laneCoordinates", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideCoordination", null, "RoadsideCoordination", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RoadsideCoordination obj0 = new RoadsideCoordination();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                CoordinatesType seqof1 = this.Coordinates;
                CoordinatesType data1 = null;
                if (seqof1 != null) {
                    data1 = new CoordinatesType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.Coordinates = data1;
            }
            {
                LaneCoordinatesType seqof1 = this.LaneCoordinates;
                LaneCoordinatesType data1 = null;
                if (seqof1 != null) {
                    data1 = new LaneCoordinatesType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.LaneCoordinates = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    CoordinatesType data1 = this.Coordinates;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("coordinates ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                {
                    LaneCoordinatesType data1 = this.LaneCoordinates;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("laneCoordinates ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Coordinates != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.LaneCoordinates != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    CoordinatesType data1 = this.Coordinates;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 16);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "VehicleCoordination", "#" + i1.ToString(), "VehicleCoordination", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Coordinates", "CoordinatesType", "coordinates", "SEQUENCE OF", false); throw;
                }
                try {
                    LaneCoordinatesType data1 = this.LaneCoordinates;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 8);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "LaneCoordination", "#" + i1.ToString(), "LaneCoordination", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneCoordinates", "LaneCoordinatesType", "laneCoordinates", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideCoordination", null, "RoadsideCoordination", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        CoordinatesType data1 = new CoordinatesType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 16, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    VehicleCoordination data2 = new VehicleCoordination();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "VehicleCoordination", "#" + data1.Count.ToString(), "VehicleCoordination", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.Coordinates = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Coordinates", "CoordinatesType", "coordinates", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.Coordinates = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        LaneCoordinatesType data1 = new LaneCoordinatesType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 8, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    LaneCoordination data2 = new LaneCoordination();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "LaneCoordination", "#" + data1.Count.ToString(), "LaneCoordination", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.LaneCoordinates = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneCoordinates", "LaneCoordinatesType", "laneCoordinates", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.LaneCoordinates = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RoadsideCoordination", null, "RoadsideCoordination", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleCoordination' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleCoordination : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehId'</summary>
        public byte[] VehId { get; set; }
        /// <summary>Field 'driveSuggestion'</summary>
        public MsgFrame.DriveSuggestion DriveSuggestion { get; set; }
        /// <summary>Field 'pathGuidance'</summary>
        public PathPlanning PathGuidance { get; set; }
        /// <summary>Field 'info'</summary>
        public Oss.Asn1.BitStringWithNamedBits Info { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleCoordination that = right as VehicleCoordination;
            if (VehId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehId, that.VehId))
                    return false;
            } else if (that.VehId != null)
                return false;
            if (DriveSuggestion != null) {
                if (!DriveSuggestion.Equals(that.DriveSuggestion))
                    return false;
            } else if (that.DriveSuggestion != null)
                return false;
            if (PathGuidance != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PathGuidance, that.PathGuidance))
                    return false;
            } else if (that.PathGuidance != null)
                return false;
            if (Info != null) {
                if (!Info.Equals(that.Info))
                    return false;
            } else if (that.Info != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehId);
            if (DriveSuggestion != null)
                hash ^= DriveSuggestion.GetHashCode();
            if (PathGuidance != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PathGuidance);
            if (Info != null)
                hash ^= Info.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleCoordination";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehId.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.DriveSuggestion != null) {
                        this.DriveSuggestion.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveSuggestion", "MsgFrame.DriveSuggestion", "driveSuggestion", "DriveSuggestion", false); throw;
                }
                try {
                    if (this.PathGuidance != null) {
                        this.PathGuidance.Validate();
                        if (this.PathGuidance.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PathGuidance.Count > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathGuidance", "PathPlanning", "pathGuidance", "PathPlanning", false); throw;
                }
                try {
                    if (this.Info != null) {
                        try {
                            if (this.Info.Count != 8)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleCoordination", null, "VehicleCoordination", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleCoordination obj0 = new VehicleCoordination();
            {
                obj0.VehId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehId);
            }
            {
                obj0.DriveSuggestion = Oss.Asn1.Internal.CopyUtil.CopyType(this.DriveSuggestion);
            }
            {
                obj0.PathGuidance = this.PathGuidance == null ? null : (PathPlanning)this.PathGuidance.Copy();
            }
            {
                obj0.Info = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Info);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehId ");
                    if (this.VehId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehId);
                    }
                }
                {
                    MsgFrame.DriveSuggestion data1 = this.DriveSuggestion;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("driveSuggestion ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PathPlanning data1 = this.PathGuidance;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("pathGuidance ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Info;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("info ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "cooperativeLaneChanging";
                                    case (int)1: return "cooperativeVehMerging";
                                    case (int)2: return "laneChangingAtIntersection";
                                    case (int)3: return "no-signalIntersectionPassing";
                                    case (int)4: return "dynamicLaneManagement";
                                    case (int)5: return "laneReservation";
                                    case (int)6: return "laneRestriction";
                                    case (int)7: return "signalPriority";
                                }
                                return null;
                            }
                        );
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.DriveSuggestion != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PathGuidance != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Info != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    enc.EncodeOctetString(this.VehId, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                try {
                    MsgFrame.DriveSuggestion data1 = this.DriveSuggestion;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveSuggestion", "MsgFrame.DriveSuggestion", "driveSuggestion", "DriveSuggestion", false); throw;
                }
                try {
                    if (this.PathGuidance != null)
                    {
                        this.PathGuidance.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathGuidance", "PathPlanning", "pathGuidance", "PathPlanning", false); throw;
                }
                try {
                    if (this.Info != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges4, this.Info.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 8);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Info, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Info, length1, 8);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleCoordination", null, "VehicleCoordination", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    this.VehId = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehId", "byte[]", "vehId", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.DriveSuggestion data1 = new MsgFrame.DriveSuggestion();

                        dec.DecodeType(data1);
                        this.DriveSuggestion = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DriveSuggestion", "MsgFrame.DriveSuggestion", "driveSuggestion", "DriveSuggestion", false); throw;
                    }
                }
                else
                {
                    this.DriveSuggestion = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PathPlanning data1 = new PathPlanning();

                        data1.DecodePer(dec);
                        this.PathGuidance = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathGuidance", "PathPlanning", "pathGuidance", "PathPlanning", false); throw;
                    }
                }
                else
                {
                    this.PathGuidance = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges4);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(8, _InternalMetadata.BerCodecMetaData.Ranges4);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 8))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Info = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                    }
                }
                else
                {
                    this.Info = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleCoordination", null, "VehicleCoordination", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DriveSuggestion' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class DriveSuggestion : Oss.Asn1.BaseType
    {
        /// <summary>Field 'suggestion'</summary>
        public Oss.Asn1.BitStringWithNamedBits Suggestion { get; set; }
        /// <summary>Field 'lifeTime'</summary>
        public int? LifeTime { get; set; }
        /// <summary>Field 'relatedLink'</summary>
        public ReferenceLink RelatedLink { get; set; }
        /// <summary>Field 'relatedPath'</summary>
        public ReferencePath RelatedPath { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DriveSuggestion that = right as DriveSuggestion;
            if (Suggestion != null) {
                if (!Suggestion.Equals(that.Suggestion))
                    return false;
            } else if (that.Suggestion != null)
                return false;
            if (LifeTime != null) {
                if (LifeTime != that.LifeTime)
                    return false;
            } else if (that.LifeTime != null)
                return false;
            if (RelatedLink != null) {
                if (!RelatedLink.Equals(that.RelatedLink))
                    return false;
            } else if (that.RelatedLink != null)
                return false;
            if (RelatedPath != null) {
                if (!RelatedPath.Equals(that.RelatedPath))
                    return false;
            } else if (that.RelatedPath != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Suggestion != null)
                hash ^= Suggestion.GetHashCode();
            if (LifeTime != null)
                hash ^= LifeTime.GetHashCode();
            if (RelatedLink != null)
                hash ^= RelatedLink.GetHashCode();
            if (RelatedPath != null)
                hash ^= RelatedPath.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "DriveSuggestion";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Suggestion == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.Suggestion.Count != 14)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Suggestion", "Oss.Asn1.BitStringWithNamedBits", "suggestion", "DriveBehavior", false); throw;
                }
                try {
                    if (this.LifeTime != null) {
                        if (this.LifeTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.LifeTime.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime.Value", "int", "lifeTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.RelatedLink != null) {
                        this.RelatedLink.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedLink", "ReferenceLink", "relatedLink", "ReferenceLink", false); throw;
                }
                try {
                    if (this.RelatedPath != null) {
                        this.RelatedPath.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveSuggestion", null, "DriveSuggestion", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            DriveSuggestion obj0 = new DriveSuggestion();
            {
                obj0.Suggestion = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Suggestion);
            }
            {
                obj0.LifeTime = this.LifeTime;
            }
            {
                obj0.RelatedLink = Oss.Asn1.Internal.CopyUtil.CopyType(this.RelatedLink);
            }
            {
                obj0.RelatedPath = Oss.Asn1.Internal.CopyUtil.CopyType(this.RelatedPath);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("suggestion ");
                    if (this.Suggestion == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintBitString(this.Suggestion, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "goStraightForward";
                                    case (int)1: return "laneChangingToLeft";
                                    case (int)2: return "laneChangingToRight";
                                    case (int)3: return "rampIn";
                                    case (int)4: return "rampOut";
                                    case (int)5: return "intersectionStraightThrough";
                                    case (int)6: return "intersectionTurnLeft";
                                    case (int)7: return "intersectionTurnRight";
                                    case (int)8: return "intersectionUTurn";
                                    case (int)9: return "stop-and-go";
                                    case (int)10: return "stop";
                                    case (int)11: return "slow-down";
                                    case (int)12: return "speed-up";
                                    case (int)13: return "parking";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    int? data1 = this.LifeTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("lifeTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    ReferenceLink data1 = this.RelatedLink;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("relatedLink ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    ReferencePath data1 = this.RelatedPath;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("relatedPath ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.LifeTime != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.RelatedLink != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.RelatedPath != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges9, this.Suggestion.LastOneBitPos() + 1);
                    bool extPresent1 = !(length1 == 14);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeBitStringWithNamedBits(this.Suggestion, length1);
                    else {
                        enc.EncodeBitStringWithNamedBits(this.Suggestion, length1, 14);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Suggestion", "Oss.Asn1.BitStringWithNamedBits", "suggestion", "DriveBehavior", false); throw;
                }
                try {
                    if (this.LifeTime != null)
                    {
                        if (enc.BitCount(this.LifeTime.Value - 1) > 16 || this.LifeTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LifeTime.Value);
                        enc.EncodeConstrainedInteger((this.LifeTime.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime.Value", "int", "lifeTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.RelatedLink != null)
                    {
                        enc.EncodeType(this.RelatedLink);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedLink", "ReferenceLink", "relatedLink", "ReferenceLink", false); throw;
                }
                try {
                    if (this.RelatedPath != null)
                    {
                        enc.EncodeType(this.RelatedPath);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveSuggestion", null, "DriveSuggestion", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    Oss.Asn1.BitStringWithNamedBits data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges9);
                    else
                        data1 = dec.DecodeBitStringWithNamedBits(14, _InternalMetadata.BerCodecMetaData.Ranges9);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 14))
                        dec.RaiseExtLengthError(extPresent1);
                    this.Suggestion = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Suggestion", "Oss.Asn1.BitStringWithNamedBits", "suggestion", "DriveBehavior", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.LifeTime = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime", "int", "lifeTime", "TimeOffset", false); throw;
                    }
                }
                else
                {
                    this.LifeTime = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        ReferenceLink data1 = new ReferenceLink();

                        dec.DecodeType(data1);
                        this.RelatedLink = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedLink", "ReferenceLink", "relatedLink", "ReferenceLink", false); throw;
                    }
                }
                else
                {
                    this.RelatedLink = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        ReferencePath data1 = new ReferencePath();

                        dec.DecodeType(data1);
                        this.RelatedPath = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                    }
                }
                else
                {
                    this.RelatedPath = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveSuggestion", null, "DriveSuggestion", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DriveBehavior' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum DriveBehavior
    {
        GoStraightForward = 0,
        LaneChangingToLeft = 1,
        LaneChangingToRight = 2,
        RampIn = 3,
        RampOut = 4,
        IntersectionStraightThrough = 5,
        IntersectionTurnLeft = 6,
        IntersectionTurnRight = 7,
        IntersectionUTurn = 8,
        StopAndGo = 9,
        Stop = 10,
        SlowDown = 11,
        SpeedUp = 12,
        Parking = 13
    }
    /// <summary>
    /// Represents schema type 'ReferencePath' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReferencePath : Oss.Asn1.BaseType
    {
        /// <summary>Field 'activePath'</summary>
        public PathPointList ActivePath { get; set; }
        /// <summary>Field 'pathRadius'</summary>
        public int PathRadius { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReferencePath that = right as ReferencePath;
            if (ActivePath != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ActivePath, that.ActivePath))
                    return false;
            } else if (that.ActivePath != null)
                return false;
            if (PathRadius != that.PathRadius)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (ActivePath != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ActivePath);
            hash ^= PathRadius.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ReferencePath";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.ActivePath == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ActivePath.Validate();
                    if (this.ActivePath.Count < 2)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.ActivePath.Count > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivePath", "PathPointList", "activePath", "PathPointList", false); throw;
                }
                try {
                    if (this.PathRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.PathRadius > 1024)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathRadius", "int", "pathRadius", "Radius", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePath", null, "ReferencePath", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReferencePath obj0 = new ReferencePath();
            {
                obj0.ActivePath = this.ActivePath == null ? null : (PathPointList)this.ActivePath.Copy();
            }
            {
                obj0.PathRadius = this.PathRadius;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("activePath ");
                    if (this.ActivePath == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.ActivePath.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pathRadius ");
                    prt.Write(this.PathRadius);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    this.ActivePath.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivePath", "PathPointList", "activePath", "PathPointList", false); throw;
                }
                try {
                    if (enc.BitCount(this.PathRadius - 0) > 11 || this.PathRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PathRadius);
                    enc.EncodeConstrainedInteger((this.PathRadius - (0)), 11);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathRadius", "int", "pathRadius", "Radius", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePath", null, "ReferencePath", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    PathPointList data1 = new PathPointList();

                    data1.DecodePer(dec);
                    this.ActivePath = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActivePath", "PathPointList", "activePath", "PathPointList", false); throw;
                }
                try {
                    this.PathRadius = dec.DecodeConstrainedInteger(11, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathRadius", "int", "pathRadius", "Radius", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePath", null, "ReferencePath", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'CoordinationInfo' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum CoordinationInfo
    {
        CooperativeLaneChanging = 0,
        CooperativeVehMerging = 1,
        LaneChangingAtIntersection = 2,
        NoSignalIntersectionPassing = 3,
        DynamicLaneManagement = 4,
        LaneReservation = 5,
        LaneRestriction = 6,
        SignalPriority = 7
    }
    /// <summary>
    /// Represents schema type 'LaneCoordination' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class LaneCoordination : Oss.Asn1.BaseType
    {
        /// <summary>Field 'targetLane'</summary>
        public ReferenceLink TargetLane { get; set; }
        /// <summary>Field 'relatedPath'</summary>
        public ReferencePath RelatedPath { get; set; }
        /// <summary>Field 'tBegin'</summary>
        public DDateTime TBegin { get; set; }
        /// <summary>Field 'tEnd'</summary>
        public DDateTime TEnd { get; set; }
        /// <summary>Field 'recommendedSpeed'</summary>
        public int? RecommendedSpeed { get; set; }
        /// <summary>Field 'recommendedBehavior'</summary>
        public Oss.Asn1.BitStringWithNamedBits RecommendedBehavior { get; set; }
        /// <summary>Field 'info'</summary>
        public Oss.Asn1.BitStringWithNamedBits Info { get; set; }
        /// <summary>Field 'description'</summary>
        public MsgFrame.Description Description { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneCoordination that = right as LaneCoordination;
            if (TargetLane != null) {
                if (!TargetLane.Equals(that.TargetLane))
                    return false;
            } else if (that.TargetLane != null)
                return false;
            if (RelatedPath != null) {
                if (!RelatedPath.Equals(that.RelatedPath))
                    return false;
            } else if (that.RelatedPath != null)
                return false;
            if (TBegin != null) {
                if (!TBegin.Equals(that.TBegin))
                    return false;
            } else if (that.TBegin != null)
                return false;
            if (TEnd != null) {
                if (!TEnd.Equals(that.TEnd))
                    return false;
            } else if (that.TEnd != null)
                return false;
            if (RecommendedSpeed != null) {
                if (RecommendedSpeed != that.RecommendedSpeed)
                    return false;
            } else if (that.RecommendedSpeed != null)
                return false;
            if (RecommendedBehavior != null) {
                if (!RecommendedBehavior.Equals(that.RecommendedBehavior))
                    return false;
            } else if (that.RecommendedBehavior != null)
                return false;
            if (Info != null) {
                if (!Info.Equals(that.Info))
                    return false;
            } else if (that.Info != null)
                return false;
            if (Description != null) {
                if (!Description.Equals(that.Description))
                    return false;
            } else if (that.Description != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TargetLane != null)
                hash ^= TargetLane.GetHashCode();
            if (RelatedPath != null)
                hash ^= RelatedPath.GetHashCode();
            if (TBegin != null)
                hash ^= TBegin.GetHashCode();
            if (TEnd != null)
                hash ^= TEnd.GetHashCode();
            if (RecommendedSpeed != null)
                hash ^= RecommendedSpeed.GetHashCode();
            if (RecommendedBehavior != null)
                hash ^= RecommendedBehavior.GetHashCode();
            if (Info != null)
                hash ^= Info.GetHashCode();
            if (Description != null)
                hash ^= Description.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LaneCoordination";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TargetLane == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.TargetLane.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "ReferenceLink", "targetLane", "ReferenceLink", false); throw;
                }
                try {
                    if (this.RelatedPath != null) {
                        this.RelatedPath.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TBegin != null) {
                        this.TBegin.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TEnd != null) {
                        this.TEnd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                }
                try {
                    if (this.RecommendedSpeed != null) {
                        if (this.RecommendedSpeed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.RecommendedSpeed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedSpeed.Value", "int", "recommendedSpeed", "Speed", false); throw;
                }
                try {
                    if (this.RecommendedBehavior != null) {
                        try {
                            if (this.RecommendedBehavior.Count != 14)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedBehavior", "Oss.Asn1.BitStringWithNamedBits", "recommendedBehavior", "DriveBehavior", false); throw;
                }
                try {
                    if (this.Info != null) {
                        try {
                            if (this.Info.Count != 8)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                }
                try {
                    if (this.Description != null) {
                        this.Description.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneCoordination", null, "LaneCoordination", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LaneCoordination obj0 = new LaneCoordination();
            {
                obj0.TargetLane = Oss.Asn1.Internal.CopyUtil.CopyType(this.TargetLane);
            }
            {
                obj0.RelatedPath = Oss.Asn1.Internal.CopyUtil.CopyType(this.RelatedPath);
            }
            {
                obj0.TBegin = Oss.Asn1.Internal.CopyUtil.CopyType(this.TBegin);
            }
            {
                obj0.TEnd = Oss.Asn1.Internal.CopyUtil.CopyType(this.TEnd);
            }
            {
                obj0.RecommendedSpeed = this.RecommendedSpeed;
            }
            {
                obj0.RecommendedBehavior = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.RecommendedBehavior);
            }
            {
                obj0.Info = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Info);
            }
            {
                obj0.Description = Oss.Asn1.Internal.CopyUtil.CopyType(this.Description);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("targetLane ");
                    if (this.TargetLane == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.TargetLane);
                    }
                }
                {
                    ReferencePath data1 = this.RelatedPath;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("relatedPath ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TBegin;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tBegin ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TEnd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tEnd ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.RecommendedSpeed;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("recommendedSpeed ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.RecommendedBehavior;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("recommendedBehavior ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "goStraightForward";
                                    case (int)1: return "laneChangingToLeft";
                                    case (int)2: return "laneChangingToRight";
                                    case (int)3: return "rampIn";
                                    case (int)4: return "rampOut";
                                    case (int)5: return "intersectionStraightThrough";
                                    case (int)6: return "intersectionTurnLeft";
                                    case (int)7: return "intersectionTurnRight";
                                    case (int)8: return "intersectionUTurn";
                                    case (int)9: return "stop-and-go";
                                    case (int)10: return "stop";
                                    case (int)11: return "slow-down";
                                    case (int)12: return "speed-up";
                                    case (int)13: return "parking";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Info;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("info ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "cooperativeLaneChanging";
                                    case (int)1: return "cooperativeVehMerging";
                                    case (int)2: return "laneChangingAtIntersection";
                                    case (int)3: return "no-signalIntersectionPassing";
                                    case (int)4: return "dynamicLaneManagement";
                                    case (int)5: return "laneReservation";
                                    case (int)6: return "laneRestriction";
                                    case (int)7: return "signalPriority";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    MsgFrame.Description data1 = this.Description;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("description ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.RelatedPath != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TBegin != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TEnd != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.RecommendedSpeed != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.RecommendedBehavior != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.Info != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.Description != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                enc.Output.WriteBits(optMask0, 0, 7);
                try {
                    enc.EncodeType(this.TargetLane);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "ReferenceLink", "targetLane", "ReferenceLink", false); throw;
                }
                try {
                    if (this.RelatedPath != null)
                    {
                        enc.EncodeType(this.RelatedPath);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TBegin != null)
                    {
                        enc.EncodeType(this.TBegin);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TEnd != null)
                    {
                        enc.EncodeType(this.TEnd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                }
                try {
                    if (this.RecommendedSpeed != null)
                    {
                        if (enc.BitCount(this.RecommendedSpeed.Value - 0) > 13 || this.RecommendedSpeed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RecommendedSpeed.Value);
                        enc.EncodeConstrainedInteger((this.RecommendedSpeed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedSpeed.Value", "int", "recommendedSpeed", "Speed", false); throw;
                }
                try {
                    if (this.RecommendedBehavior != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges9, this.RecommendedBehavior.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 14);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.RecommendedBehavior, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.RecommendedBehavior, length1, 14);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedBehavior", "Oss.Asn1.BitStringWithNamedBits", "recommendedBehavior", "DriveBehavior", false); throw;
                }
                try {
                    if (this.Info != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges4, this.Info.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 8);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Info, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Info, length1, 8);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                }
                try {
                    if (this.Description != null)
                    {
                        enc.EncodeType(this.Description);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneCoordination", null, "LaneCoordination", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 8);
                try {
                    ReferenceLink data1 = new ReferenceLink();

                    dec.DecodeType(data1);
                    this.TargetLane = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "ReferenceLink", "targetLane", "ReferenceLink", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        ReferencePath data1 = new ReferencePath();

                        dec.DecodeType(data1);
                        this.RelatedPath = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                    }
                }
                else
                {
                    this.RelatedPath = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TBegin = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TBegin = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TEnd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TEnd = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.RecommendedSpeed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedSpeed", "int", "recommendedSpeed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.RecommendedSpeed = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges9);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(14, _InternalMetadata.BerCodecMetaData.Ranges9);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 14))
                            dec.RaiseExtLengthError(extPresent1);
                        this.RecommendedBehavior = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RecommendedBehavior", "Oss.Asn1.BitStringWithNamedBits", "recommendedBehavior", "DriveBehavior", false); throw;
                    }
                }
                else
                {
                    this.RecommendedBehavior = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges4);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(8, _InternalMetadata.BerCodecMetaData.Ranges4);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 8))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Info = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "Oss.Asn1.BitStringWithNamedBits", "info", "CoordinationInfo", false); throw;
                    }
                }
                else
                {
                    this.Info = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        MsgFrame.Description data1 = new MsgFrame.Description();

                        dec.DecodeType(data1);
                        this.Description = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                    }
                }
                else
                {
                    this.Description = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneCoordination", null, "LaneCoordination", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Description' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class Description : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            TextStringChosen = 1,
            TextGB2312Chosen = 2
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'textString'</summary>
        public string TextString {
            get {
                if (_id == Id.TextStringChosen)
                    return (_contained as string);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.TextStringChosen;
            }
        }
        /// <summary>Gets or selects alternative 'textGB2312'</summary>
        public byte[] TextGB2312 {
            get {
                if (_id == Id.TextGB2312Chosen)
                    return (_contained as byte[]);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.TextGB2312Chosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Description that = right as Description;
            if (_id != that._id)
                return false;
            switch (_id) {
            case Id.TextGB2312Chosen:
                return Oss.Asn1.Internal.Comparer.CompareArrays(_contained as byte[], that._contained as byte[]);
            default:
                return _contained.Equals(that._contained);
            }
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode() ^ _id.GetHashCode();
            switch (_id) {
            case Id.TextGB2312Chosen:
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(_contained as byte[]);
                break;
            default:
                hash ^= _contained.GetHashCode();
                break;
            }
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Description";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case Description.Id.TextStringChosen:
                    try {
                        if (this.TextString == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            Oss.Asn1.Internal.Validator.ValidateKMCString(this.TextString, _InternalMetadata.CommonMetaData.S0);
                            if (this.TextString.Length < 1)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                            if (this.TextString.Length > 512)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TextString", "string", "textString", "IA5String", false); throw;
                    }
                    break;
                case Description.Id.TextGB2312Chosen:
                    try {
                        if (this.TextGB2312 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            if (this.TextGB2312.Length < 2)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                            if (this.TextGB2312.Length > 512)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TextGB2312", "byte[]", "textGB2312", "OCTET STRING", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Description", null, "Description", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Description obj0 = new Description();
            switch (this.Selected) {
                case Description.Id.TextStringChosen:
                {
                    obj0.TextString = this.TextString;
                    break;
                }
                case Description.Id.TextGB2312Chosen:
                {
                    obj0.TextGB2312 = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TextGB2312);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case Description.Id.TextGB2312Chosen:
                    {
                        prt.Write("textGB2312 : ");
                        if (this.TextGB2312 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintOctetString(this.TextGB2312);
                        }
                    }
                    break;
                case Description.Id.TextStringChosen:
                    {
                        prt.Write("textString : ");
                        if (this.TextString == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintString(this.TextString);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                enc.Output.Write1BitInt((int)this.Selected - 1);
                switch (this.Selected)
                {
                    case Description.Id.TextStringChosen:
                        try {
                            enc.EncodeKMCString(this.TextString, 1, 512, _InternalMetadata.CommonMetaData.S0);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TextString", "string", "textString", "IA5String", false); throw;
                        }
                        break;
                    case Description.Id.TextGB2312Chosen:
                        try {
                            enc.EncodeOctetString(this.TextGB2312, 2, 512);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TextGB2312", "byte[]", "textGB2312", "OCTET STRING", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Description", null, "Description", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;

                choice_alt0 = 1 + dec.Input.Read1BitInt();
                switch ((Description.Id)choice_alt0)
                {
                    case Description.Id.TextStringChosen:
                        try {
                            this.TextString = dec.DecodeKMCString(1, 512, _InternalMetadata.CommonMetaData.S0);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TextString", "string", "textString", "IA5String", false); throw;
                        }
                        break;
                    case Description.Id.TextGB2312Chosen:
                        try {
                            this.TextGB2312 = dec.DecodeOctetString(2, 512);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TextGB2312", "byte[]", "textGB2312", "OCTET STRING", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Description", null, "Description", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SensorSharingMsg' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SensorSharingMsg : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'equipmentType'</summary>
        public MsgFrame.EquipmentType EquipmentType { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'sensorPos'</summary>
        public Position3D SensorPos { get; set; }
        /// <summary>Field 'detectedRegion'</summary>
        public MsgFrame.DetectedRegion DetectedRegion { get; set; }
        /// <summary>Field 'participants'</summary>
        public DetectedPTCList Participants { get; set; }
        /// <summary>Field 'obstacles'</summary>
        public DetectedObstacleList Obstacles { get; set; }
        /// <summary>Field 'rtes'</summary>
        public RTEList Rtes { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SensorSharingMsg that = right as SensorSharingMsg;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (EquipmentType != that.EquipmentType)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (SensorPos != null) {
                if (!SensorPos.Equals(that.SensorPos))
                    return false;
            } else if (that.SensorPos != null)
                return false;
            if (DetectedRegion != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(DetectedRegion, that.DetectedRegion))
                    return false;
            } else if (that.DetectedRegion != null)
                return false;
            if (Participants != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Participants, that.Participants))
                    return false;
            } else if (that.Participants != null)
                return false;
            if (Obstacles != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Obstacles, that.Obstacles))
                    return false;
            } else if (that.Obstacles != null)
                return false;
            if (Rtes != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Rtes, that.Rtes))
                    return false;
            } else if (that.Rtes != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= EquipmentType.GetHashCode();
            hash ^= SecMark.GetHashCode();
            if (SensorPos != null)
                hash ^= SensorPos.GetHashCode();
            if (DetectedRegion != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(DetectedRegion);
            if (Participants != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Participants);
            if (Obstacles != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Obstacles);
            if (Rtes != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Rtes);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SensorSharingMsg";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentType", "MsgFrame.EquipmentType", "equipmentType", "EquipmentType", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.SensorPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.SensorPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorPos", "Position3D", "sensorPos", "Position3D", false); throw;
                }
                try {
                    if (this.DetectedRegion != null) {
                        this.DetectedRegion.Validate();
                        if (this.DetectedRegion.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.DetectedRegion.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedRegion", "MsgFrame.DetectedRegion", "detectedRegion", "DetectedRegion", false); throw;
                }
                try {
                    if (this.Participants != null) {
                        this.Participants.Validate();
                        if (this.Participants.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Participants.Count > 512)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "DetectedPTCList", "participants", "DetectedPTCList", false); throw;
                }
                try {
                    if (this.Obstacles != null) {
                        this.Obstacles.Validate();
                        if (this.Obstacles.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Obstacles.Count > 64)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Obstacles", "DetectedObstacleList", "obstacles", "DetectedObstacleList", false); throw;
                }
                try {
                    if (this.Rtes != null) {
                        this.Rtes.Validate();
                        if (this.Rtes.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Rtes.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rtes", "RTEList", "rtes", "RTEList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SensorSharingMsg", null, "SensorSharingMsg", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SensorSharingMsg obj0 = new SensorSharingMsg();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.EquipmentType = this.EquipmentType;
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.SensorPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.SensorPos);
            }
            {
                obj0.DetectedRegion = this.DetectedRegion == null ? null : (MsgFrame.DetectedRegion)this.DetectedRegion.Copy();
            }
            {
                obj0.Participants = this.Participants == null ? null : (DetectedPTCList)this.Participants.Copy();
            }
            {
                obj0.Obstacles = this.Obstacles == null ? null : (DetectedObstacleList)this.Obstacles.Copy();
            }
            {
                obj0.Rtes = this.Rtes == null ? null : (RTEList)this.Rtes.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("equipmentType ");
                    switch (this.EquipmentType) {
                    case MsgFrame.EquipmentType.Unknown:
                        prt.Write("unknown");
                        break;
                    case MsgFrame.EquipmentType.Rsu:
                        prt.Write("rsu");
                        break;
                    case MsgFrame.EquipmentType.Obu:
                        prt.Write("obu");
                        break;
                    case MsgFrame.EquipmentType.Vru:
                        prt.Write("vru");
                        break;
                    default:
                        prt.Write((int)this.EquipmentType);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("sensorPos ");
                    if (this.SensorPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.SensorPos);
                    }
                }
                {
                    MsgFrame.DetectedRegion data1 = this.DetectedRegion;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("detectedRegion ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    DetectedPTCList data1 = this.Participants;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("participants ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    DetectedObstacleList data1 = this.Obstacles;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("obstacles ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    RTEList data1 = this.Rtes;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("rtes ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.DetectedRegion != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Participants != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Obstacles != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Rtes != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.EquipmentType, _InternalMetadata.PerCodecMetaData.SortedEnum35, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum35);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentType", "MsgFrame.EquipmentType", "equipmentType", "EquipmentType", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.SensorPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorPos", "Position3D", "sensorPos", "Position3D", false); throw;
                }
                try {
                    MsgFrame.DetectedRegion data1 = this.DetectedRegion;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedRegion", "MsgFrame.DetectedRegion", "detectedRegion", "DetectedRegion", false); throw;
                }
                try {
                    DetectedPTCList data1 = this.Participants;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "DetectedPTCList", "participants", "DetectedPTCList", false); throw;
                }
                try {
                    DetectedObstacleList data1 = this.Obstacles;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Obstacles", "DetectedObstacleList", "obstacles", "DetectedObstacleList", false); throw;
                }
                try {
                    RTEList data1 = this.Rtes;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Rtes", "RTEList", "rtes", "RTEList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SensorSharingMsg", null, "SensorSharingMsg", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum35, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum35, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum35);
                    this.EquipmentType = (MsgFrame.EquipmentType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentType", "MsgFrame.EquipmentType", "equipmentType", "EquipmentType", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.SensorPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorPos", "Position3D", "sensorPos", "Position3D", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.DetectedRegion data1 = new MsgFrame.DetectedRegion();

                        data1.DecodePer(dec);
                        this.DetectedRegion = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedRegion", "MsgFrame.DetectedRegion", "detectedRegion", "DetectedRegion", false); throw;
                    }
                }
                else
                {
                    this.DetectedRegion = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        DetectedPTCList data1 = new DetectedPTCList();

                        data1.DecodePer(dec);
                        this.Participants = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Participants", "DetectedPTCList", "participants", "DetectedPTCList", false); throw;
                    }
                }
                else
                {
                    this.Participants = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        DetectedObstacleList data1 = new DetectedObstacleList();

                        data1.DecodePer(dec);
                        this.Obstacles = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Obstacles", "DetectedObstacleList", "obstacles", "DetectedObstacleList", false); throw;
                    }
                }
                else
                {
                    this.Obstacles = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        RTEList data1 = new RTEList();

                        data1.DecodePer(dec);
                        this.Rtes = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Rtes", "RTEList", "rtes", "RTEList", false); throw;
                    }
                }
                else
                {
                    this.Rtes = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SensorSharingMsg", null, "SensorSharingMsg", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'EquipmentType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum EquipmentType
    {
        Unknown = 0,
        Rsu = 1,
        Obu = 2,
        Vru = 3
    }
    /// <summary>
    /// Represents schema type 'DetectedRegion' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class DetectedRegion : System.Collections.Generic.List<MsgFrame.Polygon>
    {
        /// <summary>
        /// Initializes a new instance of the DetectedRegion class that is empty and has the default initial capacity.
        /// </summary>
        public DetectedRegion() : base() {}
        /// <summary>
        /// Initializes a new instance of the DetectedRegion class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new DetectedRegion.</param>
        /// </summary>
        public DetectedRegion(System.Collections.Generic.IEnumerable<MsgFrame.Polygon> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the DetectedRegion class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new DetectedRegion can initially store.</param>
        /// </summary>
        public DetectedRegion(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DetectedRegion that = right as DetectedRegion;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Polygon", "#" + i1.ToString(), "Polygon", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedRegion", null, "DetectedRegion", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            DetectedRegion obj0 = new DetectedRegion();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(this[i0] == null ? null : (Polygon)this[i0].Copy());
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this[i1].PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 8);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        this[i0].EncodePer(enc);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Polygon", "#" + i0.ToString(), "Polygon", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedRegion", null, "DetectedRegion", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 8, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Polygon data1 = new Polygon();

                            data1.DecodePer(dec);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Polygon", "#" + this.Count.ToString(), "Polygon", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedRegion", null, "DetectedRegion", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DetectedPTCList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class DetectedPTCList : System.Collections.Generic.List<DetectedPTCData>
    {
        /// <summary>
        /// Initializes a new instance of the DetectedPTCList class that is empty and has the default initial capacity.
        /// </summary>
        public DetectedPTCList() : base() {}
        /// <summary>
        /// Initializes a new instance of the DetectedPTCList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new DetectedPTCList.</param>
        /// </summary>
        public DetectedPTCList(System.Collections.Generic.IEnumerable<DetectedPTCData> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the DetectedPTCList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new DetectedPTCList can initially store.</param>
        /// </summary>
        public DetectedPTCList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DetectedPTCList that = right as DetectedPTCList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "DetectedPTCData", "#" + i1.ToString(), "DetectedPTCData", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 512)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCList", null, "DetectedPTCList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            DetectedPTCList obj0 = new DetectedPTCList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 512)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 512);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "DetectedPTCData", "#" + i0.ToString(), "DetectedPTCData", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCList", null, "DetectedPTCList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 512, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            DetectedPTCData data1 = new DetectedPTCData();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "DetectedPTCData", "#" + this.Count.ToString(), "DetectedPTCData", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCList", null, "DetectedPTCList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DetectedPTCData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class DetectedPTCData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'ptc'</summary>
        public ParticipantData Ptc { get; set; }
        /// <summary>Field 'objSizeConfidence'</summary>
        public ObjectSizeConfidence ObjSizeConfidence { get; set; }
        /// <summary>Field 'detectedPTCType'</summary>
        public MsgFrame.DetectedPTCType? DetectedPTCType { get; set; }
        /// <summary>Field 'typeConfidence'</summary>
        public int? TypeConfidence { get; set; }
        /// <summary>Field 'acc4WayConfidence'</summary>
        public AccSet4WayConfidence Acc4WayConfidence { get; set; }
        /// <summary>Field 'statusDuration'</summary>
        public int? StatusDuration { get; set; }
        /// <summary>Field 'pathHistory'</summary>
        public MsgFrame.PathHistory PathHistory { get; set; }
        /// <summary>Field 'planningList'</summary>
        public MsgFrame.PlanningList PlanningList { get; set; }
        /// <summary>Field 'tracking'</summary>
        public int? Tracking { get; set; }
        /// <summary>Field 'polygon'</summary>
        public MsgFrame.Polygon Polygon { get; set; }
        /// <summary>
        /// Represents in-line ASN.1 CHOICE type
        /// </summary>
        [System.Serializable]
        public partial class TypeRelatedExtType
        {
            /// <summary>CHOICE alternatives</summary>
            public enum Id {
                Unselected = 0,
                MotorExtChosen = 1,
                NonMotorExtChosen = 2
            }
            private Id _id;
            private object _contained;
            /// <summary>Gets current selection</summary>
            public Id Selected {
                get { return _id; }
            }
            /// <summary>Gets or selects alternative 'motorExt'</summary>
            public MotorDataExtension MotorExt {
                get {
                    if (_id == Id.MotorExtChosen)
                        return (_contained as MotorDataExtension);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.MotorExtChosen;
                }
            }
            /// <summary>Gets or selects alternative 'non-motorExt'</summary>
            public NonMotorDataExtension NonMotorExt {
                get {
                    if (_id == Id.NonMotorExtChosen)
                        return (_contained as NonMotorDataExtension);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.NonMotorExtChosen;
                }
            }

            public void Clear()
            {
                _id = Id.Unselected;
                _contained = null;
            }

            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                TypeRelatedExtType that = right as TypeRelatedExtType;
                if (_id != that._id)
                    return false;
                return _contained.Equals(that._contained);
            }

            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
            }
        }
        /// <summary>Field 'type-relatedExt'</summary>
        public TypeRelatedExtType TypeRelatedExt { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DetectedPTCData that = right as DetectedPTCData;
            if (Ptc != null) {
                if (!Ptc.Equals(that.Ptc))
                    return false;
            } else if (that.Ptc != null)
                return false;
            if (ObjSizeConfidence != null) {
                if (!ObjSizeConfidence.Equals(that.ObjSizeConfidence))
                    return false;
            } else if (that.ObjSizeConfidence != null)
                return false;
            if (DetectedPTCType != null) {
                if (DetectedPTCType != that.DetectedPTCType)
                    return false;
            } else if (that.DetectedPTCType != null)
                return false;
            if (TypeConfidence != null) {
                if (TypeConfidence != that.TypeConfidence)
                    return false;
            } else if (that.TypeConfidence != null)
                return false;
            if (Acc4WayConfidence != null) {
                if (!Acc4WayConfidence.Equals(that.Acc4WayConfidence))
                    return false;
            } else if (that.Acc4WayConfidence != null)
                return false;
            if (StatusDuration != null) {
                if (StatusDuration != that.StatusDuration)
                    return false;
            } else if (that.StatusDuration != null)
                return false;
            if (PathHistory != null) {
                if (!PathHistory.Equals(that.PathHistory))
                    return false;
            } else if (that.PathHistory != null)
                return false;
            if (PlanningList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PlanningList, that.PlanningList))
                    return false;
            } else if (that.PlanningList != null)
                return false;
            if (Tracking != null) {
                if (Tracking != that.Tracking)
                    return false;
            } else if (that.Tracking != null)
                return false;
            if (Polygon != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Polygon, that.Polygon))
                    return false;
            } else if (that.Polygon != null)
                return false;
            if (TypeRelatedExt != null) {
                if (!TypeRelatedExt.Equals(that.TypeRelatedExt))
                    return false;
            } else if (that.TypeRelatedExt != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Ptc != null)
                hash ^= Ptc.GetHashCode();
            if (ObjSizeConfidence != null)
                hash ^= ObjSizeConfidence.GetHashCode();
            if (DetectedPTCType != null)
                hash ^= DetectedPTCType.GetHashCode();
            if (TypeConfidence != null)
                hash ^= TypeConfidence.GetHashCode();
            if (Acc4WayConfidence != null)
                hash ^= Acc4WayConfidence.GetHashCode();
            if (StatusDuration != null)
                hash ^= StatusDuration.GetHashCode();
            if (PathHistory != null)
                hash ^= PathHistory.GetHashCode();
            if (PlanningList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PlanningList);
            if (Tracking != null)
                hash ^= Tracking.GetHashCode();
            if (Polygon != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Polygon);
            if (TypeRelatedExt != null)
                hash ^= TypeRelatedExt.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "DetectedPTCData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Ptc == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Ptc.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptc", "ParticipantData", "ptc", "ParticipantData", false); throw;
                }
                try {
                    if (this.ObjSizeConfidence != null) {
                        this.ObjSizeConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                }
                try {
                    if (this.DetectedPTCType != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedPTCType.Value", "MsgFrame.DetectedPTCType", "detectedPTCType", "DetectedPTCType", false); throw;
                }
                try {
                    if (this.TypeConfidence != null) {
                        if (this.TypeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TypeConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeConfidence.Value", "int", "typeConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.Acc4WayConfidence != null) {
                        this.Acc4WayConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                }
                try {
                    if (this.StatusDuration != null) {
                        if (this.StatusDuration.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.StatusDuration.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StatusDuration.Value", "int", "statusDuration", "TimeOffset", false); throw;
                }
                try {
                    if (this.PathHistory != null) {
                        this.PathHistory.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    if (this.PlanningList != null) {
                        this.PlanningList.Validate();
                        if (this.PlanningList.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PlanningList.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanningList", "MsgFrame.PlanningList", "planningList", "PlanningList", false); throw;
                }
                try {
                    if (this.Tracking != null) {
                        if (this.Tracking.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Tracking.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking.Value", "int", "tracking", "INTEGER", false); throw;
                }
                try {
                    if (this.Polygon != null) {
                        this.Polygon.Validate();
                        if (this.Polygon.Count < 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Polygon.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                }
                try {
                    if (this.TypeRelatedExt != null) {
                        switch (this.TypeRelatedExt.Selected) {
                        case TypeRelatedExtType.Id.MotorExtChosen:
                            try {
                                if (this.TypeRelatedExt.MotorExt == null)
                                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                                else {
                                    this.TypeRelatedExt.MotorExt.Validate();
                                }
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "MotorExt", "MotorDataExtension", "motorExt", "MotorDataExtension", false); throw;
                            }
                            break;
                        case TypeRelatedExtType.Id.NonMotorExtChosen:
                            try {
                                if (this.TypeRelatedExt.NonMotorExt == null)
                                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                                else {
                                    this.TypeRelatedExt.NonMotorExt.Validate();
                                }
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorExt", "NonMotorDataExtension", "non-motorExt", "Non-motorDataExtension", false); throw;
                            }
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeRelatedExt", "TypeRelatedExtType", "type-relatedExt", "CHOICE", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCData", null, "DetectedPTCData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            DetectedPTCData obj0 = new DetectedPTCData();
            {
                obj0.Ptc = Oss.Asn1.Internal.CopyUtil.CopyType(this.Ptc);
            }
            {
                obj0.ObjSizeConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObjSizeConfidence);
            }
            {
                obj0.DetectedPTCType = this.DetectedPTCType;
            }
            {
                obj0.TypeConfidence = this.TypeConfidence;
            }
            {
                obj0.Acc4WayConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.Acc4WayConfidence);
            }
            {
                obj0.StatusDuration = this.StatusDuration;
            }
            {
                obj0.PathHistory = Oss.Asn1.Internal.CopyUtil.CopyType(this.PathHistory);
            }
            {
                obj0.PlanningList = this.PlanningList == null ? null : (MsgFrame.PlanningList)this.PlanningList.Copy();
            }
            {
                obj0.Tracking = this.Tracking;
            }
            {
                obj0.Polygon = this.Polygon == null ? null : (MsgFrame.Polygon)this.Polygon.Copy();
            }
            {
                TypeRelatedExtType data1 = null;
                if (this.TypeRelatedExt != null) {
                    data1 = new TypeRelatedExtType();
                    switch (this.TypeRelatedExt.Selected) {
                        case TypeRelatedExtType.Id.MotorExtChosen:
                        {
                            data1.MotorExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.TypeRelatedExt.MotorExt);
                            break;
                        }
                        case TypeRelatedExtType.Id.NonMotorExtChosen:
                        {
                            data1.NonMotorExt = Oss.Asn1.Internal.CopyUtil.CopyType(this.TypeRelatedExt.NonMotorExt);
                            break;
                        }
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                    }
                }
                obj0.TypeRelatedExt = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("ptc ");
                    if (this.Ptc == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Ptc);
                    }
                }
                {
                    ObjectSizeConfidence data1 = this.ObjSizeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("objSizeConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.DetectedPTCType? data1 = this.DetectedPTCType;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("detectedPTCType ");
                        switch (data1.Value) {
                        case MsgFrame.DetectedPTCType.Unknown:
                            prt.Write("unknown");
                            break;
                        case MsgFrame.DetectedPTCType.UnknownMovable:
                            prt.Write("unknown-movable");
                            break;
                        case MsgFrame.DetectedPTCType.UnknownUnmovable:
                            prt.Write("unknown-unmovable");
                            break;
                        case MsgFrame.DetectedPTCType.Car:
                            prt.Write("car");
                            break;
                        case MsgFrame.DetectedPTCType.Van:
                            prt.Write("van");
                            break;
                        case MsgFrame.DetectedPTCType.Truck:
                            prt.Write("truck");
                            break;
                        case MsgFrame.DetectedPTCType.Bus:
                            prt.Write("bus");
                            break;
                        case MsgFrame.DetectedPTCType.Cyclist:
                            prt.Write("cyclist");
                            break;
                        case MsgFrame.DetectedPTCType.Motorcyclist:
                            prt.Write("motorcyclist");
                            break;
                        case MsgFrame.DetectedPTCType.Tricyclist:
                            prt.Write("tricyclist");
                            break;
                        case MsgFrame.DetectedPTCType.Pedestrian:
                            prt.Write("pedestrian");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    int? data1 = this.TypeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("typeConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    AccSet4WayConfidence data1 = this.Acc4WayConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("acc4WayConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.StatusDuration;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("statusDuration ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.PathHistory data1 = this.PathHistory;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("pathHistory ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PlanningList data1 = this.PlanningList;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("planningList ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    int? data1 = this.Tracking;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tracking ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.Polygon data1 = this.Polygon;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("polygon ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    TypeRelatedExtType data1 = this.TypeRelatedExt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("type-relatedExt ");
                        switch (data1.Selected) {
                        case TypeRelatedExtType.Id.NonMotorExtChosen:
                            {
                                NonMotorDataExtension data2 = data1.NonMotorExt;

                                prt.Write("non-motorExt : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        case TypeRelatedExtType.Id.MotorExtChosen:
                            {
                                MotorDataExtension data2 = data1.MotorExt;

                                prt.Write("motorExt : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        default:
                            prt.Write("<unknown choice>");
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[2];

                enc.Output.WriteBool(extPresent0);
                if (this.ObjSizeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.DetectedPTCType != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TypeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Acc4WayConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.StatusDuration != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.PathHistory != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.PlanningList != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.Tracking != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                if (this.Polygon != null)
                    optMask0[1] |= (byte)(0x80 >> 0);
                if (this.TypeRelatedExt != null)
                    optMask0[1] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 10);
                try {
                    enc.EncodeType(this.Ptc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptc", "ParticipantData", "ptc", "ParticipantData", false); throw;
                }
                try {
                    if (this.ObjSizeConfidence != null)
                    {
                        enc.EncodeType(this.ObjSizeConfidence);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                }
                try {
                    if (this.DetectedPTCType != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.DetectedPTCType.Value, _InternalMetadata.PerCodecMetaData.SortedEnum37, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum37);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedPTCType.Value", "MsgFrame.DetectedPTCType", "detectedPTCType", "DetectedPTCType", false); throw;
                }
                try {
                    if (this.TypeConfidence != null)
                    {
                        if (enc.BitCount(this.TypeConfidence.Value - 0) > 8 || this.TypeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TypeConfidence.Value);
                        enc.Output.Write8BitInt((this.TypeConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeConfidence.Value", "int", "typeConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.Acc4WayConfidence != null)
                    {
                        enc.EncodeType(this.Acc4WayConfidence);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                }
                try {
                    if (this.StatusDuration != null)
                    {
                        if (enc.BitCount(this.StatusDuration.Value - 1) > 16 || this.StatusDuration.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.StatusDuration.Value);
                        enc.EncodeConstrainedInteger((this.StatusDuration.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StatusDuration.Value", "int", "statusDuration", "TimeOffset", false); throw;
                }
                try {
                    if (this.PathHistory != null)
                    {
                        enc.EncodeType(this.PathHistory);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                }
                try {
                    MsgFrame.PlanningList data1 = this.PlanningList;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanningList", "MsgFrame.PlanningList", "planningList", "PlanningList", false); throw;
                }
                try {
                    if (this.Tracking != null)
                    {
                        if (enc.BitCount(this.Tracking.Value - 1) > 16 || this.Tracking.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Tracking.Value);
                        enc.EncodeConstrainedInteger((this.Tracking.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking.Value", "int", "tracking", "INTEGER", false); throw;
                }
                try {
                    if (this.Polygon != null)
                    {
                        this.Polygon.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                }
                try {
                    TypeRelatedExtType data1 = this.TypeRelatedExt;

                    if (data1 != null)
                    {
                        bool extPresent1;
                        Oss.Asn1.Internal.ArrayBitOutput tempOut1 = new Oss.Asn1.Internal.ArrayBitOutput();
                        Oss.Asn1.Internal.IBitOutput savedOut1 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                        if ((int)data1.Selected - 1 < 2)
                            extPresent1 = false;
                        else
                            extPresent1 = true;
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeNormSmallNonNegativeInteger((int)data1.Selected - 3);
                        else
                        {
                            enc.Output.Write1BitInt((int)data1.Selected - 1);
                        }
                        if (extPresent1)
                            enc.Output = tempOut1;
                        switch (data1.Selected)
                        {
                            case TypeRelatedExtType.Id.MotorExtChosen:
                                try {
                                    MotorDataExtension data2 = data1.MotorExt;

                                    enc.EncodeType(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotorExt", "MotorDataExtension", "motorExt", "MotorDataExtension", false); throw;
                                }
                                break;
                            case TypeRelatedExtType.Id.NonMotorExtChosen:
                                try {
                                    NonMotorDataExtension data2 = data1.NonMotorExt;

                                    enc.EncodeType(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorExt", "NonMotorDataExtension", "non-motorExt", "Non-motorDataExtension", false); throw;
                                }
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        }
                        if (extPresent1)
                        {
                            enc.CompleteEncoding();
                            enc.Output = savedOut1;
                            enc.EncodeOctetString(tempOut1.Consolidate());
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeRelatedExt", "TypeRelatedExtType", "type-relatedExt", "CHOICE", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCData", null, "DetectedPTCData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 11);
                try {
                    ParticipantData data1 = new ParticipantData();

                    dec.DecodeType(data1);
                    this.Ptc = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ptc", "ParticipantData", "ptc", "ParticipantData", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        ObjectSizeConfidence data1 = new ObjectSizeConfidence();

                        dec.DecodeType(data1);
                        this.ObjSizeConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                    }
                }
                else
                {
                    this.ObjSizeConfidence = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum37, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum37, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum37);
                        this.DetectedPTCType = (MsgFrame.DetectedPTCType)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DetectedPTCType", "MsgFrame.DetectedPTCType", "detectedPTCType", "DetectedPTCType", false); throw;
                    }
                }
                else
                {
                    this.DetectedPTCType = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.TypeConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeConfidence", "int", "typeConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.TypeConfidence = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        AccSet4WayConfidence data1 = new AccSet4WayConfidence();

                        dec.DecodeType(data1);
                        this.Acc4WayConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Acc4WayConfidence", "AccSet4WayConfidence", "acc4WayConfidence", "AccSet4WayConfidence", false); throw;
                    }
                }
                else
                {
                    this.Acc4WayConfidence = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.StatusDuration = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "StatusDuration", "int", "statusDuration", "TimeOffset", false); throw;
                    }
                }
                else
                {
                    this.StatusDuration = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        MsgFrame.PathHistory data1 = new MsgFrame.PathHistory();

                        dec.DecodeType(data1);
                        this.PathHistory = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathHistory", "MsgFrame.PathHistory", "pathHistory", "PathHistory", false); throw;
                    }
                }
                else
                {
                    this.PathHistory = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        MsgFrame.PlanningList data1 = new MsgFrame.PlanningList();

                        data1.DecodePer(dec);
                        this.PlanningList = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanningList", "MsgFrame.PlanningList", "planningList", "PlanningList", false); throw;
                    }
                }
                else
                {
                    this.PlanningList = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        this.Tracking = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking", "int", "tracking", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Tracking = null;
                }
                if ((optMask0[1] & 0x40) != 0)
                {
                    try {
                        MsgFrame.Polygon data1 = new MsgFrame.Polygon();

                        data1.DecodePer(dec);
                        this.Polygon = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                    }
                }
                else
                {
                    this.Polygon = null;
                }
                if ((optMask0[1] & 0x20) != 0)
                {
                    try {
                        TypeRelatedExtType data1 = new TypeRelatedExtType();
                        int choice_alt1 = 0;
                        bool extPresent1 = dec.DecodeBool();
                        int fraglast1 = 65536;
                        Oss.Asn1.Internal.IBitInput savedInput1 = dec.Input;
                        int extLen1 = 0;
                        int bitPos1 = 0;

                        if (extPresent1)
                        {
                            choice_alt1 = dec.DecodeNormSmallNonNegativeInteger() + 3;
                            extLen1 = dec.DecodeExtAdditonLength(ref fraglast1);
                            if (fraglast1 >= 0)
                                extLen1 = dec.PrepareExtInputFrag(extLen1);
                            bitPos1 = dec.Input.BitsRead();
                        }
                        else
                        {
                            choice_alt1 = dec.Input.Read1BitInt() + 1;
                            if (choice_alt1 > 2)
                                throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        }
                        switch ((TypeRelatedExtType.Id)choice_alt1)
                        {
                            case TypeRelatedExtType.Id.MotorExtChosen:
                                try {
                                    MotorDataExtension data2 = new MotorDataExtension();

                                    dec.DecodeType(data2);
                                    data1.MotorExt = data2;
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MotorExt", "MotorDataExtension", "motorExt", "MotorDataExtension", false); throw;
                                }
                                break;
                            case TypeRelatedExtType.Id.NonMotorExtChosen:
                                try {
                                    NonMotorDataExtension data2 = new NonMotorDataExtension();

                                    dec.DecodeType(data2);
                                    data1.NonMotorExt = data2;
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorExt", "NonMotorDataExtension", "non-motorExt", "Non-motorDataExtension", false); throw;
                                }
                                break;
                            default:
                                if (!extPresent1)
                                    throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                                data1.Clear();
                                break;
                        }
                        if (extPresent1)
                        {
                            if (dec.Options.StrictDecoding)
                                dec.CheckExtEncodingCompletion(bitPos1, extLen1);
                            if (fraglast1 < 0)
                                dec.Input.SkipBits(extLen1 * 8 - (dec.Input.BitsRead() - bitPos1));
                        }
                        dec.Input = savedInput1;
                        this.TypeRelatedExt = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TypeRelatedExt", "TypeRelatedExtType", "type-relatedExt", "CHOICE", false); throw;
                    }
                }
                else
                {
                    this.TypeRelatedExt = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedPTCData", null, "DetectedPTCData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ObjectSizeConfidence' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ObjectSizeConfidence : Oss.Asn1.BaseType
    {
        /// <summary>Field 'widthConf'</summary>
        public SizeValueConfidence WidthConf { get; set; }
        /// <summary>Field 'lengthConf'</summary>
        public SizeValueConfidence LengthConf { get; set; }
        /// <summary>Field 'heightConf'</summary>
        public SizeValueConfidence? HeightConf { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ObjectSizeConfidence that = right as ObjectSizeConfidence;
            if (WidthConf != that.WidthConf)
                return false;
            if (LengthConf != that.LengthConf)
                return false;
            if (HeightConf != null) {
                if (HeightConf != that.HeightConf)
                    return false;
            } else if (that.HeightConf != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= WidthConf.GetHashCode();
            hash ^= LengthConf.GetHashCode();
            if (HeightConf != null)
                hash ^= HeightConf.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ObjectSizeConfidence";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.WidthConf)
                    {
                        case SizeValueConfidence.Unavailable:
                        case SizeValueConfidence.Size10000:
                        case SizeValueConfidence.Size05000:
                        case SizeValueConfidence.Size02000:
                        case SizeValueConfidence.Size01000:
                        case SizeValueConfidence.Size00500:
                        case SizeValueConfidence.Size00200:
                        case SizeValueConfidence.Size00100:
                        case SizeValueConfidence.Size00050:
                        case SizeValueConfidence.Size00020:
                        case SizeValueConfidence.Size00010:
                        case SizeValueConfidence.Size00005:
                        case SizeValueConfidence.Size00002:
                        case SizeValueConfidence.Size00001:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WidthConf", "SizeValueConfidence", "widthConf", "SizeValueConfidence", false); throw;
                }
                try {
                    switch (this.LengthConf)
                    {
                        case SizeValueConfidence.Unavailable:
                        case SizeValueConfidence.Size10000:
                        case SizeValueConfidence.Size05000:
                        case SizeValueConfidence.Size02000:
                        case SizeValueConfidence.Size01000:
                        case SizeValueConfidence.Size00500:
                        case SizeValueConfidence.Size00200:
                        case SizeValueConfidence.Size00100:
                        case SizeValueConfidence.Size00050:
                        case SizeValueConfidence.Size00020:
                        case SizeValueConfidence.Size00010:
                        case SizeValueConfidence.Size00005:
                        case SizeValueConfidence.Size00002:
                        case SizeValueConfidence.Size00001:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LengthConf", "SizeValueConfidence", "lengthConf", "SizeValueConfidence", false); throw;
                }
                try {
                    if (this.HeightConf != null) {
                        switch (this.HeightConf.Value)
                        {
                            case SizeValueConfidence.Unavailable:
                            case SizeValueConfidence.Size10000:
                            case SizeValueConfidence.Size05000:
                            case SizeValueConfidence.Size02000:
                            case SizeValueConfidence.Size01000:
                            case SizeValueConfidence.Size00500:
                            case SizeValueConfidence.Size00200:
                            case SizeValueConfidence.Size00100:
                            case SizeValueConfidence.Size00050:
                            case SizeValueConfidence.Size00020:
                            case SizeValueConfidence.Size00010:
                            case SizeValueConfidence.Size00005:
                            case SizeValueConfidence.Size00002:
                            case SizeValueConfidence.Size00001:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightConf.Value", "SizeValueConfidence", "heightConf", "SizeValueConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSizeConfidence", null, "ObjectSizeConfidence", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ObjectSizeConfidence obj0 = new ObjectSizeConfidence();
            {
                obj0.WidthConf = this.WidthConf;
            }
            {
                obj0.LengthConf = this.LengthConf;
            }
            {
                obj0.HeightConf = this.HeightConf;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("widthConf ");
                    switch (this.WidthConf) {
                    case SizeValueConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case SizeValueConfidence.Size10000:
                        prt.Write("size-100-00");
                        break;
                    case SizeValueConfidence.Size05000:
                        prt.Write("size-050-00");
                        break;
                    case SizeValueConfidence.Size02000:
                        prt.Write("size-020-00");
                        break;
                    case SizeValueConfidence.Size01000:
                        prt.Write("size-010-00");
                        break;
                    case SizeValueConfidence.Size00500:
                        prt.Write("size-005-00");
                        break;
                    case SizeValueConfidence.Size00200:
                        prt.Write("size-002-00");
                        break;
                    case SizeValueConfidence.Size00100:
                        prt.Write("size-001-00");
                        break;
                    case SizeValueConfidence.Size00050:
                        prt.Write("size-000-50");
                        break;
                    case SizeValueConfidence.Size00020:
                        prt.Write("size-000-20");
                        break;
                    case SizeValueConfidence.Size00010:
                        prt.Write("size-000-10");
                        break;
                    case SizeValueConfidence.Size00005:
                        prt.Write("size-000-05");
                        break;
                    case SizeValueConfidence.Size00002:
                        prt.Write("size-000-02");
                        break;
                    case SizeValueConfidence.Size00001:
                        prt.Write("size-000-01");
                        break;
                    default:
                        prt.Write((int)this.WidthConf);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lengthConf ");
                    switch (this.LengthConf) {
                    case SizeValueConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case SizeValueConfidence.Size10000:
                        prt.Write("size-100-00");
                        break;
                    case SizeValueConfidence.Size05000:
                        prt.Write("size-050-00");
                        break;
                    case SizeValueConfidence.Size02000:
                        prt.Write("size-020-00");
                        break;
                    case SizeValueConfidence.Size01000:
                        prt.Write("size-010-00");
                        break;
                    case SizeValueConfidence.Size00500:
                        prt.Write("size-005-00");
                        break;
                    case SizeValueConfidence.Size00200:
                        prt.Write("size-002-00");
                        break;
                    case SizeValueConfidence.Size00100:
                        prt.Write("size-001-00");
                        break;
                    case SizeValueConfidence.Size00050:
                        prt.Write("size-000-50");
                        break;
                    case SizeValueConfidence.Size00020:
                        prt.Write("size-000-20");
                        break;
                    case SizeValueConfidence.Size00010:
                        prt.Write("size-000-10");
                        break;
                    case SizeValueConfidence.Size00005:
                        prt.Write("size-000-05");
                        break;
                    case SizeValueConfidence.Size00002:
                        prt.Write("size-000-02");
                        break;
                    case SizeValueConfidence.Size00001:
                        prt.Write("size-000-01");
                        break;
                    default:
                        prt.Write((int)this.LengthConf);
                        break;
                    }
                }
                {
                    SizeValueConfidence? data1 = this.HeightConf;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("heightConf ");
                        switch (data1.Value) {
                        case SizeValueConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SizeValueConfidence.Size10000:
                            prt.Write("size-100-00");
                            break;
                        case SizeValueConfidence.Size05000:
                            prt.Write("size-050-00");
                            break;
                        case SizeValueConfidence.Size02000:
                            prt.Write("size-020-00");
                            break;
                        case SizeValueConfidence.Size01000:
                            prt.Write("size-010-00");
                            break;
                        case SizeValueConfidence.Size00500:
                            prt.Write("size-005-00");
                            break;
                        case SizeValueConfidence.Size00200:
                            prt.Write("size-002-00");
                            break;
                        case SizeValueConfidence.Size00100:
                            prt.Write("size-001-00");
                            break;
                        case SizeValueConfidence.Size00050:
                            prt.Write("size-000-50");
                            break;
                        case SizeValueConfidence.Size00020:
                            prt.Write("size-000-20");
                            break;
                        case SizeValueConfidence.Size00010:
                            prt.Write("size-000-10");
                            break;
                        case SizeValueConfidence.Size00005:
                            prt.Write("size-000-05");
                            break;
                        case SizeValueConfidence.Size00002:
                            prt.Write("size-000-02");
                            break;
                        case SizeValueConfidence.Size00001:
                            prt.Write("size-000-01");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.HeightConf != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeEnum((int)this.WidthConf, _InternalMetadata.PerCodecMetaData.SortedEnum36);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WidthConf", "SizeValueConfidence", "widthConf", "SizeValueConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.LengthConf, _InternalMetadata.PerCodecMetaData.SortedEnum36);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LengthConf", "SizeValueConfidence", "lengthConf", "SizeValueConfidence", false); throw;
                }
                try {
                    if (this.HeightConf != null)
                    {
                        enc.EncodeEnum((int)this.HeightConf.Value, _InternalMetadata.PerCodecMetaData.SortedEnum36);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightConf.Value", "SizeValueConfidence", "heightConf", "SizeValueConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSizeConfidence", null, "ObjectSizeConfidence", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.WidthConf = (SizeValueConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum36);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "WidthConf", "SizeValueConfidence", "widthConf", "SizeValueConfidence", false); throw;
                }
                try {
                    this.LengthConf = (SizeValueConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum36);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LengthConf", "SizeValueConfidence", "lengthConf", "SizeValueConfidence", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.HeightConf = (SizeValueConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum36);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "HeightConf", "SizeValueConfidence", "heightConf", "SizeValueConfidence", false); throw;
                    }
                }
                else
                {
                    this.HeightConf = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSizeConfidence", null, "ObjectSizeConfidence", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SizeValueConfidence' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum SizeValueConfidence
    {
        Unavailable = 0,
        Size10000 = 1,
        Size05000 = 2,
        Size02000 = 3,
        Size01000 = 4,
        Size00500 = 5,
        Size00200 = 6,
        Size00100 = 7,
        Size00050 = 8,
        Size00020 = 9,
        Size00010 = 10,
        Size00005 = 11,
        Size00002 = 12,
        Size00001 = 13
    }
    /// <summary>
    /// Represents schema type 'DetectedPTCType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum DetectedPTCType
    {
        Unknown = 0,
        UnknownMovable = 1,
        UnknownUnmovable = 2,
        Car = 3,
        Van = 4,
        Truck = 5,
        Bus = 6,
        Cyclist = 7,
        Motorcyclist = 8,
        Tricyclist = 9,
        Pedestrian = 10
    }
    /// <summary>
    /// Represents schema type 'PlanningList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PlanningList : System.Collections.Generic.List<Planning>
    {
        /// <summary>
        /// Initializes a new instance of the PlanningList class that is empty and has the default initial capacity.
        /// </summary>
        public PlanningList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PlanningList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PlanningList.</param>
        /// </summary>
        public PlanningList(System.Collections.Generic.IEnumerable<Planning> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PlanningList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PlanningList can initially store.</param>
        /// </summary>
        public PlanningList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PlanningList that = right as PlanningList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "Planning", "#" + i1.ToString(), "Planning", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlanningList", null, "PlanningList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PlanningList obj0 = new PlanningList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 8);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "Planning", "#" + i0.ToString(), "Planning", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlanningList", null, "PlanningList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 8, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            Planning data1 = new Planning();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "Planning", "#" + this.Count.ToString(), "Planning", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PlanningList", null, "PlanningList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Planning' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Planning : Oss.Asn1.BaseType
    {
        /// <summary>Field 'duration'</summary>
        public int? Duration { get; set; }
        /// <summary>Field 'planConfidence'</summary>
        public int? PlanConfidence { get; set; }
        /// <summary>Field 'drivingBehavior'</summary>
        public Oss.Asn1.BitStringWithNamedBits DrivingBehavior { get; set; }
        /// <summary>Field 'pathPlanning'</summary>
        public MsgFrame.PathPlanning PathPlanning { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Planning that = right as Planning;
            if (Duration != null) {
                if (Duration != that.Duration)
                    return false;
            } else if (that.Duration != null)
                return false;
            if (PlanConfidence != null) {
                if (PlanConfidence != that.PlanConfidence)
                    return false;
            } else if (that.PlanConfidence != null)
                return false;
            if (DrivingBehavior != null) {
                if (!DrivingBehavior.Equals(that.DrivingBehavior))
                    return false;
            } else if (that.DrivingBehavior != null)
                return false;
            if (PathPlanning != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PathPlanning, that.PathPlanning))
                    return false;
            } else if (that.PathPlanning != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Duration != null)
                hash ^= Duration.GetHashCode();
            if (PlanConfidence != null)
                hash ^= PlanConfidence.GetHashCode();
            if (DrivingBehavior != null)
                hash ^= DrivingBehavior.GetHashCode();
            if (PathPlanning != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PathPlanning);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Planning";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Duration != null) {
                        if (this.Duration.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Duration.Value > 600)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Duration.Value", "int", "duration", "PlanningDuration", false); throw;
                }
                try {
                    if (this.PlanConfidence != null) {
                        if (this.PlanConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.PlanConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanConfidence.Value", "int", "planConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.DrivingBehavior != null) {
                        try {
                            if (this.DrivingBehavior.Count != 14)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivingBehavior", "Oss.Asn1.BitStringWithNamedBits", "drivingBehavior", "DriveBehavior", false); throw;
                }
                try {
                    if (this.PathPlanning != null) {
                        this.PathPlanning.Validate();
                        if (this.PathPlanning.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PathPlanning.Count > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "pathPlanning", "PathPlanning", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Planning", null, "Planning", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Planning obj0 = new Planning();
            {
                obj0.Duration = this.Duration;
            }
            {
                obj0.PlanConfidence = this.PlanConfidence;
            }
            {
                obj0.DrivingBehavior = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.DrivingBehavior);
            }
            {
                obj0.PathPlanning = this.PathPlanning == null ? null : (MsgFrame.PathPlanning)this.PathPlanning.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.Duration;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("duration ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.PlanConfidence;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("planConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.DrivingBehavior;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("drivingBehavior ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "goStraightForward";
                                    case (int)1: return "laneChangingToLeft";
                                    case (int)2: return "laneChangingToRight";
                                    case (int)3: return "rampIn";
                                    case (int)4: return "rampOut";
                                    case (int)5: return "intersectionStraightThrough";
                                    case (int)6: return "intersectionTurnLeft";
                                    case (int)7: return "intersectionTurnRight";
                                    case (int)8: return "intersectionUTurn";
                                    case (int)9: return "stop-and-go";
                                    case (int)10: return "stop";
                                    case (int)11: return "slow-down";
                                    case (int)12: return "speed-up";
                                    case (int)13: return "parking";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    MsgFrame.PathPlanning data1 = this.PathPlanning;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("pathPlanning ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Duration != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PlanConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.DrivingBehavior != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.PathPlanning != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.Duration != null)
                    {
                        if (enc.BitCount(this.Duration.Value - 0) > 10 || this.Duration.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Duration.Value);
                        enc.EncodeConstrainedInteger((this.Duration.Value - (0)), 10);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Duration.Value", "int", "duration", "PlanningDuration", false); throw;
                }
                try {
                    if (this.PlanConfidence != null)
                    {
                        if (enc.BitCount(this.PlanConfidence.Value - 0) > 8 || this.PlanConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PlanConfidence.Value);
                        enc.Output.Write8BitInt((this.PlanConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanConfidence.Value", "int", "planConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.DrivingBehavior != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges9, this.DrivingBehavior.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 14);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.DrivingBehavior, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.DrivingBehavior, length1, 14);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivingBehavior", "Oss.Asn1.BitStringWithNamedBits", "drivingBehavior", "DriveBehavior", false); throw;
                }
                try {
                    if (this.PathPlanning != null)
                    {
                        this.PathPlanning.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "pathPlanning", "PathPlanning", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Planning", null, "Planning", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Duration = dec.DecodeConstrainedInteger(10, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Duration", "int", "duration", "PlanningDuration", false); throw;
                    }
                }
                else
                {
                    this.Duration = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.PlanConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PlanConfidence", "int", "planConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.PlanConfidence = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges9);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(14, _InternalMetadata.BerCodecMetaData.Ranges9);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 14))
                            dec.RaiseExtLengthError(extPresent1);
                        this.DrivingBehavior = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "DrivingBehavior", "Oss.Asn1.BitStringWithNamedBits", "drivingBehavior", "DriveBehavior", false); throw;
                    }
                }
                else
                {
                    this.DrivingBehavior = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        MsgFrame.PathPlanning data1 = new MsgFrame.PathPlanning();

                        data1.DecodePer(dec);
                        this.PathPlanning = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "pathPlanning", "PathPlanning", false); throw;
                    }
                }
                else
                {
                    this.PathPlanning = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Planning", null, "Planning", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'MotorDataExtension' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class MotorDataExtension : Oss.Asn1.BaseType
    {
        /// <summary>Field 'lights'</summary>
        public Oss.Asn1.BitStringWithNamedBits Lights { get; set; }
        /// <summary>Field 'vehAttitude'</summary>
        public Attitude VehAttitude { get; set; }
        /// <summary>Field 'vehAttitudeConfidence'</summary>
        public AttitudeConfidence VehAttitudeConfidence { get; set; }
        /// <summary>Field 'vehAngVel'</summary>
        public AngularVelocity VehAngVel { get; set; }
        /// <summary>Field 'vehAngVelConfidence'</summary>
        public AngularVelocityConfidence VehAngVelConfidence { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            MotorDataExtension that = right as MotorDataExtension;
            if (Lights != null) {
                if (!Lights.Equals(that.Lights))
                    return false;
            } else if (that.Lights != null)
                return false;
            if (VehAttitude != null) {
                if (!VehAttitude.Equals(that.VehAttitude))
                    return false;
            } else if (that.VehAttitude != null)
                return false;
            if (VehAttitudeConfidence != null) {
                if (!VehAttitudeConfidence.Equals(that.VehAttitudeConfidence))
                    return false;
            } else if (that.VehAttitudeConfidence != null)
                return false;
            if (VehAngVel != null) {
                if (!VehAngVel.Equals(that.VehAngVel))
                    return false;
            } else if (that.VehAngVel != null)
                return false;
            if (VehAngVelConfidence != null) {
                if (!VehAngVelConfidence.Equals(that.VehAngVelConfidence))
                    return false;
            } else if (that.VehAngVelConfidence != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Lights != null)
                hash ^= Lights.GetHashCode();
            if (VehAttitude != null)
                hash ^= VehAttitude.GetHashCode();
            if (VehAttitudeConfidence != null)
                hash ^= VehAttitudeConfidence.GetHashCode();
            if (VehAngVel != null)
                hash ^= VehAngVel.GetHashCode();
            if (VehAngVelConfidence != null)
                hash ^= VehAngVelConfidence.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "MotorDataExtension";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Lights != null) {
                        try {
                            if (this.Lights.Count != 9)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                }
                try {
                    if (this.VehAttitude != null) {
                        this.VehAttitude.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitude", "Attitude", "vehAttitude", "Attitude", false); throw;
                }
                try {
                    if (this.VehAttitudeConfidence != null) {
                        this.VehAttitudeConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitudeConfidence", "AttitudeConfidence", "vehAttitudeConfidence", "AttitudeConfidence", false); throw;
                }
                try {
                    if (this.VehAngVel != null) {
                        this.VehAngVel.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVel", "AngularVelocity", "vehAngVel", "AngularVelocity", false); throw;
                }
                try {
                    if (this.VehAngVelConfidence != null) {
                        this.VehAngVelConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVelConfidence", "AngularVelocityConfidence", "vehAngVelConfidence", "AngularVelocityConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotorDataExtension", null, "MotorDataExtension", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            MotorDataExtension obj0 = new MotorDataExtension();
            {
                obj0.Lights = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Lights);
            }
            {
                obj0.VehAttitude = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehAttitude);
            }
            {
                obj0.VehAttitudeConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehAttitudeConfidence);
            }
            {
                obj0.VehAngVel = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehAngVel);
            }
            {
                obj0.VehAngVelConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehAngVelConfidence);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.Lights;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("lights ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "lowBeamHeadlightsOn";
                                    case (int)1: return "highBeamHeadlightsOn";
                                    case (int)2: return "leftTurnSignalOn";
                                    case (int)3: return "rightTurnSignalOn";
                                    case (int)4: return "hazardSignalOn";
                                    case (int)5: return "automaticLightControlOn";
                                    case (int)6: return "daytimeRunningLightsOn";
                                    case (int)7: return "fogLightOn";
                                    case (int)8: return "parkingLightsOn";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    Attitude data1 = this.VehAttitude;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("vehAttitude ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    AttitudeConfidence data1 = this.VehAttitudeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("vehAttitudeConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    AngularVelocity data1 = this.VehAngVel;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("vehAngVel ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    AngularVelocityConfidence data1 = this.VehAngVelConfidence;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("vehAngVelConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Lights != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.VehAttitude != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.VehAttitudeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.VehAngVel != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.VehAngVelConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (this.Lights != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges3, this.Lights.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 9);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.Lights, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.Lights, length1, 9);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                }
                try {
                    Attitude data1 = this.VehAttitude;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitude", "Attitude", "vehAttitude", "Attitude", false); throw;
                }
                try {
                    AttitudeConfidence data1 = this.VehAttitudeConfidence;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitudeConfidence", "AttitudeConfidence", "vehAttitudeConfidence", "AttitudeConfidence", false); throw;
                }
                try {
                    AngularVelocity data1 = this.VehAngVel;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVel", "AngularVelocity", "vehAngVel", "AngularVelocity", false); throw;
                }
                try {
                    AngularVelocityConfidence data1 = this.VehAngVelConfidence;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVelConfidence", "AngularVelocityConfidence", "vehAngVelConfidence", "AngularVelocityConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotorDataExtension", null, "MotorDataExtension", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges3);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(9, _InternalMetadata.BerCodecMetaData.Ranges3);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 9))
                            dec.RaiseExtLengthError(extPresent1);
                        this.Lights = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Lights", "Oss.Asn1.BitStringWithNamedBits", "lights", "ExteriorLights", false); throw;
                    }
                }
                else
                {
                    this.Lights = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        Attitude data1 = new Attitude();

                        dec.DecodeType(data1);
                        this.VehAttitude = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitude", "Attitude", "vehAttitude", "Attitude", false); throw;
                    }
                }
                else
                {
                    this.VehAttitude = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        AttitudeConfidence data1 = new AttitudeConfidence();

                        dec.DecodeType(data1);
                        this.VehAttitudeConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAttitudeConfidence", "AttitudeConfidence", "vehAttitudeConfidence", "AttitudeConfidence", false); throw;
                    }
                }
                else
                {
                    this.VehAttitudeConfidence = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        AngularVelocity data1 = new AngularVelocity();

                        dec.DecodeType(data1);
                        this.VehAngVel = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVel", "AngularVelocity", "vehAngVel", "AngularVelocity", false); throw;
                    }
                }
                else
                {
                    this.VehAngVel = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        AngularVelocityConfidence data1 = new AngularVelocityConfidence();

                        dec.DecodeType(data1);
                        this.VehAngVelConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehAngVelConfidence", "AngularVelocityConfidence", "vehAngVelConfidence", "AngularVelocityConfidence", false); throw;
                    }
                }
                else
                {
                    this.VehAngVelConfidence = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "MotorDataExtension", null, "MotorDataExtension", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Attitude' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class Attitude : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pitch'</summary>
        public long Pitch { get; set; }
        /// <summary>Field 'roll'</summary>
        public long Roll { get; set; }
        /// <summary>Field 'yaw'</summary>
        public long Yaw { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            Attitude that = right as Attitude;
            if (Pitch != that.Pitch)
                return false;
            if (Roll != that.Roll)
                return false;
            if (Yaw != that.Yaw)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Pitch.GetHashCode();
            hash ^= Roll.GetHashCode();
            hash ^= Yaw.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Attitude";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Pitch < -7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Pitch > 7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pitch", "long", "pitch", "Pitch", false); throw;
                }
                try {
                    if (this.Roll < -7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Roll > 7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Roll", "long", "roll", "Roll", false); throw;
                }
                try {
                    if (this.Yaw < -14400)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Yaw > 14400)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "Yaw", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Attitude", null, "Attitude", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            Attitude obj0 = new Attitude();
            {
                obj0.Pitch = this.Pitch;
            }
            {
                obj0.Roll = this.Roll;
            }
            {
                obj0.Yaw = this.Yaw;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pitch ");
                    prt.Write(this.Pitch);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("roll ");
                    prt.Write(this.Roll);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yaw ");
                    prt.Write(this.Yaw);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Pitch - -7200) > 14 || this.Pitch < -7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Pitch);
                    enc.EncodeConstrainedLongInteger((long)(this.Pitch - (-7200)), 14);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pitch", "long", "pitch", "Pitch", false); throw;
                }
                try {
                    if (enc.BitCount(this.Roll - -7200) > 14 || this.Roll < -7200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Roll);
                    enc.EncodeConstrainedLongInteger((long)(this.Roll - (-7200)), 14);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Roll", "long", "roll", "Roll", false); throw;
                }
                try {
                    if (enc.BitCount(this.Yaw - -14400) > 15 || this.Yaw < -14400)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Yaw);
                    enc.EncodeConstrainedLongInteger((long)(this.Yaw - (-14400)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "Yaw", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Attitude", null, "Attitude", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Pitch = dec.DecodeConstrainedLongInteger(14, -7200);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pitch", "long", "pitch", "Pitch", false); throw;
                }
                try {
                    this.Roll = dec.DecodeConstrainedLongInteger(14, -7200);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Roll", "long", "roll", "Roll", false); throw;
                }
                try {
                    this.Yaw = dec.DecodeConstrainedLongInteger(15, -14400);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Yaw", "long", "yaw", "Yaw", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "Attitude", null, "Attitude", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AttitudeConfidence' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AttitudeConfidence : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pitchConfidence'</summary>
        public HeadingConfidence PitchConfidence { get; set; }
        /// <summary>Field 'rollRateConfidence'</summary>
        public HeadingConfidence RollRateConfidence { get; set; }
        /// <summary>Field 'yawRate'</summary>
        public HeadingConfidence YawRate { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AttitudeConfidence that = right as AttitudeConfidence;
            if (PitchConfidence != that.PitchConfidence)
                return false;
            if (RollRateConfidence != that.RollRateConfidence)
                return false;
            if (YawRate != that.YawRate)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= PitchConfidence.GetHashCode();
            hash ^= RollRateConfidence.GetHashCode();
            hash ^= YawRate.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AttitudeConfidence";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.PitchConfidence)
                    {
                        case HeadingConfidence.Unavailable:
                        case HeadingConfidence.Precl0deg:
                        case HeadingConfidence.Prec05deg:
                        case HeadingConfidence.Prec0ldegId0:
                        case HeadingConfidence.Prec0LdegId:
                        case HeadingConfidence.Prec005deg:
                        case HeadingConfidence.PrecO0ldeg:
                        case HeadingConfidence.Prec00125deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchConfidence", "HeadingConfidence", "pitchConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    switch (this.RollRateConfidence)
                    {
                        case HeadingConfidence.Unavailable:
                        case HeadingConfidence.Precl0deg:
                        case HeadingConfidence.Prec05deg:
                        case HeadingConfidence.Prec0ldegId0:
                        case HeadingConfidence.Prec0LdegId:
                        case HeadingConfidence.Prec005deg:
                        case HeadingConfidence.PrecO0ldeg:
                        case HeadingConfidence.Prec00125deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRateConfidence", "HeadingConfidence", "rollRateConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    switch (this.YawRate)
                    {
                        case HeadingConfidence.Unavailable:
                        case HeadingConfidence.Precl0deg:
                        case HeadingConfidence.Prec05deg:
                        case HeadingConfidence.Prec0ldegId0:
                        case HeadingConfidence.Prec0LdegId:
                        case HeadingConfidence.Prec005deg:
                        case HeadingConfidence.PrecO0ldeg:
                        case HeadingConfidence.Prec00125deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "HeadingConfidence", "yawRate", "HeadingConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AttitudeConfidence", null, "AttitudeConfidence", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AttitudeConfidence obj0 = new AttitudeConfidence();
            {
                obj0.PitchConfidence = this.PitchConfidence;
            }
            {
                obj0.RollRateConfidence = this.RollRateConfidence;
            }
            {
                obj0.YawRate = this.YawRate;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pitchConfidence ");
                    switch (this.PitchConfidence) {
                    case HeadingConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case HeadingConfidence.Precl0deg:
                        prt.Write("precl0deg");
                        break;
                    case HeadingConfidence.Prec05deg:
                        prt.Write("prec05deg");
                        break;
                    case HeadingConfidence.Prec0ldegId0:
                        prt.Write("prec0ldeg");
                        break;
                    case HeadingConfidence.Prec0LdegId:
                        prt.Write("prec0-ldeg");
                        break;
                    case HeadingConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case HeadingConfidence.PrecO0ldeg:
                        prt.Write("precO-0ldeg");
                        break;
                    case HeadingConfidence.Prec00125deg:
                        prt.Write("prec0-0125deg");
                        break;
                    default:
                        prt.Write((int)this.PitchConfidence);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rollRateConfidence ");
                    switch (this.RollRateConfidence) {
                    case HeadingConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case HeadingConfidence.Precl0deg:
                        prt.Write("precl0deg");
                        break;
                    case HeadingConfidence.Prec05deg:
                        prt.Write("prec05deg");
                        break;
                    case HeadingConfidence.Prec0ldegId0:
                        prt.Write("prec0ldeg");
                        break;
                    case HeadingConfidence.Prec0LdegId:
                        prt.Write("prec0-ldeg");
                        break;
                    case HeadingConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case HeadingConfidence.PrecO0ldeg:
                        prt.Write("precO-0ldeg");
                        break;
                    case HeadingConfidence.Prec00125deg:
                        prt.Write("prec0-0125deg");
                        break;
                    default:
                        prt.Write((int)this.RollRateConfidence);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yawRate ");
                    switch (this.YawRate) {
                    case HeadingConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case HeadingConfidence.Precl0deg:
                        prt.Write("precl0deg");
                        break;
                    case HeadingConfidence.Prec05deg:
                        prt.Write("prec05deg");
                        break;
                    case HeadingConfidence.Prec0ldegId0:
                        prt.Write("prec0ldeg");
                        break;
                    case HeadingConfidence.Prec0LdegId:
                        prt.Write("prec0-ldeg");
                        break;
                    case HeadingConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case HeadingConfidence.PrecO0ldeg:
                        prt.Write("precO-0ldeg");
                        break;
                    case HeadingConfidence.Prec00125deg:
                        prt.Write("prec0-0125deg");
                        break;
                    default:
                        prt.Write((int)this.YawRate);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeEnum((int)this.PitchConfidence, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchConfidence", "HeadingConfidence", "pitchConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.RollRateConfidence, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRateConfidence", "HeadingConfidence", "rollRateConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.YawRate, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "HeadingConfidence", "yawRate", "HeadingConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AttitudeConfidence", null, "AttitudeConfidence", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.PitchConfidence = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchConfidence", "HeadingConfidence", "pitchConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    this.RollRateConfidence = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRateConfidence", "HeadingConfidence", "rollRateConfidence", "HeadingConfidence", false); throw;
                }
                try {
                    this.YawRate = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "HeadingConfidence", "yawRate", "HeadingConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AttitudeConfidence", null, "AttitudeConfidence", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AngularVelocity' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AngularVelocity : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pitchRate'</summary>
        public long PitchRate { get; set; }
        /// <summary>Field 'rollRate'</summary>
        public long RollRate { get; set; }
        /// <summary>Field 'yawRate'</summary>
        public long YawRate { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AngularVelocity that = right as AngularVelocity;
            if (PitchRate != that.PitchRate)
                return false;
            if (RollRate != that.RollRate)
                return false;
            if (YawRate != that.YawRate)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= PitchRate.GetHashCode();
            hash ^= RollRate.GetHashCode();
            hash ^= YawRate.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AngularVelocity";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.PitchRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.PitchRate > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "long", "pitchRate", "PitchRate", false); throw;
                }
                try {
                    if (this.RollRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.RollRate > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "long", "rollRate", "RollRate", false); throw;
                }
                try {
                    if (this.YawRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.YawRate > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "long", "yawRate", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocity", null, "AngularVelocity", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AngularVelocity obj0 = new AngularVelocity();
            {
                obj0.PitchRate = this.PitchRate;
            }
            {
                obj0.RollRate = this.RollRate;
            }
            {
                obj0.YawRate = this.YawRate;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pitchRate ");
                    prt.Write(this.PitchRate);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rollRate ");
                    prt.Write(this.RollRate);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yawRate ");
                    prt.Write(this.YawRate);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.PitchRate - -32767) > 16 || this.PitchRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.PitchRate);
                    enc.EncodeConstrainedLongInteger((long)(this.PitchRate - (-32767)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "long", "pitchRate", "PitchRate", false); throw;
                }
                try {
                    if (enc.BitCount(this.RollRate - -32767) > 16 || this.RollRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RollRate);
                    enc.EncodeConstrainedLongInteger((long)(this.RollRate - (-32767)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "long", "rollRate", "RollRate", false); throw;
                }
                try {
                    if (enc.BitCount(this.YawRate - -32767) > 16 || this.YawRate < -32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.YawRate);
                    enc.EncodeConstrainedLongInteger((long)(this.YawRate - (-32767)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "long", "yawRate", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocity", null, "AngularVelocity", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.PitchRate = dec.DecodeConstrainedLongInteger(16, -32767);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "long", "pitchRate", "PitchRate", false); throw;
                }
                try {
                    this.RollRate = dec.DecodeConstrainedLongInteger(16, -32767);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "long", "rollRate", "RollRate", false); throw;
                }
                try {
                    this.YawRate = dec.DecodeConstrainedLongInteger(16, -32767);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "long", "yawRate", "YawRate", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocity", null, "AngularVelocity", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AngularVelocityConfidence' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AngularVelocityConfidence : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pitchRate'</summary>
        public AngularVConfidence PitchRate { get; set; }
        /// <summary>Field 'rollRate'</summary>
        public AngularVConfidence RollRate { get; set; }
        /// <summary>Field 'yawRate'</summary>
        public AngularVConfidence YawRate { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AngularVelocityConfidence that = right as AngularVelocityConfidence;
            if (PitchRate != that.PitchRate)
                return false;
            if (RollRate != that.RollRate)
                return false;
            if (YawRate != that.YawRate)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= PitchRate.GetHashCode();
            hash ^= RollRate.GetHashCode();
            hash ^= YawRate.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AngularVelocityConfidence";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.PitchRate)
                    {
                        case AngularVConfidence.Unavailable:
                        case AngularVConfidence.Prec100deg:
                        case AngularVConfidence.Prec10deg:
                        case AngularVConfidence.Prec5deg:
                        case AngularVConfidence.Prec1deg:
                        case AngularVConfidence.Prec01deg:
                        case AngularVConfidence.Prec005deg:
                        case AngularVConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "AngularVConfidence", "pitchRate", "AngularVConfidence", false); throw;
                }
                try {
                    switch (this.RollRate)
                    {
                        case AngularVConfidence.Unavailable:
                        case AngularVConfidence.Prec100deg:
                        case AngularVConfidence.Prec10deg:
                        case AngularVConfidence.Prec5deg:
                        case AngularVConfidence.Prec1deg:
                        case AngularVConfidence.Prec01deg:
                        case AngularVConfidence.Prec005deg:
                        case AngularVConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "AngularVConfidence", "rollRate", "AngularVConfidence", false); throw;
                }
                try {
                    switch (this.YawRate)
                    {
                        case AngularVConfidence.Unavailable:
                        case AngularVConfidence.Prec100deg:
                        case AngularVConfidence.Prec10deg:
                        case AngularVConfidence.Prec5deg:
                        case AngularVConfidence.Prec1deg:
                        case AngularVConfidence.Prec01deg:
                        case AngularVConfidence.Prec005deg:
                        case AngularVConfidence.Prec001deg:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "AngularVConfidence", "yawRate", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocityConfidence", null, "AngularVelocityConfidence", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AngularVelocityConfidence obj0 = new AngularVelocityConfidence();
            {
                obj0.PitchRate = this.PitchRate;
            }
            {
                obj0.RollRate = this.RollRate;
            }
            {
                obj0.YawRate = this.YawRate;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pitchRate ");
                    switch (this.PitchRate) {
                    case AngularVConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AngularVConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AngularVConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AngularVConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AngularVConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AngularVConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AngularVConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AngularVConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.PitchRate);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rollRate ");
                    switch (this.RollRate) {
                    case AngularVConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AngularVConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AngularVConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AngularVConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AngularVConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AngularVConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AngularVConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AngularVConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.RollRate);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("yawRate ");
                    switch (this.YawRate) {
                    case AngularVConfidence.Unavailable:
                        prt.Write("unavailable");
                        break;
                    case AngularVConfidence.Prec100deg:
                        prt.Write("prec100deg");
                        break;
                    case AngularVConfidence.Prec10deg:
                        prt.Write("prec10deg");
                        break;
                    case AngularVConfidence.Prec5deg:
                        prt.Write("prec5deg");
                        break;
                    case AngularVConfidence.Prec1deg:
                        prt.Write("prec1deg");
                        break;
                    case AngularVConfidence.Prec01deg:
                        prt.Write("prec0-1deg");
                        break;
                    case AngularVConfidence.Prec005deg:
                        prt.Write("prec0-05deg");
                        break;
                    case AngularVConfidence.Prec001deg:
                        prt.Write("prec0-01deg");
                        break;
                    default:
                        prt.Write((int)this.YawRate);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeEnum((int)this.PitchRate, _InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "AngularVConfidence", "pitchRate", "AngularVConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.RollRate, _InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "AngularVConfidence", "rollRate", "AngularVConfidence", false); throw;
                }
                try {
                    enc.EncodeEnum((int)this.YawRate, _InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "AngularVConfidence", "yawRate", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocityConfidence", null, "AngularVelocityConfidence", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.PitchRate = (AngularVConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PitchRate", "AngularVConfidence", "pitchRate", "AngularVConfidence", false); throw;
                }
                try {
                    this.RollRate = (AngularVConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RollRate", "AngularVConfidence", "rollRate", "AngularVConfidence", false); throw;
                }
                try {
                    this.YawRate = (AngularVConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum26);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "YawRate", "AngularVConfidence", "yawRate", "AngularVConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AngularVelocityConfidence", null, "AngularVelocityConfidence", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Non-motorDataExtension' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class NonMotorDataExtension : Oss.Asn1.BaseType
    {
        /// <summary>Field 'overallRadius'</summary>
        public int OverallRadius { get; set; }
        /// <summary>Field 'non-motorData'</summary>
        public MsgFrame.NonMotorData NonMotorData { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            NonMotorDataExtension that = right as NonMotorDataExtension;
            if (OverallRadius != that.OverallRadius)
                return false;
            if (NonMotorData != null) {
                if (!NonMotorData.Equals(that.NonMotorData))
                    return false;
            } else if (that.NonMotorData != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= OverallRadius.GetHashCode();
            if (NonMotorData != null)
                hash ^= NonMotorData.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Non-motorDataExtension";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.OverallRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.OverallRadius > 200)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    if (this.NonMotorData == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.NonMotorData.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorDataExtension", null, "Non-motorDataExtension", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            NonMotorDataExtension obj0 = new NonMotorDataExtension();
            {
                obj0.OverallRadius = this.OverallRadius;
            }
            {
                obj0.NonMotorData = Oss.Asn1.Internal.CopyUtil.CopyType(this.NonMotorData);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("overallRadius ");
                    prt.Write(this.OverallRadius);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("non-motorData ");
                    if (this.NonMotorData == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.NonMotorData);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.OverallRadius - 0) > 8 || this.OverallRadius < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.OverallRadius);
                    enc.Output.Write8BitInt((this.OverallRadius - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeType(this.NonMotorData);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorDataExtension", null, "Non-motorDataExtension", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.OverallRadius = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "OverallRadius", "int", "overallRadius", "INTEGER", false); throw;
                }
                try {
                    MsgFrame.NonMotorData data1 = new MsgFrame.NonMotorData();

                    dec.DecodeType(data1);
                    this.NonMotorData = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "NonMotorData", "MsgFrame.NonMotorData", "non-motorData", "Non-motorData", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "NonMotorDataExtension", null, "Non-motorDataExtension", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DetectedObstacleList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class DetectedObstacleList : System.Collections.Generic.List<DetectedObstacleData>
    {
        /// <summary>
        /// Initializes a new instance of the DetectedObstacleList class that is empty and has the default initial capacity.
        /// </summary>
        public DetectedObstacleList() : base() {}
        /// <summary>
        /// Initializes a new instance of the DetectedObstacleList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new DetectedObstacleList.</param>
        /// </summary>
        public DetectedObstacleList(System.Collections.Generic.IEnumerable<DetectedObstacleData> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the DetectedObstacleList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new DetectedObstacleList can initially store.</param>
        /// </summary>
        public DetectedObstacleList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DetectedObstacleList that = right as DetectedObstacleList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "DetectedObstacleData", "#" + i1.ToString(), "DetectedObstacleData", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 64)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleList", null, "DetectedObstacleList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            DetectedObstacleList obj0 = new DetectedObstacleList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 64)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 64);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "DetectedObstacleData", "#" + i0.ToString(), "DetectedObstacleData", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleList", null, "DetectedObstacleList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 64, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            DetectedObstacleData data1 = new DetectedObstacleData();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "DetectedObstacleData", "#" + this.Count.ToString(), "DetectedObstacleData", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleList", null, "DetectedObstacleList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DetectedObstacleData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class DetectedObstacleData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'obsType'</summary>
        public ObstacleType ObsType { get; set; }
        /// <summary>Field 'objTypeConfidence'</summary>
        public int? ObjTypeConfidence { get; set; }
        /// <summary>Field 'obsId'</summary>
        public int ObsId { get; set; }
        /// <summary>Field 'source'</summary>
        public SourceType Source { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'pos'</summary>
        public PositionOffsetLLV Pos { get; set; }
        /// <summary>Field 'posConfidence'</summary>
        public PositionConfidenceSet PosConfidence { get; set; }
        /// <summary>Field 'speed'</summary>
        public int Speed { get; set; }
        /// <summary>Field 'speedCfd'</summary>
        public SpeedConfidence? SpeedCfd { get; set; }
        /// <summary>Field 'heading'</summary>
        public int Heading { get; set; }
        /// <summary>Field 'headingCfd'</summary>
        public HeadingConfidence? HeadingCfd { get; set; }
        /// <summary>Field 'verSpeed'</summary>
        public int? VerSpeed { get; set; }
        /// <summary>Field 'verSpeedConfidence'</summary>
        public SpeedConfidence? VerSpeedConfidence { get; set; }
        /// <summary>Field 'accelSet'</summary>
        public AccelerationSet4Way AccelSet { get; set; }
        /// <summary>Field 'size'</summary>
        public ObjectSize Size { get; set; }
        /// <summary>Field 'objSizeConfidence'</summary>
        public ObjectSizeConfidence ObjSizeConfidence { get; set; }
        /// <summary>Field 'tracking'</summary>
        public int? Tracking { get; set; }
        /// <summary>Field 'polygon'</summary>
        public MsgFrame.Polygon Polygon { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DetectedObstacleData that = right as DetectedObstacleData;
            if (ObsType != that.ObsType)
                return false;
            if (ObjTypeConfidence != null) {
                if (ObjTypeConfidence != that.ObjTypeConfidence)
                    return false;
            } else if (that.ObjTypeConfidence != null)
                return false;
            if (ObsId != that.ObsId)
                return false;
            if (Source != that.Source)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (PosConfidence != null) {
                if (!PosConfidence.Equals(that.PosConfidence))
                    return false;
            } else if (that.PosConfidence != null)
                return false;
            if (Speed != that.Speed)
                return false;
            if (SpeedCfd != null) {
                if (SpeedCfd != that.SpeedCfd)
                    return false;
            } else if (that.SpeedCfd != null)
                return false;
            if (Heading != that.Heading)
                return false;
            if (HeadingCfd != null) {
                if (HeadingCfd != that.HeadingCfd)
                    return false;
            } else if (that.HeadingCfd != null)
                return false;
            if (VerSpeed != null) {
                if (VerSpeed != that.VerSpeed)
                    return false;
            } else if (that.VerSpeed != null)
                return false;
            if (VerSpeedConfidence != null) {
                if (VerSpeedConfidence != that.VerSpeedConfidence)
                    return false;
            } else if (that.VerSpeedConfidence != null)
                return false;
            if (AccelSet != null) {
                if (!AccelSet.Equals(that.AccelSet))
                    return false;
            } else if (that.AccelSet != null)
                return false;
            if (Size != null) {
                if (!Size.Equals(that.Size))
                    return false;
            } else if (that.Size != null)
                return false;
            if (ObjSizeConfidence != null) {
                if (!ObjSizeConfidence.Equals(that.ObjSizeConfidence))
                    return false;
            } else if (that.ObjSizeConfidence != null)
                return false;
            if (Tracking != null) {
                if (Tracking != that.Tracking)
                    return false;
            } else if (that.Tracking != null)
                return false;
            if (Polygon != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Polygon, that.Polygon))
                    return false;
            } else if (that.Polygon != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= ObsType.GetHashCode();
            if (ObjTypeConfidence != null)
                hash ^= ObjTypeConfidence.GetHashCode();
            hash ^= ObsId.GetHashCode();
            hash ^= Source.GetHashCode();
            hash ^= SecMark.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (PosConfidence != null)
                hash ^= PosConfidence.GetHashCode();
            hash ^= Speed.GetHashCode();
            if (SpeedCfd != null)
                hash ^= SpeedCfd.GetHashCode();
            hash ^= Heading.GetHashCode();
            if (HeadingCfd != null)
                hash ^= HeadingCfd.GetHashCode();
            if (VerSpeed != null)
                hash ^= VerSpeed.GetHashCode();
            if (VerSpeedConfidence != null)
                hash ^= VerSpeedConfidence.GetHashCode();
            if (AccelSet != null)
                hash ^= AccelSet.GetHashCode();
            if (Size != null)
                hash ^= Size.GetHashCode();
            if (ObjSizeConfidence != null)
                hash ^= ObjSizeConfidence.GetHashCode();
            if (Tracking != null)
                hash ^= Tracking.GetHashCode();
            if (Polygon != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Polygon);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "DetectedObstacleData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsType", "ObstacleType", "obsType", "ObstacleType", false); throw;
                }
                try {
                    if (this.ObjTypeConfidence != null) {
                        if (this.ObjTypeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.ObjTypeConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjTypeConfidence.Value", "int", "objTypeConfidence", "Confidence", false); throw;
                }
                try {
                    if (this.ObsId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.ObsId > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsId", "int", "obsId", "INTEGER", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.Pos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Pos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.PosConfidence == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PosConfidence.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Speed > 8191)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.SpeedCfd != null) {
                        switch (this.SpeedCfd.Value)
                        {
                            case SpeedConfidence.Unavailable:
                            case SpeedConfidence.Prec100ms:
                            case SpeedConfidence.Prec10ms:
                            case SpeedConfidence.Prec5ms:
                            case SpeedConfidence.Prec1ms:
                            case SpeedConfidence.Prec01ms:
                            case SpeedConfidence.Prec005ms:
                            case SpeedConfidence.Prec001ms:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Heading > 28800)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.HeadingCfd != null) {
                        switch (this.HeadingCfd.Value)
                        {
                            case HeadingConfidence.Unavailable:
                            case HeadingConfidence.Precl0deg:
                            case HeadingConfidence.Prec05deg:
                            case HeadingConfidence.Prec0ldegId0:
                            case HeadingConfidence.Prec0LdegId:
                            case HeadingConfidence.Prec005deg:
                            case HeadingConfidence.PrecO0ldeg:
                            case HeadingConfidence.Prec00125deg:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.VerSpeed != null) {
                        if (this.VerSpeed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.VerSpeed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeed.Value", "int", "verSpeed", "Speed", false); throw;
                }
                try {
                    if (this.VerSpeedConfidence != null) {
                        switch (this.VerSpeedConfidence.Value)
                        {
                            case SpeedConfidence.Unavailable:
                            case SpeedConfidence.Prec100ms:
                            case SpeedConfidence.Prec10ms:
                            case SpeedConfidence.Prec5ms:
                            case SpeedConfidence.Prec1ms:
                            case SpeedConfidence.Prec01ms:
                            case SpeedConfidence.Prec005ms:
                            case SpeedConfidence.Prec001ms:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeedConfidence.Value", "SpeedConfidence", "verSpeedConfidence", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.AccelSet != null) {
                        this.AccelSet.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    if (this.Size == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Size.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "ObjectSize", "size", "ObjectSize", false); throw;
                }
                try {
                    if (this.ObjSizeConfidence != null) {
                        this.ObjSizeConfidence.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                }
                try {
                    if (this.Tracking != null) {
                        if (this.Tracking.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Tracking.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking.Value", "int", "tracking", "INTEGER", false); throw;
                }
                try {
                    if (this.Polygon != null) {
                        this.Polygon.Validate();
                        if (this.Polygon.Count < 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Polygon.Count > 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleData", null, "DetectedObstacleData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            DetectedObstacleData obj0 = new DetectedObstacleData();
            {
                obj0.ObsType = this.ObsType;
            }
            {
                obj0.ObjTypeConfidence = this.ObjTypeConfidence;
            }
            {
                obj0.ObsId = this.ObsId;
            }
            {
                obj0.Source = this.Source;
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.PosConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.PosConfidence);
            }
            {
                obj0.Speed = this.Speed;
            }
            {
                obj0.SpeedCfd = this.SpeedCfd;
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.HeadingCfd = this.HeadingCfd;
            }
            {
                obj0.VerSpeed = this.VerSpeed;
            }
            {
                obj0.VerSpeedConfidence = this.VerSpeedConfidence;
            }
            {
                obj0.AccelSet = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccelSet);
            }
            {
                obj0.Size = Oss.Asn1.Internal.CopyUtil.CopyType(this.Size);
            }
            {
                obj0.ObjSizeConfidence = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObjSizeConfidence);
            }
            {
                obj0.Tracking = this.Tracking;
            }
            {
                obj0.Polygon = this.Polygon == null ? null : (MsgFrame.Polygon)this.Polygon.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("obsType ");
                    switch (this.ObsType) {
                    case ObstacleType.Unknown:
                        prt.Write("unknown");
                        break;
                    case ObstacleType.Rockfall:
                        prt.Write("rockfall");
                        break;
                    case ObstacleType.Landslide:
                        prt.Write("landslide");
                        break;
                    case ObstacleType.AnimalIntrusion:
                        prt.Write("animal-intrusion");
                        break;
                    case ObstacleType.LiquidSpill:
                        prt.Write("liquid-spill");
                        break;
                    case ObstacleType.GoodsScattered:
                        prt.Write("goods-scattered");
                        break;
                    case ObstacleType.Trafficcone:
                        prt.Write("trafficcone");
                        break;
                    case ObstacleType.SafetyTriangle:
                        prt.Write("safety-triangle");
                        break;
                    case ObstacleType.TrafficRoadblock:
                        prt.Write("traffic-roadblock");
                        break;
                    case ObstacleType.InspectionShaftWithoutCover:
                        prt.Write("inspection-shaft-without-cover");
                        break;
                    case ObstacleType.UnknownFragments:
                        prt.Write("unknown-fragments");
                        break;
                    case ObstacleType.UnknownHardObject:
                        prt.Write("unknown-hard-object");
                        break;
                    case ObstacleType.UnknownSoftObject:
                        prt.Write("unknown-soft-object");
                        break;
                    default:
                        prt.Write((int)this.ObsType);
                        break;
                    }
                }
                {
                    int? data1 = this.ObjTypeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("objTypeConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("obsId ");
                    prt.Write(this.ObsId);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("source ");
                    switch (this.Source) {
                    case SourceType.Unknown:
                        prt.Write("unknown");
                        break;
                    case SourceType.Selfinfo:
                        prt.Write("selfinfo");
                        break;
                    case SourceType.V2x:
                        prt.Write("v2x");
                        break;
                    case SourceType.Video:
                        prt.Write("video");
                        break;
                    case SourceType.MicrowaveRadar:
                        prt.Write("microwaveRadar");
                        break;
                    case SourceType.Loop:
                        prt.Write("loop");
                        break;
                    default:
                        prt.Write((int)this.Source);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("pos ");
                    if (this.Pos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Pos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("posConfidence ");
                    if (this.PosConfidence == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.PosConfidence);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("speed ");
                    prt.Write(this.Speed);
                }
                {
                    SpeedConfidence? data1 = this.SpeedCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("speedCfd ");
                        switch (data1.Value) {
                        case SpeedConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SpeedConfidence.Prec100ms:
                            prt.Write("prec100ms");
                            break;
                        case SpeedConfidence.Prec10ms:
                            prt.Write("prec10ms");
                            break;
                        case SpeedConfidence.Prec5ms:
                            prt.Write("prec5ms");
                            break;
                        case SpeedConfidence.Prec1ms:
                            prt.Write("prec1ms");
                            break;
                        case SpeedConfidence.Prec01ms:
                            prt.Write("prec0-1ms");
                            break;
                        case SpeedConfidence.Prec005ms:
                            prt.Write("prec0-05ms");
                            break;
                        case SpeedConfidence.Prec001ms:
                            prt.Write("prec0-01ms");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("heading ");
                    prt.Write(this.Heading);
                }
                {
                    HeadingConfidence? data1 = this.HeadingCfd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("headingCfd ");
                        switch (data1.Value) {
                        case HeadingConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case HeadingConfidence.Precl0deg:
                            prt.Write("precl0deg");
                            break;
                        case HeadingConfidence.Prec05deg:
                            prt.Write("prec05deg");
                            break;
                        case HeadingConfidence.Prec0ldegId0:
                            prt.Write("prec0ldeg");
                            break;
                        case HeadingConfidence.Prec0LdegId:
                            prt.Write("prec0-ldeg");
                            break;
                        case HeadingConfidence.Prec005deg:
                            prt.Write("prec0-05deg");
                            break;
                        case HeadingConfidence.PrecO0ldeg:
                            prt.Write("precO-0ldeg");
                            break;
                        case HeadingConfidence.Prec00125deg:
                            prt.Write("prec0-0125deg");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    int? data1 = this.VerSpeed;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("verSpeed ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    SpeedConfidence? data1 = this.VerSpeedConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("verSpeedConfidence ");
                        switch (data1.Value) {
                        case SpeedConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case SpeedConfidence.Prec100ms:
                            prt.Write("prec100ms");
                            break;
                        case SpeedConfidence.Prec10ms:
                            prt.Write("prec10ms");
                            break;
                        case SpeedConfidence.Prec5ms:
                            prt.Write("prec5ms");
                            break;
                        case SpeedConfidence.Prec1ms:
                            prt.Write("prec1ms");
                            break;
                        case SpeedConfidence.Prec01ms:
                            prt.Write("prec0-1ms");
                            break;
                        case SpeedConfidence.Prec005ms:
                            prt.Write("prec0-05ms");
                            break;
                        case SpeedConfidence.Prec001ms:
                            prt.Write("prec0-01ms");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    AccelerationSet4Way data1 = this.AccelSet;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("accelSet ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    ObjectSize data1 = this.Size;

                    prt.WriteLine(",");
                    prt.Write("size ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                {
                    ObjectSizeConfidence data1 = this.ObjSizeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("objSizeConfidence ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.Tracking;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tracking ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.Polygon data1 = this.Polygon;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("polygon ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[2];

                enc.Output.WriteBool(extPresent0);
                if (this.ObjTypeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.SpeedCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.HeadingCfd != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.VerSpeed != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.VerSpeedConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.AccelSet != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.ObjSizeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.Tracking != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                if (this.Polygon != null)
                    optMask0[1] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 9);
                try {
                    enc.EncodeEnumWithExtension((int)this.ObsType, _InternalMetadata.PerCodecMetaData.SortedEnum38, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum38);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsType", "ObstacleType", "obsType", "ObstacleType", false); throw;
                }
                try {
                    if (this.ObjTypeConfidence != null)
                    {
                        if (enc.BitCount(this.ObjTypeConfidence.Value - 0) > 8 || this.ObjTypeConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.ObjTypeConfidence.Value);
                        enc.Output.Write8BitInt((this.ObjTypeConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjTypeConfidence.Value", "int", "objTypeConfidence", "Confidence", false); throw;
                }
                try {
                    if (enc.BitCount(this.ObsId - 0) > 16 || this.ObsId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.ObsId);
                    enc.EncodeConstrainedInteger((this.ObsId - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsId", "int", "obsId", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Source, _InternalMetadata.PerCodecMetaData.SortedEnum16, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.Pos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    enc.EncodeType(this.PosConfidence);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                }
                try {
                    if (enc.BitCount(this.Speed - 0) > 13 || this.Speed < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed);
                    enc.EncodeConstrainedInteger((this.Speed - (0)), 13);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                try {
                    if (this.SpeedCfd != null)
                    {
                        enc.EncodeEnum((int)this.SpeedCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum3);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd.Value", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                }
                try {
                    if (enc.BitCount(this.Heading - 0) > 15 || this.Heading < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading);
                    enc.EncodeConstrainedInteger((this.Heading - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.HeadingCfd != null)
                    {
                        enc.EncodeEnum((int)this.HeadingCfd.Value, _InternalMetadata.PerCodecMetaData.SortedEnum4);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd.Value", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                }
                try {
                    if (this.VerSpeed != null)
                    {
                        if (enc.BitCount(this.VerSpeed.Value - 0) > 13 || this.VerSpeed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VerSpeed.Value);
                        enc.EncodeConstrainedInteger((this.VerSpeed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeed.Value", "int", "verSpeed", "Speed", false); throw;
                }
                try {
                    if (this.VerSpeedConfidence != null)
                    {
                        enc.EncodeEnum((int)this.VerSpeedConfidence.Value, _InternalMetadata.PerCodecMetaData.SortedEnum3);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeedConfidence.Value", "SpeedConfidence", "verSpeedConfidence", "SpeedConfidence", false); throw;
                }
                try {
                    if (this.AccelSet != null)
                    {
                        enc.EncodeType(this.AccelSet);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                }
                try {
                    enc.EncodeType(this.Size);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "ObjectSize", "size", "ObjectSize", false); throw;
                }
                try {
                    if (this.ObjSizeConfidence != null)
                    {
                        enc.EncodeType(this.ObjSizeConfidence);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                }
                try {
                    if (this.Tracking != null)
                    {
                        if (enc.BitCount(this.Tracking.Value - 1) > 16 || this.Tracking.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Tracking.Value);
                        enc.EncodeConstrainedInteger((this.Tracking.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking.Value", "int", "tracking", "INTEGER", false); throw;
                }
                try {
                    if (this.Polygon != null)
                    {
                        this.Polygon.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleData", null, "DetectedObstacleData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 10);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum38, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum38, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum38);
                    this.ObsType = (ObstacleType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsType", "ObstacleType", "obsType", "ObstacleType", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.ObjTypeConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjTypeConfidence", "int", "objTypeConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.ObjTypeConfidence = null;
                }
                try {
                    this.ObsId = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObsId", "int", "obsId", "INTEGER", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum16, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum16, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum16);
                    this.Source = (SourceType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Source", "SourceType", "source", "SourceType", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    PositionOffsetLLV data1 = new PositionOffsetLLV();

                    dec.DecodeType(data1);
                    this.Pos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "PositionOffsetLLV", "pos", "PositionOffsetLLV", false); throw;
                }
                try {
                    PositionConfidenceSet data1 = new PositionConfidenceSet();

                    dec.DecodeType(data1);
                    this.PosConfidence = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PosConfidence", "PositionConfidenceSet", "posConfidence", "PositionConfidenceSet", false); throw;
                }
                try {
                    this.Speed = dec.DecodeConstrainedInteger(13, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.SpeedCfd = (SpeedConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum3);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SpeedCfd", "SpeedConfidence", "speedCfd", "SpeedConfidence", false); throw;
                    }
                }
                else
                {
                    this.SpeedCfd = null;
                }
                try {
                    this.Heading = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.HeadingCfd = (HeadingConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "HeadingCfd", "HeadingConfidence", "headingCfd", "HeadingConfidence", false); throw;
                    }
                }
                else
                {
                    this.HeadingCfd = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.VerSpeed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeed", "int", "verSpeed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.VerSpeed = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.VerSpeedConfidence = (SpeedConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum3);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VerSpeedConfidence", "SpeedConfidence", "verSpeedConfidence", "SpeedConfidence", false); throw;
                    }
                }
                else
                {
                    this.VerSpeedConfidence = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        AccelerationSet4Way data1 = new AccelerationSet4Way();

                        dec.DecodeType(data1);
                        this.AccelSet = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccelSet", "AccelerationSet4Way", "accelSet", "AccelerationSet4Way", false); throw;
                    }
                }
                else
                {
                    this.AccelSet = null;
                }
                try {
                    ObjectSize data1 = new ObjectSize();

                    dec.DecodeType(data1);
                    this.Size = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Size", "ObjectSize", "size", "ObjectSize", false); throw;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        ObjectSizeConfidence data1 = new ObjectSizeConfidence();

                        dec.DecodeType(data1);
                        this.ObjSizeConfidence = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObjSizeConfidence", "ObjectSizeConfidence", "objSizeConfidence", "ObjectSizeConfidence", false); throw;
                    }
                }
                else
                {
                    this.ObjSizeConfidence = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        this.Tracking = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Tracking", "int", "tracking", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Tracking = null;
                }
                if ((optMask0[1] & 0x40) != 0)
                {
                    try {
                        MsgFrame.Polygon data1 = new MsgFrame.Polygon();

                        data1.DecodePer(dec);
                        this.Polygon = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Polygon", "MsgFrame.Polygon", "polygon", "Polygon", false); throw;
                    }
                }
                else
                {
                    this.Polygon = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DetectedObstacleData", null, "DetectedObstacleData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ObstacleType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ObstacleType
    {
        Unknown = 0,
        Rockfall = 1,
        Landslide = 2,
        AnimalIntrusion = 3,
        LiquidSpill = 4,
        GoodsScattered = 5,
        Trafficcone = 6,
        SafetyTriangle = 7,
        TrafficRoadblock = 8,
        InspectionShaftWithoutCover = 9,
        UnknownFragments = 10,
        UnknownHardObject = 11,
        UnknownSoftObject = 12
    }
    /// <summary>
    /// Represents schema type 'ObjectSize' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ObjectSize : Oss.Asn1.BaseType
    {
        /// <summary>Field 'width'</summary>
        public int Width { get; set; }
        /// <summary>Field 'length'</summary>
        public int Length { get; set; }
        /// <summary>Field 'height'</summary>
        public int? Height { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ObjectSize that = right as ObjectSize;
            if (Width != that.Width)
                return false;
            if (Length != that.Length)
                return false;
            if (Height != null) {
                if (Height != that.Height)
                    return false;
            } else if (that.Height != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Width.GetHashCode();
            hash ^= Length.GetHashCode();
            if (Height != null)
                hash ^= Height.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ObjectSize";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Width < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Width > 1023)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "SizeValue", false); throw;
                }
                try {
                    if (this.Length < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Length > 1023)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "SizeValue", false); throw;
                }
                try {
                    if (this.Height != null) {
                        if (this.Height.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Height.Value > 1023)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Height.Value", "int", "height", "SizeValue", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSize", null, "ObjectSize", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ObjectSize obj0 = new ObjectSize();
            {
                obj0.Width = this.Width;
            }
            {
                obj0.Length = this.Length;
            }
            {
                obj0.Height = this.Height;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("width ");
                    prt.Write(this.Width);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("length ");
                    prt.Write(this.Length);
                }
                {
                    int? data1 = this.Height;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("height ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.Height != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    if (enc.BitCount(this.Width - 0) > 10 || this.Width < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Width);
                    enc.EncodeConstrainedInteger((this.Width - (0)), 10);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "SizeValue", false); throw;
                }
                try {
                    if (enc.BitCount(this.Length - 0) > 10 || this.Length < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Length);
                    enc.EncodeConstrainedInteger((this.Length - (0)), 10);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "SizeValue", false); throw;
                }
                try {
                    if (this.Height != null)
                    {
                        if (enc.BitCount(this.Height.Value - 0) > 10 || this.Height.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Height.Value);
                        enc.EncodeConstrainedInteger((this.Height.Value - (0)), 10);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Height.Value", "int", "height", "SizeValue", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSize", null, "ObjectSize", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Width = dec.DecodeConstrainedInteger(10, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Width", "int", "width", "SizeValue", false); throw;
                }
                try {
                    this.Length = dec.DecodeConstrainedInteger(10, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Length", "int", "length", "SizeValue", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.Height = dec.DecodeConstrainedInteger(10, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Height", "int", "height", "SizeValue", false); throw;
                    }
                }
                else
                {
                    this.Height = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ObjectSize", null, "ObjectSize", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RTEList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class RTEList : System.Collections.Generic.List<RTEData>
    {
        /// <summary>
        /// Initializes a new instance of the RTEList class that is empty and has the default initial capacity.
        /// </summary>
        public RTEList() : base() {}
        /// <summary>
        /// Initializes a new instance of the RTEList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new RTEList.</param>
        /// </summary>
        public RTEList(System.Collections.Generic.IEnumerable<RTEData> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the RTEList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new RTEList can initially store.</param>
        /// </summary>
        public RTEList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTEList that = right as RTEList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "RTEData", "#" + i1.ToString(), "RTEData", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEList", null, "RTEList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            RTEList obj0 = new RTEList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 8);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "RTEData", "#" + i0.ToString(), "RTEData", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEList", null, "RTEList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 8, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            RTEData data1 = new RTEData();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "RTEData", "#" + this.Count.ToString(), "RTEData", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEList", null, "RTEList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RTEData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RTEData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'rteId'</summary>
        public int RteId { get; set; }
        /// <summary>Field 'eventType'</summary>
        public int EventType { get; set; }
        /// <summary>Field 'eventSource'</summary>
        public MsgFrame.EventSource EventSource { get; set; }
        /// <summary>Field 'eventPos'</summary>
        public PositionOffsetLLV EventPos { get; set; }
        /// <summary>Field 'eventRadius'</summary>
        public int? EventRadius { get; set; }
        /// <summary>Field 'description'</summary>
        public MsgFrame.Description Description { get; set; }
        /// <summary>Field 'timeDetails'</summary>
        public RSITimeDetails TimeDetails { get; set; }
        /// <summary>Field 'priority'</summary>
        public byte[] Priority { get; set; }
        /// <summary>Field 'referencePaths'</summary>
        public ReferencePathList ReferencePaths { get; set; }
        /// <summary>Field 'referenceLinks'</summary>
        public ReferenceLinkList ReferenceLinks { get; set; }
        /// <summary>Field 'eventConfidence'</summary>
        public int? EventConfidence { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTEData that = right as RTEData;
            if (RteId != that.RteId)
                return false;
            if (EventType != that.EventType)
                return false;
            if (EventSource != that.EventSource)
                return false;
            if (EventPos != null) {
                if (!EventPos.Equals(that.EventPos))
                    return false;
            } else if (that.EventPos != null)
                return false;
            if (EventRadius != null) {
                if (EventRadius != that.EventRadius)
                    return false;
            } else if (that.EventRadius != null)
                return false;
            if (Description != null) {
                if (!Description.Equals(that.Description))
                    return false;
            } else if (that.Description != null)
                return false;
            if (TimeDetails != null) {
                if (!TimeDetails.Equals(that.TimeDetails))
                    return false;
            } else if (that.TimeDetails != null)
                return false;
            if (Priority != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Priority, that.Priority))
                    return false;
            } else if (that.Priority != null)
                return false;
            if (ReferencePaths != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ReferencePaths, that.ReferencePaths))
                    return false;
            } else if (that.ReferencePaths != null)
                return false;
            if (ReferenceLinks != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ReferenceLinks, that.ReferenceLinks))
                    return false;
            } else if (that.ReferenceLinks != null)
                return false;
            if (EventConfidence != null) {
                if (EventConfidence != that.EventConfidence)
                    return false;
            } else if (that.EventConfidence != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= RteId.GetHashCode();
            hash ^= EventType.GetHashCode();
            hash ^= EventSource.GetHashCode();
            if (EventPos != null)
                hash ^= EventPos.GetHashCode();
            if (EventRadius != null)
                hash ^= EventRadius.GetHashCode();
            if (Description != null)
                hash ^= Description.GetHashCode();
            if (TimeDetails != null)
                hash ^= TimeDetails.GetHashCode();
            if (Priority != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Priority);
            if (ReferencePaths != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ReferencePaths);
            if (ReferenceLinks != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ReferenceLinks);
            if (EventConfidence != null)
                hash ^= EventConfidence.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RTEData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RteId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.RteId > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RteId", "int", "rteId", "INTEGER", false); throw;
                }
                try {
                    if (this.EventType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.EventType > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventType", "int", "eventType", "EventType", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventSource", "MsgFrame.EventSource", "eventSource", "EventSource", false); throw;
                }
                try {
                    if (this.EventPos != null) {
                        this.EventPos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventPos", "PositionOffsetLLV", "eventPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.EventRadius != null) {
                        if (this.EventRadius.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.EventRadius.Value > 1024)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventRadius.Value", "int", "eventRadius", "Radius", false); throw;
                }
                try {
                    if (this.Description != null) {
                        this.Description.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
                try {
                    if (this.TimeDetails != null) {
                        this.TimeDetails.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                }
                try {
                    if (this.Priority != null) {
                        if (this.Priority.Length != 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                }
                try {
                    if (this.ReferencePaths != null) {
                        this.ReferencePaths.Validate();
                        if (this.ReferencePaths.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ReferencePaths.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                }
                try {
                    if (this.ReferenceLinks != null) {
                        this.ReferenceLinks.Validate();
                        if (this.ReferenceLinks.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ReferenceLinks.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                }
                try {
                    if (this.EventConfidence != null) {
                        if (this.EventConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.EventConfidence.Value > 200)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventConfidence.Value", "int", "eventConfidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEData", null, "RTEData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RTEData obj0 = new RTEData();
            {
                obj0.RteId = this.RteId;
            }
            {
                obj0.EventType = this.EventType;
            }
            {
                obj0.EventSource = this.EventSource;
            }
            {
                obj0.EventPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.EventPos);
            }
            {
                obj0.EventRadius = this.EventRadius;
            }
            {
                obj0.Description = Oss.Asn1.Internal.CopyUtil.CopyType(this.Description);
            }
            {
                obj0.TimeDetails = Oss.Asn1.Internal.CopyUtil.CopyType(this.TimeDetails);
            }
            {
                obj0.Priority = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Priority);
            }
            {
                obj0.ReferencePaths = this.ReferencePaths == null ? null : (ReferencePathList)this.ReferencePaths.Copy();
            }
            {
                obj0.ReferenceLinks = this.ReferenceLinks == null ? null : (ReferenceLinkList)this.ReferenceLinks.Copy();
            }
            {
                obj0.EventConfidence = this.EventConfidence;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("rteId ");
                    prt.Write(this.RteId);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("eventType ");
                    prt.Write(this.EventType);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("eventSource ");
                    switch (this.EventSource) {
                    case MsgFrame.EventSource.Unknown:
                        prt.Write("unknown");
                        break;
                    case MsgFrame.EventSource.Police:
                        prt.Write("police");
                        break;
                    case MsgFrame.EventSource.Government:
                        prt.Write("government");
                        break;
                    case MsgFrame.EventSource.Meteorological:
                        prt.Write("meteorological");
                        break;
                    case MsgFrame.EventSource.Internet:
                        prt.Write("internet");
                        break;
                    case MsgFrame.EventSource.Detection:
                        prt.Write("detection");
                        break;
                    default:
                        prt.Write((int)this.EventSource);
                        break;
                    }
                }
                {
                    PositionOffsetLLV data1 = this.EventPos;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("eventPos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.EventRadius;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("eventRadius ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    MsgFrame.Description data1 = this.Description;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("description ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    RSITimeDetails data1 = this.TimeDetails;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeDetails ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    byte[] data1 = this.Priority;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("priority ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    ReferencePathList data1 = this.ReferencePaths;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("referencePaths ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    ReferenceLinkList data1 = this.ReferenceLinks;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("referenceLinks ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    int? data1 = this.EventConfidence;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("eventConfidence ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.EventPos != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.EventRadius != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Description != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.TimeDetails != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.Priority != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.ReferencePaths != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.ReferenceLinks != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                if (this.EventConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 7);
                enc.Output.WriteBits(optMask0, 0, 8);
                try {
                    if (enc.BitCount(this.RteId - 0) > 8 || this.RteId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RteId);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.RteId - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RteId", "int", "rteId", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.EventType - 0) > 16 || this.EventType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EventType);
                    enc.EncodeConstrainedInteger((this.EventType - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventType", "int", "eventType", "EventType", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.EventSource, _InternalMetadata.PerCodecMetaData.SortedEnum39, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum39);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventSource", "MsgFrame.EventSource", "eventSource", "EventSource", false); throw;
                }
                try {
                    if (this.EventPos != null)
                    {
                        enc.EncodeType(this.EventPos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventPos", "PositionOffsetLLV", "eventPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.EventRadius != null)
                    {
                        if (enc.BitCount(this.EventRadius.Value - 0) > 11 || this.EventRadius.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EventRadius.Value);
                        enc.EncodeConstrainedInteger((this.EventRadius.Value - (0)), 11);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventRadius.Value", "int", "eventRadius", "Radius", false); throw;
                }
                try {
                    if (this.Description != null)
                    {
                        enc.EncodeType(this.Description);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
                try {
                    if (this.TimeDetails != null)
                    {
                        enc.EncodeType(this.TimeDetails);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                }
                try {
                    if (this.Priority != null)
                    {
                        enc.EncodeOctetString(this.Priority, 1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                }
                try {
                    if (this.ReferencePaths != null)
                    {
                        this.ReferencePaths.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                }
                try {
                    if (this.ReferenceLinks != null)
                    {
                        this.ReferenceLinks.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                }
                try {
                    if (this.EventConfidence != null)
                    {
                        if (enc.BitCount(this.EventConfidence.Value - 0) > 8 || this.EventConfidence.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EventConfidence.Value);
                        enc.Output.Write8BitInt((this.EventConfidence.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventConfidence.Value", "int", "eventConfidence", "Confidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEData", null, "RTEData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[2];

                dec.Input.ReadBits(optMask0, 9);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.RteId = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RteId", "int", "rteId", "INTEGER", false); throw;
                }
                try {
                    this.EventType = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventType", "int", "eventType", "EventType", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum39, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum39, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum39);
                    this.EventSource = (MsgFrame.EventSource)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EventSource", "MsgFrame.EventSource", "eventSource", "EventSource", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        PositionOffsetLLV data1 = new PositionOffsetLLV();

                        dec.DecodeType(data1);
                        this.EventPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EventPos", "PositionOffsetLLV", "eventPos", "PositionOffsetLLV", false); throw;
                    }
                }
                else
                {
                    this.EventPos = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.EventRadius = dec.DecodeConstrainedInteger(11, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EventRadius", "int", "eventRadius", "Radius", false); throw;
                    }
                }
                else
                {
                    this.EventRadius = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.Description data1 = new MsgFrame.Description();

                        dec.DecodeType(data1);
                        this.Description = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                    }
                }
                else
                {
                    this.Description = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        RSITimeDetails data1 = new RSITimeDetails();

                        dec.DecodeType(data1);
                        this.TimeDetails = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                    }
                }
                else
                {
                    this.TimeDetails = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.Priority = dec.DecodeOctetString(1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "Priority", false); throw;
                    }
                }
                else
                {
                    this.Priority = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        ReferencePathList data1 = new ReferencePathList();

                        data1.DecodePer(dec);
                        this.ReferencePaths = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                    }
                }
                else
                {
                    this.ReferencePaths = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        ReferenceLinkList data1 = new ReferenceLinkList();

                        data1.DecodePer(dec);
                        this.ReferenceLinks = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                    }
                }
                else
                {
                    this.ReferenceLinks = null;
                }
                if ((optMask0[1] & 0x80) != 0)
                {
                    try {
                        this.EventConfidence = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EventConfidence", "int", "eventConfidence", "Confidence", false); throw;
                    }
                }
                else
                {
                    this.EventConfidence = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTEData", null, "RTEData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'EventSource' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum EventSource
    {
        Unknown = 0,
        Police = 1,
        Government = 2,
        Meteorological = 3,
        Internet = 4,
        Detection = 5
    }
    /// <summary>
    /// Represents schema type 'RSITimeDetails' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RSITimeDetails : Oss.Asn1.BaseType
    {
        /// <summary>Field 'startTime'</summary>
        public int? StartTime { get; set; }
        /// <summary>Field 'endTime'</summary>
        public int? EndTime { get; set; }
        /// <summary>Field 'endTimeConfidence'</summary>
        public TimeConfidence? EndTimeConfidence { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RSITimeDetails that = right as RSITimeDetails;
            if (StartTime != null) {
                if (StartTime != that.StartTime)
                    return false;
            } else if (that.StartTime != null)
                return false;
            if (EndTime != null) {
                if (EndTime != that.EndTime)
                    return false;
            } else if (that.EndTime != null)
                return false;
            if (EndTimeConfidence != null) {
                if (EndTimeConfidence != that.EndTimeConfidence)
                    return false;
            } else if (that.EndTimeConfidence != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (StartTime != null)
                hash ^= StartTime.GetHashCode();
            if (EndTime != null)
                hash ^= EndTime.GetHashCode();
            if (EndTimeConfidence != null)
                hash ^= EndTimeConfidence.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RSITimeDetails";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.StartTime != null) {
                        if (this.StartTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.StartTime.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime.Value", "int", "startTime", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.EndTime != null) {
                        if (this.EndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.EndTime.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTime.Value", "int", "endTime", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.EndTimeConfidence != null) {
                        switch (this.EndTimeConfidence.Value)
                        {
                            case TimeConfidence.Unavailable:
                            case TimeConfidence.Time100000:
                            case TimeConfidence.Time050000:
                            case TimeConfidence.Time020000:
                            case TimeConfidence.Time010000:
                            case TimeConfidence.Time002000:
                            case TimeConfidence.Time001000:
                            case TimeConfidence.Time000500:
                            case TimeConfidence.Time000200:
                            case TimeConfidence.Time000100:
                            case TimeConfidence.Time000050:
                            case TimeConfidence.Time000020:
                            case TimeConfidence.Time000010:
                            case TimeConfidence.Time000005:
                            case TimeConfidence.Time000002:
                            case TimeConfidence.Time000001:
                            case TimeConfidence.Time0000005:
                            case TimeConfidence.Time0000002:
                            case TimeConfidence.Time0000001:
                            case TimeConfidence.Time00000005:
                            case TimeConfidence.Time00000002:
                            case TimeConfidence.Time00000001:
                            case TimeConfidence.Time000000005:
                            case TimeConfidence.Time000000002:
                            case TimeConfidence.Time000000001:
                            case TimeConfidence.Time0000000005:
                            case TimeConfidence.Time0000000002:
                            case TimeConfidence.Time0000000001:
                            case TimeConfidence.Time00000000005:
                            case TimeConfidence.Time00000000002:
                            case TimeConfidence.Time00000000001:
                            case TimeConfidence.Time000000000005:
                            case TimeConfidence.Time000000000002:
                            case TimeConfidence.Time000000000001:
                            case TimeConfidence.Time0000000000005:
                            case TimeConfidence.Time0000000000002:
                            case TimeConfidence.Time0000000000001:
                            case TimeConfidence.Time00000000000005:
                            case TimeConfidence.Time00000000000002:
                            case TimeConfidence.Time00000000000001:
                                break;
                            default:
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTimeConfidence.Value", "TimeConfidence", "endTimeConfidence", "TimeConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RSITimeDetails", null, "RSITimeDetails", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RSITimeDetails obj0 = new RSITimeDetails();
            {
                obj0.StartTime = this.StartTime;
            }
            {
                obj0.EndTime = this.EndTime;
            }
            {
                obj0.EndTimeConfidence = this.EndTimeConfidence;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.StartTime;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("startTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.EndTime;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("endTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    TimeConfidence? data1 = this.EndTimeConfidence;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("endTimeConfidence ");
                        switch (data1.Value) {
                        case TimeConfidence.Unavailable:
                            prt.Write("unavailable");
                            break;
                        case TimeConfidence.Time100000:
                            prt.Write("time-100-000");
                            break;
                        case TimeConfidence.Time050000:
                            prt.Write("time-050-000");
                            break;
                        case TimeConfidence.Time020000:
                            prt.Write("time-020-000");
                            break;
                        case TimeConfidence.Time010000:
                            prt.Write("time-010-000");
                            break;
                        case TimeConfidence.Time002000:
                            prt.Write("time-002-000");
                            break;
                        case TimeConfidence.Time001000:
                            prt.Write("time-001-000");
                            break;
                        case TimeConfidence.Time000500:
                            prt.Write("time-000-500");
                            break;
                        case TimeConfidence.Time000200:
                            prt.Write("time-000-200");
                            break;
                        case TimeConfidence.Time000100:
                            prt.Write("time-000-100");
                            break;
                        case TimeConfidence.Time000050:
                            prt.Write("time-000-050");
                            break;
                        case TimeConfidence.Time000020:
                            prt.Write("time-000-020");
                            break;
                        case TimeConfidence.Time000010:
                            prt.Write("time-000-010");
                            break;
                        case TimeConfidence.Time000005:
                            prt.Write("time-000-005");
                            break;
                        case TimeConfidence.Time000002:
                            prt.Write("time-000-002");
                            break;
                        case TimeConfidence.Time000001:
                            prt.Write("time-000-001");
                            break;
                        case TimeConfidence.Time0000005:
                            prt.Write("time-000-000-5");
                            break;
                        case TimeConfidence.Time0000002:
                            prt.Write("time-000-000-2");
                            break;
                        case TimeConfidence.Time0000001:
                            prt.Write("time-000-000-1");
                            break;
                        case TimeConfidence.Time00000005:
                            prt.Write("time-000-000-05");
                            break;
                        case TimeConfidence.Time00000002:
                            prt.Write("time-000-000-02");
                            break;
                        case TimeConfidence.Time00000001:
                            prt.Write("time-000-000-01");
                            break;
                        case TimeConfidence.Time000000005:
                            prt.Write("time-000-000-005");
                            break;
                        case TimeConfidence.Time000000002:
                            prt.Write("time-000-000-002");
                            break;
                        case TimeConfidence.Time000000001:
                            prt.Write("time-000-000-001");
                            break;
                        case TimeConfidence.Time0000000005:
                            prt.Write("time-000-000-000-5");
                            break;
                        case TimeConfidence.Time0000000002:
                            prt.Write("time-000-000-000-2");
                            break;
                        case TimeConfidence.Time0000000001:
                            prt.Write("time-000-000-000-1");
                            break;
                        case TimeConfidence.Time00000000005:
                            prt.Write("time-000-000-000-05");
                            break;
                        case TimeConfidence.Time00000000002:
                            prt.Write("time-000-000-000-02");
                            break;
                        case TimeConfidence.Time00000000001:
                            prt.Write("time-000-000-000-01");
                            break;
                        case TimeConfidence.Time000000000005:
                            prt.Write("time-000-000-000-005");
                            break;
                        case TimeConfidence.Time000000000002:
                            prt.Write("time-000-000-000-002");
                            break;
                        case TimeConfidence.Time000000000001:
                            prt.Write("time-000-000-000-001");
                            break;
                        case TimeConfidence.Time0000000000005:
                            prt.Write("time-000-000-000-000-5");
                            break;
                        case TimeConfidence.Time0000000000002:
                            prt.Write("time-000-000-000-000-2");
                            break;
                        case TimeConfidence.Time0000000000001:
                            prt.Write("time-000-000-000-000-1");
                            break;
                        case TimeConfidence.Time00000000000005:
                            prt.Write("time-000-000-000-000-05");
                            break;
                        case TimeConfidence.Time00000000000002:
                            prt.Write("time-000-000-000-000-02");
                            break;
                        case TimeConfidence.Time00000000000001:
                            prt.Write("time-000-000-000-000-01");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                byte[] optMask0 = new byte[1];

                if (this.StartTime != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.EndTime != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.EndTimeConfidence != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (this.StartTime != null)
                    {
                        if (enc.BitCount(this.StartTime.Value - 0) > 20 || this.StartTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.StartTime.Value);
                        enc.EncodeConstrainedInteger((this.StartTime.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime.Value", "int", "startTime", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.EndTime != null)
                    {
                        if (enc.BitCount(this.EndTime.Value - 0) > 20 || this.EndTime.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EndTime.Value);
                        enc.EncodeConstrainedInteger((this.EndTime.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTime.Value", "int", "endTime", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.EndTimeConfidence != null)
                    {
                        enc.EncodeEnum((int)this.EndTimeConfidence.Value, _InternalMetadata.PerCodecMetaData.SortedEnum12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTimeConfidence.Value", "TimeConfidence", "endTimeConfidence", "TimeConfidence", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RSITimeDetails", null, "RSITimeDetails", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x80) != 0)
                {
                    try {
                        this.StartTime = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "StartTime", "int", "startTime", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.StartTime = null;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.EndTime = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTime", "int", "endTime", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.EndTime = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.EndTimeConfidence = (TimeConfidence)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum12);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EndTimeConfidence", "TimeConfidence", "endTimeConfidence", "TimeConfidence", false); throw;
                    }
                }
                else
                {
                    this.EndTimeConfidence = null;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RSITimeDetails", null, "RSITimeDetails", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReferencePathList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ReferencePathList : System.Collections.Generic.List<ReferencePath>
    {
        /// <summary>
        /// Initializes a new instance of the ReferencePathList class that is empty and has the default initial capacity.
        /// </summary>
        public ReferencePathList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ReferencePathList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ReferencePathList.</param>
        /// </summary>
        public ReferencePathList(System.Collections.Generic.IEnumerable<ReferencePath> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ReferencePathList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ReferencePathList can initially store.</param>
        /// </summary>
        public ReferencePathList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReferencePathList that = right as ReferencePathList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ReferencePath", "#" + i1.ToString(), "ReferencePath", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePathList", null, "ReferencePathList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ReferencePathList obj0 = new ReferencePathList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 8)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 8);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ReferencePath", "#" + i0.ToString(), "ReferencePath", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePathList", null, "ReferencePathList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 8, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ReferencePath data1 = new ReferencePath();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ReferencePath", "#" + this.Count.ToString(), "ReferencePath", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferencePathList", null, "ReferencePathList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReferenceLinkList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ReferenceLinkList : System.Collections.Generic.List<ReferenceLink>
    {
        /// <summary>
        /// Initializes a new instance of the ReferenceLinkList class that is empty and has the default initial capacity.
        /// </summary>
        public ReferenceLinkList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ReferenceLinkList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ReferenceLinkList.</param>
        /// </summary>
        public ReferenceLinkList(System.Collections.Generic.IEnumerable<ReferenceLink> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ReferenceLinkList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ReferenceLinkList can initially store.</param>
        /// </summary>
        public ReferenceLinkList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReferenceLinkList that = right as ReferenceLinkList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ReferenceLink", "#" + i1.ToString(), "ReferenceLink", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLinkList", null, "ReferenceLinkList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ReferenceLinkList obj0 = new ReferenceLinkList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ReferenceLink", "#" + i0.ToString(), "ReferenceLink", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLinkList", null, "ReferenceLinkList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ReferenceLink data1 = new ReferenceLink();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ReferenceLink", "#" + this.Count.ToString(), "ReferenceLink", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReferenceLinkList", null, "ReferenceLinkList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehIntentionAndRequest' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehIntentionAndRequest : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'secMark'</summary>
        public int SecMark { get; set; }
        /// <summary>Field 'refPos'</summary>
        public Position3D RefPos { get; set; }
        /// <summary>Field 'intAndReq'</summary>
        public IARData IntAndReq { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehIntentionAndRequest that = right as VehIntentionAndRequest;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (SecMark != that.SecMark)
                return false;
            if (RefPos != null) {
                if (!RefPos.Equals(that.RefPos))
                    return false;
            } else if (that.RefPos != null)
                return false;
            if (IntAndReq != null) {
                if (!IntAndReq.Equals(that.IntAndReq))
                    return false;
            } else if (that.IntAndReq != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            hash ^= SecMark.GetHashCode();
            if (RefPos != null)
                hash ^= RefPos.GetHashCode();
            if (IntAndReq != null)
                hash ^= IntAndReq.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehIntentionAndRequest";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SecMark > 60000)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    if (this.RefPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RefPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    if (this.IntAndReq == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.IntAndReq.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntAndReq", "IARData", "intAndReq", "IARData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehIntentionAndRequest", null, "VehIntentionAndRequest", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehIntentionAndRequest obj0 = new VehIntentionAndRequest();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.SecMark = this.SecMark;
            }
            {
                obj0.RefPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.RefPos);
            }
            {
                obj0.IntAndReq = Oss.Asn1.Internal.CopyUtil.CopyType(this.IntAndReq);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("secMark ");
                    prt.Write(this.SecMark);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("refPos ");
                    if (this.RefPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RefPos);
                    }
                }
                {
                    IARData data1 = this.IntAndReq;

                    prt.WriteLine(",");
                    prt.Write("intAndReq ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (enc.BitCount(this.SecMark - 0) > 16 || this.SecMark < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SecMark);
                    enc.EncodeConstrainedInteger((this.SecMark - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    enc.EncodeType(this.RefPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    enc.EncodeType(this.IntAndReq);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntAndReq", "IARData", "intAndReq", "IARData", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehIntentionAndRequest", null, "VehIntentionAndRequest", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    this.SecMark = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SecMark", "int", "secMark", "DSecond", false); throw;
                }
                try {
                    Position3D data1 = new Position3D();

                    dec.DecodeType(data1);
                    this.RefPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RefPos", "Position3D", "refPos", "Position3D", false); throw;
                }
                try {
                    IARData data1 = new IARData();

                    dec.DecodeType(data1);
                    this.IntAndReq = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntAndReq", "IARData", "intAndReq", "IARData", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehIntentionAndRequest", null, "VehIntentionAndRequest", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'IARData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class IARData : Oss.Asn1.BaseType
    {
        /// <summary>Field 'currentPos'</summary>
        public PathPlanningPoint CurrentPos { get; set; }
        /// <summary>Field 'path-Planning'</summary>
        public MsgFrame.PathPlanning PathPlanning { get; set; }
        /// <summary>Field 'currentBehavior'</summary>
        public Oss.Asn1.BitStringWithNamedBits CurrentBehavior { get; set; }
        [System.Serializable]
        public partial class ReqsType : System.Collections.Generic.List<DriveRequest>
        {
            /// <summary>
            /// Initializes a new instance of the ReqsType class that is empty and has the default initial capacity.
            /// </summary>
            public ReqsType() : base() {}
            /// <summary>
            /// Initializes a new instance of the ReqsType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new ReqsType.</param>
            /// </summary>
            public ReqsType(System.Collections.Generic.IEnumerable<DriveRequest> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the ReqsType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new ReqsType can initially store.</param>
            /// </summary>
            public ReqsType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                ReqsType that = right as ReqsType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'reqs'</summary>
        public ReqsType Reqs { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            IARData that = right as IARData;
            if (CurrentPos != null) {
                if (!CurrentPos.Equals(that.CurrentPos))
                    return false;
            } else if (that.CurrentPos != null)
                return false;
            if (PathPlanning != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PathPlanning, that.PathPlanning))
                    return false;
            } else if (that.PathPlanning != null)
                return false;
            if (CurrentBehavior != null) {
                if (!CurrentBehavior.Equals(that.CurrentBehavior))
                    return false;
            } else if (that.CurrentBehavior != null)
                return false;
            if (Reqs != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Reqs, that.Reqs))
                    return false;
            } else if (that.Reqs != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (CurrentPos != null)
                hash ^= CurrentPos.GetHashCode();
            if (PathPlanning != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PathPlanning);
            if (CurrentBehavior != null)
                hash ^= CurrentBehavior.GetHashCode();
            if (Reqs != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Reqs);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "IARData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.CurrentPos != null) {
                        this.CurrentPos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentPos", "PathPlanningPoint", "currentPos", "PathPlanningPoint", false); throw;
                }
                try {
                    if (this.PathPlanning != null) {
                        this.PathPlanning.Validate();
                        if (this.PathPlanning.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PathPlanning.Count > 100)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                }
                try {
                    if (this.CurrentBehavior != null) {
                        try {
                            if (this.CurrentBehavior.Count != 14)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentBehavior", "Oss.Asn1.BitStringWithNamedBits", "currentBehavior", "DriveBehavior", false); throw;
                }
                try {
                    if (this.Reqs != null) {
                        for (int i2 = 0; i2 < this.Reqs.Count; i2++)
                        {
                            try {
                                this.Reqs[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "DriveRequest", "#" + i2.ToString(), "DriveRequest", false); throw;
                            }
                        }
                        if (this.Reqs.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Reqs.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Reqs", "ReqsType", "reqs", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IARData", null, "IARData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            IARData obj0 = new IARData();
            {
                obj0.CurrentPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.CurrentPos);
            }
            {
                obj0.PathPlanning = this.PathPlanning == null ? null : (MsgFrame.PathPlanning)this.PathPlanning.Copy();
            }
            {
                obj0.CurrentBehavior = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.CurrentBehavior);
            }
            {
                ReqsType seqof1 = this.Reqs;
                ReqsType data1 = null;
                if (seqof1 != null) {
                    data1 = new ReqsType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.Reqs = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    PathPlanningPoint data1 = this.CurrentPos;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("currentPos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PathPlanning data1 = this.PathPlanning;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("path-Planning ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.CurrentBehavior;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("currentBehavior ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "goStraightForward";
                                    case (int)1: return "laneChangingToLeft";
                                    case (int)2: return "laneChangingToRight";
                                    case (int)3: return "rampIn";
                                    case (int)4: return "rampOut";
                                    case (int)5: return "intersectionStraightThrough";
                                    case (int)6: return "intersectionTurnLeft";
                                    case (int)7: return "intersectionTurnRight";
                                    case (int)8: return "intersectionUTurn";
                                    case (int)9: return "stop-and-go";
                                    case (int)10: return "stop";
                                    case (int)11: return "slow-down";
                                    case (int)12: return "speed-up";
                                    case (int)13: return "parking";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    ReqsType data1 = this.Reqs;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("reqs ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.CurrentPos != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PathPlanning != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.CurrentBehavior != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Reqs != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.CurrentPos != null)
                    {
                        enc.EncodeType(this.CurrentPos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentPos", "PathPlanningPoint", "currentPos", "PathPlanningPoint", false); throw;
                }
                try {
                    if (this.PathPlanning != null)
                    {
                        this.PathPlanning.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                }
                try {
                    if (this.CurrentBehavior != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges9, this.CurrentBehavior.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 14);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.CurrentBehavior, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.CurrentBehavior, length1, 14);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentBehavior", "Oss.Asn1.BitStringWithNamedBits", "currentBehavior", "DriveBehavior", false); throw;
                }
                try {
                    ReqsType data1 = this.Reqs;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 1 || data1.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 1, 8);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "DriveRequest", "#" + i1.ToString(), "DriveRequest", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Reqs", "ReqsType", "reqs", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IARData", null, "IARData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        PathPlanningPoint data1 = new PathPlanningPoint();

                        dec.DecodeType(data1);
                        this.CurrentPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentPos", "PathPlanningPoint", "currentPos", "PathPlanningPoint", false); throw;
                    }
                }
                else
                {
                    this.CurrentPos = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.PathPlanning data1 = new MsgFrame.PathPlanning();

                        data1.DecodePer(dec);
                        this.PathPlanning = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PathPlanning", "MsgFrame.PathPlanning", "path-Planning", "PathPlanning", false); throw;
                    }
                }
                else
                {
                    this.PathPlanning = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges9);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(14, _InternalMetadata.BerCodecMetaData.Ranges9);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 14))
                            dec.RaiseExtLengthError(extPresent1);
                        this.CurrentBehavior = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "CurrentBehavior", "Oss.Asn1.BitStringWithNamedBits", "currentBehavior", "DriveBehavior", false); throw;
                    }
                }
                else
                {
                    this.CurrentBehavior = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        ReqsType data1 = new ReqsType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(1, 8, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    DriveRequest data2 = new DriveRequest();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "DriveRequest", "#" + data1.Count.ToString(), "DriveRequest", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.Reqs = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Reqs", "ReqsType", "reqs", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.Reqs = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "IARData", null, "IARData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'DriveRequest' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class DriveRequest : Oss.Asn1.BaseType
    {
        /// <summary>Field 'reqID'</summary>
        public int ReqID { get; set; }
        /// <summary>Field 'status'</summary>
        public ReqStatus Status { get; set; }
        /// <summary>Field 'reqPriority'</summary>
        public byte[] ReqPriority { get; set; }
        /// <summary>Field 'targetVeh'</summary>
        public byte[] TargetVeh { get; set; }
        /// <summary>Field 'targetRSU'</summary>
        public byte[] TargetRSU { get; set; }
        /// <summary>Field 'info'</summary>
        public ReqInfo Info { get; set; }
        /// <summary>Field 'lifeTime'</summary>
        public int? LifeTime { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            DriveRequest that = right as DriveRequest;
            if (ReqID != that.ReqID)
                return false;
            if (Status != that.Status)
                return false;
            if (ReqPriority != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(ReqPriority, that.ReqPriority))
                    return false;
            } else if (that.ReqPriority != null)
                return false;
            if (TargetVeh != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TargetVeh, that.TargetVeh))
                    return false;
            } else if (that.TargetVeh != null)
                return false;
            if (TargetRSU != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TargetRSU, that.TargetRSU))
                    return false;
            } else if (that.TargetRSU != null)
                return false;
            if (Info != null) {
                if (!Info.Equals(that.Info))
                    return false;
            } else if (that.Info != null)
                return false;
            if (LifeTime != null) {
                if (LifeTime != that.LifeTime)
                    return false;
            } else if (that.LifeTime != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= ReqID.GetHashCode();
            hash ^= Status.GetHashCode();
            if (ReqPriority != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(ReqPriority);
            if (TargetVeh != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TargetVeh);
            if (TargetRSU != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TargetRSU);
            if (Info != null)
                hash ^= Info.GetHashCode();
            if (LifeTime != null)
                hash ^= LifeTime.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "DriveRequest";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.ReqID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.ReqID > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqID", "int", "reqID", "INTEGER", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "ReqStatus", "status", "ReqStatus", false); throw;
                }
                try {
                    if (this.ReqPriority != null) {
                        if (this.ReqPriority.Length != 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqPriority", "byte[]", "reqPriority", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetVeh != null) {
                        if (this.TargetVeh.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetVeh", "byte[]", "targetVeh", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetRSU != null) {
                        if (this.TargetRSU.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetRSU", "byte[]", "targetRSU", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Info != null) {
                        this.Info.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "ReqInfo", "info", "ReqInfo", false); throw;
                }
                try {
                    if (this.LifeTime != null) {
                        if (this.LifeTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.LifeTime.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime.Value", "int", "lifeTime", "TimeOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveRequest", null, "DriveRequest", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            DriveRequest obj0 = new DriveRequest();
            {
                obj0.ReqID = this.ReqID;
            }
            {
                obj0.Status = this.Status;
            }
            {
                obj0.ReqPriority = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.ReqPriority);
            }
            {
                obj0.TargetVeh = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TargetVeh);
            }
            {
                obj0.TargetRSU = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TargetRSU);
            }
            {
                obj0.Info = Oss.Asn1.Internal.CopyUtil.CopyType(this.Info);
            }
            {
                obj0.LifeTime = this.LifeTime;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("reqID ");
                    prt.Write(this.ReqID);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("status ");
                    switch (this.Status) {
                    case ReqStatus.Unknown:
                        prt.Write("unknown");
                        break;
                    case ReqStatus.Request:
                        prt.Write("request");
                        break;
                    case ReqStatus.Comfirmed:
                        prt.Write("comfirmed");
                        break;
                    case ReqStatus.Cancel:
                        prt.Write("cancel");
                        break;
                    default:
                        prt.Write((int)this.Status);
                        break;
                    }
                }
                {
                    byte[] data1 = this.ReqPriority;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("reqPriority ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    byte[] data1 = this.TargetVeh;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetVeh ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    byte[] data1 = this.TargetRSU;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetRSU ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    ReqInfo data1 = this.Info;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("info ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.LifeTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("lifeTime ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.ReqPriority != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TargetVeh != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TargetRSU != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Info != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.LifeTime != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (enc.BitCount(this.ReqID - 0) > 8 || this.ReqID < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.ReqID);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.ReqID - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqID", "int", "reqID", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Status, _InternalMetadata.PerCodecMetaData.SortedEnum40, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum40);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "ReqStatus", "status", "ReqStatus", false); throw;
                }
                try {
                    if (this.ReqPriority != null)
                    {
                        enc.EncodeOctetString(this.ReqPriority, 1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqPriority", "byte[]", "reqPriority", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetVeh != null)
                    {
                        enc.EncodeOctetString(this.TargetVeh, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetVeh", "byte[]", "targetVeh", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetRSU != null)
                    {
                        enc.EncodeOctetString(this.TargetRSU, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetRSU", "byte[]", "targetRSU", "OCTET STRING", false); throw;
                }
                try {
                    ReqInfo data1 = this.Info;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "ReqInfo", "info", "ReqInfo", false); throw;
                }
                try {
                    if (this.LifeTime != null)
                    {
                        if (enc.BitCount(this.LifeTime.Value - 1) > 16 || this.LifeTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.LifeTime.Value);
                        enc.EncodeConstrainedInteger((this.LifeTime.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime.Value", "int", "lifeTime", "TimeOffset", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveRequest", null, "DriveRequest", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.ReqID = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqID", "int", "reqID", "INTEGER", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum40, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum40, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum40);
                    this.Status = (ReqStatus)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "ReqStatus", "status", "ReqStatus", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.ReqPriority = dec.DecodeOctetString(1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReqPriority", "byte[]", "reqPriority", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.ReqPriority = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.TargetVeh = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetVeh", "byte[]", "targetVeh", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TargetVeh = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.TargetRSU = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetRSU", "byte[]", "targetRSU", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TargetRSU = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        ReqInfo data1 = new ReqInfo();

                        dec.DecodeType(data1);
                        this.Info = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Info", "ReqInfo", "info", "ReqInfo", false); throw;
                    }
                }
                else
                {
                    this.Info = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        this.LifeTime = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LifeTime", "int", "lifeTime", "TimeOffset", false); throw;
                    }
                }
                else
                {
                    this.LifeTime = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "DriveRequest", null, "DriveRequest", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReqStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ReqStatus
    {
        Unknown = 0,
        Request = 1,
        Comfirmed = 2,
        Cancel = 3
    }
    /// <summary>
    /// Represents schema type 'ReqInfo' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class ReqInfo : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            LaneChangeChosen = 1,
            ClearTheWayChosen = 2,
            SignalPriorityChosen = 3,
            SensorSharingChosen = 4,
            ParkingChosen = 5
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'laneChange'</summary>
        public ReqLaneChange LaneChange {
            get {
                if (_id == Id.LaneChangeChosen)
                    return (_contained as ReqLaneChange);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.LaneChangeChosen;
            }
        }
        /// <summary>Gets or selects alternative 'clearTheWay'</summary>
        public ReqClearTheWay ClearTheWay {
            get {
                if (_id == Id.ClearTheWayChosen)
                    return (_contained as ReqClearTheWay);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.ClearTheWayChosen;
            }
        }
        /// <summary>Gets or selects alternative 'signalPriority'</summary>
        public ReqSignalPriority SignalPriority {
            get {
                if (_id == Id.SignalPriorityChosen)
                    return (_contained as ReqSignalPriority);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SignalPriorityChosen;
            }
        }
        /// <summary>Gets or selects alternative 'sensorSharing'</summary>
        public ReqSensorSharing SensorSharing {
            get {
                if (_id == Id.SensorSharingChosen)
                    return (_contained as ReqSensorSharing);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SensorSharingChosen;
            }
        }
        /// <summary>Gets or selects alternative 'parking'</summary>
        public ReqParkingArea Parking {
            get {
                if (_id == Id.ParkingChosen)
                    return (_contained as ReqParkingArea);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.ParkingChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReqInfo that = right as ReqInfo;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ReqInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case ReqInfo.Id.LaneChangeChosen:
                    try {
                        if (this.LaneChange == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.LaneChange.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneChange", "ReqLaneChange", "laneChange", "Req-LaneChange", false); throw;
                    }
                    break;
                case ReqInfo.Id.ClearTheWayChosen:
                    try {
                        if (this.ClearTheWay == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.ClearTheWay.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ClearTheWay", "ReqClearTheWay", "clearTheWay", "Req-ClearTheWay", false); throw;
                    }
                    break;
                case ReqInfo.Id.SignalPriorityChosen:
                    try {
                        if (this.SignalPriority == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SignalPriority.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SignalPriority", "ReqSignalPriority", "signalPriority", "Req-SignalPriority", false); throw;
                    }
                    break;
                case ReqInfo.Id.SensorSharingChosen:
                    try {
                        if (this.SensorSharing == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SensorSharing.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorSharing", "ReqSensorSharing", "sensorSharing", "Req-SensorSharing", false); throw;
                    }
                    break;
                case ReqInfo.Id.ParkingChosen:
                    try {
                        if (this.Parking == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.Parking.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "ReqParkingArea", "parking", "Req-ParkingArea", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqInfo", null, "ReqInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqInfo obj0 = new ReqInfo();
            switch (this.Selected) {
                case ReqInfo.Id.LaneChangeChosen:
                {
                    obj0.LaneChange = Oss.Asn1.Internal.CopyUtil.CopyType(this.LaneChange);
                    break;
                }
                case ReqInfo.Id.ClearTheWayChosen:
                {
                    obj0.ClearTheWay = Oss.Asn1.Internal.CopyUtil.CopyType(this.ClearTheWay);
                    break;
                }
                case ReqInfo.Id.SignalPriorityChosen:
                {
                    obj0.SignalPriority = Oss.Asn1.Internal.CopyUtil.CopyType(this.SignalPriority);
                    break;
                }
                case ReqInfo.Id.SensorSharingChosen:
                {
                    obj0.SensorSharing = Oss.Asn1.Internal.CopyUtil.CopyType(this.SensorSharing);
                    break;
                }
                case ReqInfo.Id.ParkingChosen:
                {
                    obj0.Parking = Oss.Asn1.Internal.CopyUtil.CopyType(this.Parking);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case ReqInfo.Id.ParkingChosen:
                    {
                        ReqParkingArea data1 = this.Parking;

                        prt.Write("parking : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case ReqInfo.Id.SensorSharingChosen:
                    {
                        prt.Write("sensorSharing : ");
                        if (this.SensorSharing == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(this.SensorSharing);
                        }
                    }
                    break;
                case ReqInfo.Id.SignalPriorityChosen:
                    {
                        ReqSignalPriority data1 = this.SignalPriority;

                        prt.Write("signalPriority : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case ReqInfo.Id.ClearTheWayChosen:
                    {
                        ReqClearTheWay data1 = this.ClearTheWay;

                        prt.Write("clearTheWay : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case ReqInfo.Id.LaneChangeChosen:
                    {
                        ReqLaneChange data1 = this.LaneChange;

                        prt.Write("laneChange : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 5)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 6);
                else
                {
                    enc.Output.Write3BitInt((int)this.Selected - 1);
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case ReqInfo.Id.LaneChangeChosen:
                        try {
                            ReqLaneChange data1 = this.LaneChange;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneChange", "ReqLaneChange", "laneChange", "Req-LaneChange", false); throw;
                        }
                        break;
                    case ReqInfo.Id.ClearTheWayChosen:
                        try {
                            ReqClearTheWay data1 = this.ClearTheWay;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ClearTheWay", "ReqClearTheWay", "clearTheWay", "Req-ClearTheWay", false); throw;
                        }
                        break;
                    case ReqInfo.Id.SignalPriorityChosen:
                        try {
                            ReqSignalPriority data1 = this.SignalPriority;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SignalPriority", "ReqSignalPriority", "signalPriority", "Req-SignalPriority", false); throw;
                        }
                        break;
                    case ReqInfo.Id.SensorSharingChosen:
                        try {
                            enc.EncodeType(this.SensorSharing);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorSharing", "ReqSensorSharing", "sensorSharing", "Req-SensorSharing", false); throw;
                        }
                        break;
                    case ReqInfo.Id.ParkingChosen:
                        try {
                            ReqParkingArea data1 = this.Parking;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "ReqParkingArea", "parking", "Req-ParkingArea", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqInfo", null, "ReqInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 6;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = dec.Input.Read3BitInt() + 1;
                    if (choice_alt0 > 5)
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                switch ((ReqInfo.Id)choice_alt0)
                {
                    case ReqInfo.Id.LaneChangeChosen:
                        try {
                            ReqLaneChange data1 = new ReqLaneChange();

                            dec.DecodeType(data1);
                            this.LaneChange = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "LaneChange", "ReqLaneChange", "laneChange", "Req-LaneChange", false); throw;
                        }
                        break;
                    case ReqInfo.Id.ClearTheWayChosen:
                        try {
                            ReqClearTheWay data1 = new ReqClearTheWay();

                            dec.DecodeType(data1);
                            this.ClearTheWay = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ClearTheWay", "ReqClearTheWay", "clearTheWay", "Req-ClearTheWay", false); throw;
                        }
                        break;
                    case ReqInfo.Id.SignalPriorityChosen:
                        try {
                            ReqSignalPriority data1 = new ReqSignalPriority();

                            dec.DecodeType(data1);
                            this.SignalPriority = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SignalPriority", "ReqSignalPriority", "signalPriority", "Req-SignalPriority", false); throw;
                        }
                        break;
                    case ReqInfo.Id.SensorSharingChosen:
                        try {
                            ReqSensorSharing data1 = new ReqSensorSharing();

                            dec.DecodeType(data1);
                            this.SensorSharing = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SensorSharing", "ReqSensorSharing", "sensorSharing", "Req-SensorSharing", false); throw;
                        }
                        break;
                    case ReqInfo.Id.ParkingChosen:
                        try {
                            ReqParkingArea data1 = new ReqParkingArea();

                            dec.DecodeType(data1);
                            this.Parking = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "Parking", "ReqParkingArea", "parking", "Req-ParkingArea", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqInfo", null, "ReqInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Req-LaneChange' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReqLaneChange : Oss.Asn1.BaseType
    {
        /// <summary>Field 'upstreamNode'</summary>
        public NodeReferenceID UpstreamNode { get; set; }
        /// <summary>Field 'downstreamNode'</summary>
        public NodeReferenceID DownstreamNode { get; set; }
        /// <summary>Field 'targetLane'</summary>
        public int TargetLane { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReqLaneChange that = right as ReqLaneChange;
            if (UpstreamNode != null) {
                if (!UpstreamNode.Equals(that.UpstreamNode))
                    return false;
            } else if (that.UpstreamNode != null)
                return false;
            if (DownstreamNode != null) {
                if (!DownstreamNode.Equals(that.DownstreamNode))
                    return false;
            } else if (that.DownstreamNode != null)
                return false;
            if (TargetLane != that.TargetLane)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (UpstreamNode != null)
                hash ^= UpstreamNode.GetHashCode();
            if (DownstreamNode != null)
                hash ^= DownstreamNode.GetHashCode();
            hash ^= TargetLane.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Req-LaneChange";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UpstreamNode == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.UpstreamNode.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.DownstreamNode == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.DownstreamNode.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.TargetLane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TargetLane > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqLaneChange", null, "Req-LaneChange", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqLaneChange obj0 = new ReqLaneChange();
            {
                obj0.UpstreamNode = Oss.Asn1.Internal.CopyUtil.CopyType(this.UpstreamNode);
            }
            {
                obj0.DownstreamNode = Oss.Asn1.Internal.CopyUtil.CopyType(this.DownstreamNode);
            }
            {
                obj0.TargetLane = this.TargetLane;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("upstreamNode ");
                    if (this.UpstreamNode == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.UpstreamNode);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("downstreamNode ");
                    if (this.DownstreamNode == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.DownstreamNode);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("targetLane ");
                    prt.Write(this.TargetLane);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeType(this.UpstreamNode);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    enc.EncodeType(this.DownstreamNode);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (enc.BitCount(this.TargetLane - 0) > 8 || this.TargetLane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TargetLane);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.TargetLane - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqLaneChange", null, "Req-LaneChange", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.UpstreamNode = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.DownstreamNode = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.TargetLane = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqLaneChange", null, "Req-LaneChange", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Req-ClearTheWay' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReqClearTheWay : Oss.Asn1.BaseType
    {
        /// <summary>Field 'upstreamNode'</summary>
        public NodeReferenceID UpstreamNode { get; set; }
        /// <summary>Field 'downstreamNode'</summary>
        public NodeReferenceID DownstreamNode { get; set; }
        /// <summary>Field 'targetLane'</summary>
        public int TargetLane { get; set; }
        /// <summary>Field 'relatedPath'</summary>
        public ReferencePath RelatedPath { get; set; }
        /// <summary>Field 'tBegin'</summary>
        public DDateTime TBegin { get; set; }
        /// <summary>Field 'tEnd'</summary>
        public DDateTime TEnd { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReqClearTheWay that = right as ReqClearTheWay;
            if (UpstreamNode != null) {
                if (!UpstreamNode.Equals(that.UpstreamNode))
                    return false;
            } else if (that.UpstreamNode != null)
                return false;
            if (DownstreamNode != null) {
                if (!DownstreamNode.Equals(that.DownstreamNode))
                    return false;
            } else if (that.DownstreamNode != null)
                return false;
            if (TargetLane != that.TargetLane)
                return false;
            if (RelatedPath != null) {
                if (!RelatedPath.Equals(that.RelatedPath))
                    return false;
            } else if (that.RelatedPath != null)
                return false;
            if (TBegin != null) {
                if (!TBegin.Equals(that.TBegin))
                    return false;
            } else if (that.TBegin != null)
                return false;
            if (TEnd != null) {
                if (!TEnd.Equals(that.TEnd))
                    return false;
            } else if (that.TEnd != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (UpstreamNode != null)
                hash ^= UpstreamNode.GetHashCode();
            if (DownstreamNode != null)
                hash ^= DownstreamNode.GetHashCode();
            hash ^= TargetLane.GetHashCode();
            if (RelatedPath != null)
                hash ^= RelatedPath.GetHashCode();
            if (TBegin != null)
                hash ^= TBegin.GetHashCode();
            if (TEnd != null)
                hash ^= TEnd.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Req-ClearTheWay";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.UpstreamNode == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.UpstreamNode.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.DownstreamNode == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.DownstreamNode.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.TargetLane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.TargetLane > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
                try {
                    if (this.RelatedPath != null) {
                        this.RelatedPath.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TBegin != null) {
                        this.TBegin.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TEnd != null) {
                        this.TEnd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqClearTheWay", null, "Req-ClearTheWay", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqClearTheWay obj0 = new ReqClearTheWay();
            {
                obj0.UpstreamNode = Oss.Asn1.Internal.CopyUtil.CopyType(this.UpstreamNode);
            }
            {
                obj0.DownstreamNode = Oss.Asn1.Internal.CopyUtil.CopyType(this.DownstreamNode);
            }
            {
                obj0.TargetLane = this.TargetLane;
            }
            {
                obj0.RelatedPath = Oss.Asn1.Internal.CopyUtil.CopyType(this.RelatedPath);
            }
            {
                obj0.TBegin = Oss.Asn1.Internal.CopyUtil.CopyType(this.TBegin);
            }
            {
                obj0.TEnd = Oss.Asn1.Internal.CopyUtil.CopyType(this.TEnd);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("upstreamNode ");
                    if (this.UpstreamNode == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.UpstreamNode);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("downstreamNode ");
                    if (this.DownstreamNode == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.DownstreamNode);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("targetLane ");
                    prt.Write(this.TargetLane);
                }
                {
                    ReferencePath data1 = this.RelatedPath;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("relatedPath ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TBegin;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tBegin ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TEnd;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tEnd ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.RelatedPath != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TBegin != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TEnd != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    enc.EncodeType(this.UpstreamNode);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    enc.EncodeType(this.DownstreamNode);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (enc.BitCount(this.TargetLane - 0) > 8 || this.TargetLane < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TargetLane);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.TargetLane - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
                try {
                    if (this.RelatedPath != null)
                    {
                        enc.EncodeType(this.RelatedPath);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TBegin != null)
                    {
                        enc.EncodeType(this.TBegin);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TEnd != null)
                    {
                        enc.EncodeType(this.TEnd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqClearTheWay", null, "Req-ClearTheWay", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.UpstreamNode = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "UpstreamNode", "NodeReferenceID", "upstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.DownstreamNode = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "DownstreamNode", "NodeReferenceID", "downstreamNode", "NodeReferenceID", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.TargetLane = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetLane", "int", "targetLane", "LaneID", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        ReferencePath data1 = new ReferencePath();

                        dec.DecodeType(data1);
                        this.RelatedPath = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RelatedPath", "ReferencePath", "relatedPath", "ReferencePath", false); throw;
                    }
                }
                else
                {
                    this.RelatedPath = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TBegin = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TBegin", "DDateTime", "tBegin", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TBegin = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TEnd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TEnd", "DDateTime", "tEnd", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TEnd = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqClearTheWay", null, "Req-ClearTheWay", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Req-SignalPriority' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReqSignalPriority : Oss.Asn1.BaseType
    {
        /// <summary>Field 'intersectionId'</summary>
        public NodeReferenceID IntersectionId { get; set; }
        /// <summary>Field 'requiredMov'</summary>
        public MovementEx RequiredMov { get; set; }
        /// <summary>Field 'estimatedArrivalTime'</summary>
        public int? EstimatedArrivalTime { get; set; }
        /// <summary>Field 'distance2Intersection'</summary>
        public int? Distance2Intersection { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReqSignalPriority that = right as ReqSignalPriority;
            if (IntersectionId != null) {
                if (!IntersectionId.Equals(that.IntersectionId))
                    return false;
            } else if (that.IntersectionId != null)
                return false;
            if (RequiredMov != null) {
                if (!RequiredMov.Equals(that.RequiredMov))
                    return false;
            } else if (that.RequiredMov != null)
                return false;
            if (EstimatedArrivalTime != null) {
                if (EstimatedArrivalTime != that.EstimatedArrivalTime)
                    return false;
            } else if (that.EstimatedArrivalTime != null)
                return false;
            if (Distance2Intersection != null) {
                if (Distance2Intersection != that.Distance2Intersection)
                    return false;
            } else if (that.Distance2Intersection != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (IntersectionId != null)
                hash ^= IntersectionId.GetHashCode();
            if (RequiredMov != null)
                hash ^= RequiredMov.GetHashCode();
            if (EstimatedArrivalTime != null)
                hash ^= EstimatedArrivalTime.GetHashCode();
            if (Distance2Intersection != null)
                hash ^= Distance2Intersection.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Req-SignalPriority";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.IntersectionId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.IntersectionId.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntersectionId", "NodeReferenceID", "intersectionId", "NodeReferenceID", false); throw;
                }
                try {
                    if (this.RequiredMov == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.RequiredMov.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RequiredMov", "MovementEx", "requiredMov", "MovementEx", false); throw;
                }
                try {
                    if (this.EstimatedArrivalTime != null) {
                        if (this.EstimatedArrivalTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.EstimatedArrivalTime.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedArrivalTime.Value", "int", "estimatedArrivalTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.Distance2Intersection != null) {
                        if (this.Distance2Intersection.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Distance2Intersection.Value > 10000)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Distance2Intersection.Value", "int", "distance2Intersection", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSignalPriority", null, "Req-SignalPriority", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqSignalPriority obj0 = new ReqSignalPriority();
            {
                obj0.IntersectionId = Oss.Asn1.Internal.CopyUtil.CopyType(this.IntersectionId);
            }
            {
                obj0.RequiredMov = Oss.Asn1.Internal.CopyUtil.CopyType(this.RequiredMov);
            }
            {
                obj0.EstimatedArrivalTime = this.EstimatedArrivalTime;
            }
            {
                obj0.Distance2Intersection = this.Distance2Intersection;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("intersectionId ");
                    if (this.IntersectionId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.IntersectionId);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("requiredMov ");
                    if (this.RequiredMov == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.RequiredMov);
                    }
                }
                {
                    int? data1 = this.EstimatedArrivalTime;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("estimatedArrivalTime ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Distance2Intersection;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("distance2Intersection ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.EstimatedArrivalTime != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Distance2Intersection != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.IntersectionId);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntersectionId", "NodeReferenceID", "intersectionId", "NodeReferenceID", false); throw;
                }
                try {
                    enc.EncodeType(this.RequiredMov);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RequiredMov", "MovementEx", "requiredMov", "MovementEx", false); throw;
                }
                try {
                    if (this.EstimatedArrivalTime != null)
                    {
                        if (enc.BitCount(this.EstimatedArrivalTime.Value - 1) > 16 || this.EstimatedArrivalTime.Value < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.EstimatedArrivalTime.Value);
                        enc.EncodeConstrainedInteger((this.EstimatedArrivalTime.Value - (1)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedArrivalTime.Value", "int", "estimatedArrivalTime", "TimeOffset", false); throw;
                }
                try {
                    if (this.Distance2Intersection != null)
                    {
                        if (enc.BitCount(this.Distance2Intersection.Value - 0) > 14 || this.Distance2Intersection.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Distance2Intersection.Value);
                        enc.EncodeConstrainedInteger((this.Distance2Intersection.Value - (0)), 14);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Distance2Intersection.Value", "int", "distance2Intersection", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSignalPriority", null, "Req-SignalPriority", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    NodeReferenceID data1 = new NodeReferenceID();

                    dec.DecodeType(data1);
                    this.IntersectionId = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IntersectionId", "NodeReferenceID", "intersectionId", "NodeReferenceID", false); throw;
                }
                try {
                    MovementEx data1 = new MovementEx();

                    dec.DecodeType(data1);
                    this.RequiredMov = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RequiredMov", "MovementEx", "requiredMov", "MovementEx", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.EstimatedArrivalTime = dec.DecodeConstrainedInteger(16, 1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EstimatedArrivalTime", "int", "estimatedArrivalTime", "TimeOffset", false); throw;
                    }
                }
                else
                {
                    this.EstimatedArrivalTime = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Distance2Intersection = dec.DecodeConstrainedInteger(14, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Distance2Intersection", "int", "distance2Intersection", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Distance2Intersection = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSignalPriority", null, "Req-SignalPriority", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Req-SensorSharing' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReqSensorSharing : Oss.Asn1.BaseType
    {

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Req-SensorSharing";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSensorSharing", null, "Req-SensorSharing", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqSensorSharing obj0 = new ReqSensorSharing();
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSensorSharing", null, "Req-SensorSharing", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqSensorSharing", null, "Req-SensorSharing", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Req-ParkingArea' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ReqParkingArea : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleClass'</summary>
        public VehicleClassification VehicleClass { get; set; }
        /// <summary>Field 'req'</summary>
        public Oss.Asn1.BitStringWithNamedBits Req { get; set; }
        /// <summary>Field 'parkingType'</summary>
        public Oss.Asn1.BitStringWithNamedBits ParkingType { get; set; }
        /// <summary>Field 'expectedParkingSlotID'</summary>
        public int? ExpectedParkingSlotID { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ReqParkingArea that = right as ReqParkingArea;
            if (VehicleClass != null) {
                if (!VehicleClass.Equals(that.VehicleClass))
                    return false;
            } else if (that.VehicleClass != null)
                return false;
            if (Req != null) {
                if (!Req.Equals(that.Req))
                    return false;
            } else if (that.Req != null)
                return false;
            if (ParkingType != null) {
                if (!ParkingType.Equals(that.ParkingType))
                    return false;
            } else if (that.ParkingType != null)
                return false;
            if (ExpectedParkingSlotID != null) {
                if (ExpectedParkingSlotID != that.ExpectedParkingSlotID)
                    return false;
            } else if (that.ExpectedParkingSlotID != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehicleClass != null)
                hash ^= VehicleClass.GetHashCode();
            if (Req != null)
                hash ^= Req.GetHashCode();
            if (ParkingType != null)
                hash ^= ParkingType.GetHashCode();
            if (ExpectedParkingSlotID != null)
                hash ^= ExpectedParkingSlotID.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Req-ParkingArea";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleClass == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.VehicleClass.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                try {
                    if (this.Req == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.Req.Count != 12)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Req", "Oss.Asn1.BitStringWithNamedBits", "req", "ParkingRequest", false); throw;
                }
                try {
                    if (this.ParkingType != null) {
                        try {
                            if (this.ParkingType.Count != 10)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                }
                try {
                    if (this.ExpectedParkingSlotID != null) {
                        if (this.ExpectedParkingSlotID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.ExpectedParkingSlotID.Value > 65535)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ExpectedParkingSlotID.Value", "int", "expectedParkingSlotID", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqParkingArea", null, "Req-ParkingArea", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ReqParkingArea obj0 = new ReqParkingArea();
            {
                obj0.VehicleClass = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleClass);
            }
            {
                obj0.Req = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Req);
            }
            {
                obj0.ParkingType = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.ParkingType);
            }
            {
                obj0.ExpectedParkingSlotID = this.ExpectedParkingSlotID;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleClass ");
                    if (this.VehicleClass == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.VehicleClass);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("req ");
                    if (this.Req == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintBitString(this.Req, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "enter";
                                    case (int)1: return "exit";
                                    case (int)2: return "park";
                                    case (int)3: return "pay";
                                    case (int)4: return "unloadPassenger";
                                    case (int)5: return "pickupPassenger";
                                    case (int)6: return "unloadCargo";
                                    case (int)7: return "loadCargo";
                                    case (int)8: return "reserved1";
                                    case (int)9: return "reverved2";
                                    case (int)10: return "reserved3";
                                    case (int)11: return "reverved4";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.ParkingType;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("parkingType ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "unknown";
                                    case (int)1: return "ordinary";
                                    case (int)2: return "disabled";
                                    case (int)3: return "mini";
                                    case (int)4: return "attached";
                                    case (int)5: return "charging";
                                    case (int)6: return "stereo";
                                    case (int)7: return "lady";
                                    case (int)8: return "extended";
                                    case (int)9: return "private";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    int? data1 = this.ExpectedParkingSlotID;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("expectedParkingSlotID ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.ParkingType != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ExpectedParkingSlotID != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.VehicleClass);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                try {
                    int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges5, this.Req.LastOneBitPos() + 1);
                    bool extPresent1 = !(length1 == 12);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeBitStringWithNamedBits(this.Req, length1);
                    else {
                        enc.EncodeBitStringWithNamedBits(this.Req, length1, 12);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Req", "Oss.Asn1.BitStringWithNamedBits", "req", "ParkingRequest", false); throw;
                }
                try {
                    if (this.ParkingType != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges6, this.ParkingType.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 10);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.ParkingType, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.ParkingType, length1, 10);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                }
                try {
                    if (this.ExpectedParkingSlotID != null)
                    {
                        if (enc.BitCount(this.ExpectedParkingSlotID.Value - 0) > 16 || this.ExpectedParkingSlotID.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.ExpectedParkingSlotID.Value);
                        enc.EncodeConstrainedInteger((this.ExpectedParkingSlotID.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ExpectedParkingSlotID.Value", "int", "expectedParkingSlotID", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqParkingArea", null, "Req-ParkingArea", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    VehicleClassification data1 = new VehicleClassification();

                    dec.DecodeType(data1);
                    this.VehicleClass = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleClass", "VehicleClassification", "vehicleClass", "VehicleClassification", false); throw;
                }
                try {
                    Oss.Asn1.BitStringWithNamedBits data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges5);
                    else
                        data1 = dec.DecodeBitStringWithNamedBits(12, _InternalMetadata.BerCodecMetaData.Ranges5);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 12))
                        dec.RaiseExtLengthError(extPresent1);
                    this.Req = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Req", "Oss.Asn1.BitStringWithNamedBits", "req", "ParkingRequest", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges6);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(10, _InternalMetadata.BerCodecMetaData.Ranges6);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 10))
                            dec.RaiseExtLengthError(extPresent1);
                        this.ParkingType = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ParkingType", "Oss.Asn1.BitStringWithNamedBits", "parkingType", "ParkingType", false); throw;
                    }
                }
                else
                {
                    this.ParkingType = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.ExpectedParkingSlotID = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ExpectedParkingSlotID", "int", "expectedParkingSlotID", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.ExpectedParkingSlotID = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ReqParkingArea", null, "Req-ParkingArea", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ParkingRequest' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum ParkingRequest
    {
        Enter = 0,
        Exit = 1,
        Park = 2,
        Pay = 3,
        UnloadPassenger = 4,
        PickupPassenger = 5,
        UnloadCargo = 6,
        LoadCargo = 7,
        Reserved1 = 8,
        Reverved2 = 9,
        Reserved3 = 10,
        Reverved4 = 11
    }
    /// <summary>
    /// Represents schema type 'VehiclePaymentMessage' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehiclePaymentMessage : Oss.Asn1.BaseType
    {
        /// <summary>Field 'msgCnt'</summary>
        public int MsgCnt { get; set; }
        /// <summary>
        /// Represents in-line ASN.1 CHOICE type
        /// </summary>
        [System.Serializable]
        public partial class PaymentType
        {
            /// <summary>CHOICE alternatives</summary>
            public enum Id {
                Unselected = 0,
                InitialzationRequestChosen = 1,
                InitialzationResponseChosen = 2,
                ActionRequestChosen = 3,
                ActionResponseChosen = 4
            }
            private Id _id;
            private object _contained;
            /// <summary>Gets current selection</summary>
            public Id Selected {
                get { return _id; }
            }
            /// <summary>Gets or selects alternative 'initialzation-request'</summary>
            public RST InitialzationRequest {
                get {
                    if (_id == Id.InitialzationRequestChosen)
                        return (_contained as RST);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.InitialzationRequestChosen;
                }
            }
            /// <summary>Gets or selects alternative 'initialzation-response'</summary>
            public VSI InitialzationResponse {
                get {
                    if (_id == Id.InitialzationResponseChosen)
                        return (_contained as VSI);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.InitialzationResponseChosen;
                }
            }
            /// <summary>Gets or selects alternative 'action-request'</summary>
            public MsgFrame.ActionRequest ActionRequest {
                get {
                    if (_id == Id.ActionRequestChosen)
                        return (_contained as MsgFrame.ActionRequest);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.ActionRequestChosen;
                }
            }
            /// <summary>Gets or selects alternative 'action-response'</summary>
            public MsgFrame.ActionResponse ActionResponse {
                get {
                    if (_id == Id.ActionResponseChosen)
                        return (_contained as MsgFrame.ActionResponse);
                    else
                        return null;
                }
                set {
                    _contained = value;
                    _id = Id.ActionResponseChosen;
                }
            }

            public void Clear()
            {
                _id = Id.Unselected;
                _contained = null;
            }

            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                PaymentType that = right as PaymentType;
                if (_id != that._id)
                    return false;
                return _contained.Equals(that._contained);
            }

            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
            }
        }
        /// <summary>Field 'payment'</summary>
        public PaymentType Payment { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehiclePaymentMessage that = right as VehiclePaymentMessage;
            if (MsgCnt != that.MsgCnt)
                return false;
            if (Payment != null) {
                if (!Payment.Equals(that.Payment))
                    return false;
            } else if (that.Payment != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= MsgCnt.GetHashCode();
            if (Payment != null)
                hash ^= Payment.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehiclePaymentMessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.MsgCnt > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    if (this.Payment == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    switch (this.Payment.Selected) {
                    case PaymentType.Id.InitialzationRequestChosen:
                        try {
                            if (this.Payment.InitialzationRequest == null)
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                            else {
                                this.Payment.InitialzationRequest.Validate();
                            }
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationRequest", "RST", "initialzation-request", "RST", false); throw;
                        }
                        break;
                    case PaymentType.Id.InitialzationResponseChosen:
                        try {
                            if (this.Payment.InitialzationResponse == null)
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                            else {
                                this.Payment.InitialzationResponse.Validate();
                            }
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationResponse", "VSI", "initialzation-response", "VSI", false); throw;
                        }
                        break;
                    case PaymentType.Id.ActionRequestChosen:
                        try {
                            if (this.Payment.ActionRequest == null)
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                            else {
                                this.Payment.ActionRequest.Validate();
                            }
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionRequest", "MsgFrame.ActionRequest", "action-request", "Action-Request", false); throw;
                        }
                        break;
                    case PaymentType.Id.ActionResponseChosen:
                        try {
                            if (this.Payment.ActionResponse == null)
                                throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                            else {
                                this.Payment.ActionResponse.Validate();
                            }
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionResponse", "MsgFrame.ActionResponse", "action-response", "Action-Response", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payment", "PaymentType", "payment", "CHOICE", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehiclePaymentMessage", null, "VehiclePaymentMessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehiclePaymentMessage obj0 = new VehiclePaymentMessage();
            {
                obj0.MsgCnt = this.MsgCnt;
            }
            {
                PaymentType data1 = null;
                if (this.Payment != null) {
                    data1 = new PaymentType();
                    switch (this.Payment.Selected) {
                        case PaymentType.Id.InitialzationRequestChosen:
                        {
                            data1.InitialzationRequest = Oss.Asn1.Internal.CopyUtil.CopyType(this.Payment.InitialzationRequest);
                            break;
                        }
                        case PaymentType.Id.InitialzationResponseChosen:
                        {
                            data1.InitialzationResponse = Oss.Asn1.Internal.CopyUtil.CopyType(this.Payment.InitialzationResponse);
                            break;
                        }
                        case PaymentType.Id.ActionRequestChosen:
                        {
                            data1.ActionRequest = Oss.Asn1.Internal.CopyUtil.CopyType(this.Payment.ActionRequest);
                            break;
                        }
                        case PaymentType.Id.ActionResponseChosen:
                        {
                            data1.ActionResponse = Oss.Asn1.Internal.CopyUtil.CopyType(this.Payment.ActionResponse);
                            break;
                        }
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                    }
                }
                obj0.Payment = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("msgCnt ");
                    prt.Write(this.MsgCnt);
                }
                {
                    PaymentType data1 = this.Payment;

                    prt.WriteLine(",");
                    prt.Write("payment ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        switch (data1.Selected) {
                        case PaymentType.Id.ActionResponseChosen:
                            {
                                MsgFrame.ActionResponse data2 = data1.ActionResponse;

                                prt.Write("action-response : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        case PaymentType.Id.ActionRequestChosen:
                            {
                                MsgFrame.ActionRequest data2 = data1.ActionRequest;

                                prt.Write("action-request : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        case PaymentType.Id.InitialzationResponseChosen:
                            {
                                VSI data2 = data1.InitialzationResponse;

                                prt.Write("initialzation-response : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        case PaymentType.Id.InitialzationRequestChosen:
                            {
                                RST data2 = data1.InitialzationRequest;

                                prt.Write("initialzation-request : ");
                                if (data2 == null)
                                    prt.Write("<<<NULL>>>");
                                else {
                                    prt.PrintContent(data2);
                                }
                            }
                            break;
                        default:
                            prt.Write("<unknown choice>");
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.MsgCnt - 0) > 7 || this.MsgCnt < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.MsgCnt);
                    enc.Output.Write7BitInt((this.MsgCnt - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    bool extPresent1;
                    Oss.Asn1.Internal.ArrayBitOutput tempOut1 = new Oss.Asn1.Internal.ArrayBitOutput();
                    Oss.Asn1.Internal.IBitOutput savedOut1 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                    if ((int)this.Payment.Selected - 1 < 4)
                        extPresent1 = false;
                    else
                        extPresent1 = true;
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeNormSmallNonNegativeInteger((int)this.Payment.Selected - 5);
                    else
                    {
                        enc.Output.Write2BitInt((int)this.Payment.Selected - 1);
                    }
                    if (extPresent1)
                        enc.Output = tempOut1;
                    switch (this.Payment.Selected)
                    {
                        case PaymentType.Id.InitialzationRequestChosen:
                            try {
                                RST data2 = this.Payment.InitialzationRequest;

                                enc.EncodeType(data2);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationRequest", "RST", "initialzation-request", "RST", false); throw;
                            }
                            break;
                        case PaymentType.Id.InitialzationResponseChosen:
                            try {
                                VSI data2 = this.Payment.InitialzationResponse;

                                enc.EncodeType(data2);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationResponse", "VSI", "initialzation-response", "VSI", false); throw;
                            }
                            break;
                        case PaymentType.Id.ActionRequestChosen:
                            try {
                                MsgFrame.ActionRequest data2 = this.Payment.ActionRequest;

                                enc.EncodeType(data2);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionRequest", "MsgFrame.ActionRequest", "action-request", "Action-Request", false); throw;
                            }
                            break;
                        case PaymentType.Id.ActionResponseChosen:
                            try {
                                MsgFrame.ActionResponse data2 = this.Payment.ActionResponse;

                                enc.EncodeType(data2);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionResponse", "MsgFrame.ActionResponse", "action-response", "Action-Response", false); throw;
                            }
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                    }
                    if (extPresent1)
                    {
                        enc.CompleteEncoding();
                        enc.Output = savedOut1;
                        enc.EncodeOctetString(tempOut1.Consolidate());
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payment", "PaymentType", "payment", "CHOICE", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehiclePaymentMessage", null, "VehiclePaymentMessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.MsgCnt = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "MsgCnt", "int", "msgCnt", "MsgCount", false); throw;
                }
                try {
                    PaymentType data1 = new PaymentType();
                    int choice_alt1 = 0;
                    bool extPresent1 = dec.DecodeBool();
                    int fraglast1 = 65536;
                    Oss.Asn1.Internal.IBitInput savedInput1 = dec.Input;
                    int extLen1 = 0;
                    int bitPos1 = 0;

                    if (extPresent1)
                    {
                        choice_alt1 = dec.DecodeNormSmallNonNegativeInteger() + 5;
                        extLen1 = dec.DecodeExtAdditonLength(ref fraglast1);
                        if (fraglast1 >= 0)
                            extLen1 = dec.PrepareExtInputFrag(extLen1);
                        bitPos1 = dec.Input.BitsRead();
                    }
                    else
                    {
                        choice_alt1 = dec.Input.Read2BitInt() + 1;
                        if (choice_alt1 > 4)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                    }
                    switch ((PaymentType.Id)choice_alt1)
                    {
                        case PaymentType.Id.InitialzationRequestChosen:
                            try {
                                RST data2 = new RST();

                                dec.DecodeType(data2);
                                data1.InitialzationRequest = data2;
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationRequest", "RST", "initialzation-request", "RST", false); throw;
                            }
                            break;
                        case PaymentType.Id.InitialzationResponseChosen:
                            try {
                                VSI data2 = new VSI();

                                dec.DecodeType(data2);
                                data1.InitialzationResponse = data2;
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "InitialzationResponse", "VSI", "initialzation-response", "VSI", false); throw;
                            }
                            break;
                        case PaymentType.Id.ActionRequestChosen:
                            try {
                                MsgFrame.ActionRequest data2 = new MsgFrame.ActionRequest();

                                dec.DecodeType(data2);
                                data1.ActionRequest = data2;
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionRequest", "MsgFrame.ActionRequest", "action-request", "Action-Request", false); throw;
                            }
                            break;
                        case PaymentType.Id.ActionResponseChosen:
                            try {
                                MsgFrame.ActionResponse data2 = new MsgFrame.ActionResponse();

                                dec.DecodeType(data2);
                                data1.ActionResponse = data2;
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionResponse", "MsgFrame.ActionResponse", "action-response", "Action-Response", false); throw;
                            }
                            break;
                        default:
                            if (!extPresent1)
                                throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                            data1.Clear();
                            break;
                    }
                    if (extPresent1)
                    {
                        if (dec.Options.StrictDecoding)
                            dec.CheckExtEncodingCompletion(bitPos1, extLen1);
                        if (fraglast1 < 0)
                            dec.Input.SkipBits(extLen1 * 8 - (dec.Input.BitsRead() - bitPos1));
                    }
                    dec.Input = savedInput1;
                    this.Payment = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Payment", "PaymentType", "payment", "CHOICE", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehiclePaymentMessage", null, "VehiclePaymentMessage", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RST' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RST : Oss.Asn1.BaseType
    {
        /// <summary>Field 'time'</summary>
        public DDateTime Time { get; set; }
        /// <summary>Field 'id'</summary>
        public byte[] Id { get; set; }
        /// <summary>Field 'paymentList'</summary>
        public MsgFrame.PaymentList PaymentList { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RST that = right as RST;
            if (Time != null) {
                if (!Time.Equals(that.Time))
                    return false;
            } else if (that.Time != null)
                return false;
            if (Id != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Id, that.Id))
                    return false;
            } else if (that.Id != null)
                return false;
            if (PaymentList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PaymentList, that.PaymentList))
                    return false;
            } else if (that.PaymentList != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Time != null)
                hash ^= Time.GetHashCode();
            if (Id != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Id);
            if (PaymentList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PaymentList);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RST";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Time == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Time.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    if (this.Id == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Id.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    if (this.PaymentList == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PaymentList.Validate();
                    if (this.PaymentList.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.PaymentList.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentList", "MsgFrame.PaymentList", "paymentList", "PaymentList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RST", null, "RST", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RST obj0 = new RST();
            {
                obj0.Time = Oss.Asn1.Internal.CopyUtil.CopyType(this.Time);
            }
            {
                obj0.Id = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Id);
            }
            {
                obj0.PaymentList = this.PaymentList == null ? null : (MsgFrame.PaymentList)this.PaymentList.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("time ");
                    if (this.Time == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Time);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("id ");
                    if (this.Id == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Id);
                    }
                }
                {
                    MsgFrame.PaymentList data1 = this.PaymentList;

                    prt.WriteLine(",");
                    prt.Write("paymentList ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeType(this.Time);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Id, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    this.PaymentList.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentList", "MsgFrame.PaymentList", "paymentList", "PaymentList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RST", null, "RST", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.Time = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    this.Id = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "byte[]", "id", "OCTET STRING", false); throw;
                }
                try {
                    MsgFrame.PaymentList data1 = new MsgFrame.PaymentList();

                    data1.DecodePer(dec);
                    this.PaymentList = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentList", "MsgFrame.PaymentList", "paymentList", "PaymentList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RST", null, "RST", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PaymentList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class PaymentList : System.Collections.Generic.List<ApplicationParameter>
    {
        /// <summary>
        /// Initializes a new instance of the PaymentList class that is empty and has the default initial capacity.
        /// </summary>
        public PaymentList() : base() {}
        /// <summary>
        /// Initializes a new instance of the PaymentList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new PaymentList.</param>
        /// </summary>
        public PaymentList(System.Collections.Generic.IEnumerable<ApplicationParameter> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the PaymentList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new PaymentList can initially store.</param>
        /// </summary>
        public PaymentList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PaymentList that = right as PaymentList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "ApplicationParameter", "#" + i1.ToString(), "ApplicationParameter", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentList", null, "PaymentList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            PaymentList obj0 = new PaymentList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "ApplicationParameter", "#" + i0.ToString(), "ApplicationParameter", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentList", null, "PaymentList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            ApplicationParameter data1 = new ApplicationParameter();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "ApplicationParameter", "#" + this.Count.ToString(), "ApplicationParameter", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentList", null, "PaymentList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ApplicationParameter' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ApplicationParameter : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pid'</summary>
        public PaymentEntityID Pid { get; set; }
        /// <summary>Field 'paymentInfo'</summary>
        public MsgFrame.PaymentInfo PaymentInfo { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ApplicationParameter that = right as ApplicationParameter;
            if (Pid != that.Pid)
                return false;
            if (PaymentInfo != null) {
                if (!PaymentInfo.Equals(that.PaymentInfo))
                    return false;
            } else if (that.PaymentInfo != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Pid.GetHashCode();
            if (PaymentInfo != null)
                hash ^= PaymentInfo.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ApplicationParameter";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    if (this.PaymentInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.PaymentInfo.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfo", "MsgFrame.PaymentInfo", "paymentInfo", "PaymentInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApplicationParameter", null, "ApplicationParameter", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ApplicationParameter obj0 = new ApplicationParameter();
            {
                obj0.Pid = this.Pid;
            }
            {
                obj0.PaymentInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.PaymentInfo);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pid ");
                    switch (this.Pid) {
                    case PaymentEntityID.SystemId:
                        prt.Write("system");
                        break;
                    case PaymentEntityID.Freeflow:
                        prt.Write("freeflow");
                        break;
                    case PaymentEntityID.Enclosed:
                        prt.Write("enclosed");
                        break;
                    case PaymentEntityID.Congestion:
                        prt.Write("congestion");
                        break;
                    case PaymentEntityID.Charging:
                        prt.Write("charging");
                        break;
                    case PaymentEntityID.Parking:
                        prt.Write("parking");
                        break;
                    default:
                        prt.Write((int)this.Pid);
                        break;
                    }
                }
                {
                    MsgFrame.PaymentInfo data1 = this.PaymentInfo;

                    prt.WriteLine(",");
                    prt.Write("paymentInfo ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeEnumWithExtension((int)this.Pid, _InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    enc.EncodeType(this.PaymentInfo);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfo", "MsgFrame.PaymentInfo", "paymentInfo", "PaymentInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApplicationParameter", null, "ApplicationParameter", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum41);
                    this.Pid = (PaymentEntityID)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    MsgFrame.PaymentInfo data1 = new MsgFrame.PaymentInfo();

                    dec.DecodeType(data1);
                    this.PaymentInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfo", "MsgFrame.PaymentInfo", "paymentInfo", "PaymentInfo", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApplicationParameter", null, "ApplicationParameter", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PaymentEntityID' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum PaymentEntityID
    {
        SystemId = 0,
        Freeflow = 1,
        Enclosed = 2,
        Congestion = 3,
        Charging = 4,
        Parking = 5
    }
    /// <summary>
    /// Represents schema type 'PaymentInfo' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class PaymentInfo : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            PaymentInfoType1Chosen = 1
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'paymentInfoType1'</summary>
        public MsgFrame.PaymentInfoType1 PaymentInfoType1 {
            get {
                if (_id == Id.PaymentInfoType1Chosen)
                    return (_contained as MsgFrame.PaymentInfoType1);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.PaymentInfoType1Chosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PaymentInfo that = right as PaymentInfo;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PaymentInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case PaymentInfo.Id.PaymentInfoType1Chosen:
                    try {
                        if (this.PaymentInfoType1 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.PaymentInfoType1.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfoType1", "MsgFrame.PaymentInfoType1", "paymentInfoType1", "PaymentInfoType1", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfo", null, "PaymentInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PaymentInfo obj0 = new PaymentInfo();
            switch (this.Selected) {
                case PaymentInfo.Id.PaymentInfoType1Chosen:
                {
                    obj0.PaymentInfoType1 = Oss.Asn1.Internal.CopyUtil.CopyType(this.PaymentInfoType1);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case PaymentInfo.Id.PaymentInfoType1Chosen:
                    {
                        MsgFrame.PaymentInfoType1 data1 = this.PaymentInfoType1;

                        prt.Write("paymentInfoType1 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 1)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 2);
                else
                {
                    // Only one alternative in the extension root - no index encoding
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case PaymentInfo.Id.PaymentInfoType1Chosen:
                        try {
                            MsgFrame.PaymentInfoType1 data1 = this.PaymentInfoType1;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfoType1", "MsgFrame.PaymentInfoType1", "paymentInfoType1", "PaymentInfoType1", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfo", null, "PaymentInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 2;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = 1;
                }
                switch ((PaymentInfo.Id)choice_alt0)
                {
                    case PaymentInfo.Id.PaymentInfoType1Chosen:
                        try {
                            MsgFrame.PaymentInfoType1 data1 = new MsgFrame.PaymentInfoType1();

                            dec.DecodeType(data1);
                            this.PaymentInfoType1 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentInfoType1", "MsgFrame.PaymentInfoType1", "paymentInfoType1", "PaymentInfoType1", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfo", null, "PaymentInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PaymentInfoType1' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PaymentInfoType1 : Oss.Asn1.BaseType
    {
        /// <summary>Field 'tollingNodeInfo'</summary>
        public MsgFrame.TollingNodeInfo TollingNodeInfo { get; set; }
        /// <summary>Field 'tollInfo'</summary>
        public MsgFrame.TollInfo TollInfo { get; set; }
        /// <summary>Field 'serviceInfo'</summary>
        public byte[] ServiceInfo { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PaymentInfoType1 that = right as PaymentInfoType1;
            if (TollingNodeInfo != null) {
                if (!TollingNodeInfo.Equals(that.TollingNodeInfo))
                    return false;
            } else if (that.TollingNodeInfo != null)
                return false;
            if (TollInfo != null) {
                if (!TollInfo.Equals(that.TollInfo))
                    return false;
            } else if (that.TollInfo != null)
                return false;
            if (ServiceInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(ServiceInfo, that.ServiceInfo))
                    return false;
            } else if (that.ServiceInfo != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TollingNodeInfo != null)
                hash ^= TollingNodeInfo.GetHashCode();
            if (TollInfo != null)
                hash ^= TollInfo.GetHashCode();
            if (ServiceInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(ServiceInfo);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PaymentInfoType1";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TollingNodeInfo != null) {
                        this.TollingNodeInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeInfo", "MsgFrame.TollingNodeInfo", "tollingNodeInfo", "TollingNodeInfo", false); throw;
                }
                try {
                    if (this.TollInfo != null) {
                        this.TollInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "MsgFrame.TollInfo", "tollInfo", "TollInfo", false); throw;
                }
                try {
                    if (this.ServiceInfo != null) {
                        if (this.ServiceInfo.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ServiceInfo.Length > 512)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ServiceInfo", "byte[]", "serviceInfo", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfoType1", null, "PaymentInfoType1", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PaymentInfoType1 obj0 = new PaymentInfoType1();
            {
                obj0.TollingNodeInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollingNodeInfo);
            }
            {
                obj0.TollInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollInfo);
            }
            {
                obj0.ServiceInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.ServiceInfo);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    MsgFrame.TollingNodeInfo data1 = this.TollingNodeInfo;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("tollingNodeInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.TollInfo data1 = this.TollInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("tollInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    byte[] data1 = this.ServiceInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("serviceInfo ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TollingNodeInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TollInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.ServiceInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    MsgFrame.TollingNodeInfo data1 = this.TollingNodeInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeInfo", "MsgFrame.TollingNodeInfo", "tollingNodeInfo", "TollingNodeInfo", false); throw;
                }
                try {
                    MsgFrame.TollInfo data1 = this.TollInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "MsgFrame.TollInfo", "tollInfo", "TollInfo", false); throw;
                }
                try {
                    if (this.ServiceInfo != null)
                    {
                        enc.EncodeOctetString(this.ServiceInfo, 1, 512);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ServiceInfo", "byte[]", "serviceInfo", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfoType1", null, "PaymentInfoType1", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.TollingNodeInfo data1 = new MsgFrame.TollingNodeInfo();

                        dec.DecodeType(data1);
                        this.TollingNodeInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeInfo", "MsgFrame.TollingNodeInfo", "tollingNodeInfo", "TollingNodeInfo", false); throw;
                    }
                }
                else
                {
                    this.TollingNodeInfo = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.TollInfo data1 = new MsgFrame.TollInfo();

                        dec.DecodeType(data1);
                        this.TollInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "MsgFrame.TollInfo", "tollInfo", "TollInfo", false); throw;
                    }
                }
                else
                {
                    this.TollInfo = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.ServiceInfo = dec.DecodeOctetString(1, 512);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ServiceInfo", "byte[]", "serviceInfo", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.ServiceInfo = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PaymentInfoType1", null, "PaymentInfoType1", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TollingNodeInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TollingNodeInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'id'</summary>
        public long? Id { get; set; }
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }
        /// <summary>Field 'tollingNodeType'</summary>
        public MsgFrame.TollingNodeType? TollingNodeType { get; set; }
        /// <summary>Field 'tollingDirection'</summary>
        public MsgFrame.TollingDirection? TollingDirection { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TollingNodeInfo that = right as TollingNodeInfo;
            if (Id != null) {
                if (Id != that.Id)
                    return false;
            } else if (that.Id != null)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (TollingNodeType != null) {
                if (TollingNodeType != that.TollingNodeType)
                    return false;
            } else if (that.TollingNodeType != null)
                return false;
            if (TollingDirection != null) {
                if (TollingDirection != that.TollingDirection)
                    return false;
            } else if (that.TollingDirection != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Id != null)
                hash ^= Id.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (TollingNodeType != null)
                hash ^= TollingNodeType.GetHashCode();
            if (TollingDirection != null)
                hash ^= TollingDirection.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TollingNodeInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Id != null) {
                        try {
                            if (this.Id.Value < 0)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                            if (this.Id.Value > 4294967295)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id.Value", "long", "id", "StationOrGantryId", false); throw;
                }
                try {
                    if (this.Pos != null) {
                        this.Pos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.TollingNodeType != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeType.Value", "MsgFrame.TollingNodeType", "tollingNodeType", "TollingNodeType", false); throw;
                }
                try {
                    if (this.TollingDirection != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingDirection.Value", "MsgFrame.TollingDirection", "tollingDirection", "TollingDirection", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingNodeInfo", null, "TollingNodeInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TollingNodeInfo obj0 = new TollingNodeInfo();
            {
                obj0.Id = this.Id;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.TollingNodeType = this.TollingNodeType;
            }
            {
                obj0.TollingDirection = this.TollingDirection;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    long? data1 = this.Id;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("id ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    Position3D data1 = this.Pos;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("pos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.TollingNodeType? data1 = this.TollingNodeType;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("tollingNodeType ");
                        switch (data1.Value) {
                        case MsgFrame.TollingNodeType.EntranceStation:
                            prt.Write("entranceStation");
                            break;
                        case MsgFrame.TollingNodeType.ExitStatino:
                            prt.Write("exitStatino");
                            break;
                        case MsgFrame.TollingNodeType.EntranceAndExitStation:
                            prt.Write("entranceAndExitStation");
                            break;
                        case MsgFrame.TollingNodeType.Gantry:
                            prt.Write("gantry");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    MsgFrame.TollingDirection? data1 = this.TollingDirection;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("tollingDirection ");
                        switch (data1.Value) {
                        case MsgFrame.TollingDirection.North:
                            prt.Write("north");
                            break;
                        case MsgFrame.TollingDirection.Northeast:
                            prt.Write("northeast");
                            break;
                        case MsgFrame.TollingDirection.East:
                            prt.Write("east");
                            break;
                        case MsgFrame.TollingDirection.Southeast:
                            prt.Write("southeast");
                            break;
                        case MsgFrame.TollingDirection.South:
                            prt.Write("south");
                            break;
                        case MsgFrame.TollingDirection.Southwest:
                            prt.Write("southwest");
                            break;
                        case MsgFrame.TollingDirection.West:
                            prt.Write("west");
                            break;
                        case MsgFrame.TollingDirection.Northwest:
                            prt.Write("northwest");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Id != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Pos != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TollingNodeType != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.TollingDirection != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.Id != null)
                    {
                        bool extPresent1;

                        extPresent1 = !(0 <= this.Id.Value && this.Id.Value <= 4294967295);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeUnconstrainedLongInteger(this.Id.Value);
                        else {
                            enc.EncodeConstrainedLongInteger((long)(this.Id.Value - (0)), 32);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id.Value", "long", "id", "StationOrGantryId", false); throw;
                }
                try {
                    if (this.Pos != null)
                    {
                        enc.EncodeType(this.Pos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.TollingNodeType != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.TollingNodeType.Value, _InternalMetadata.PerCodecMetaData.SortedEnum42, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum42);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeType.Value", "MsgFrame.TollingNodeType", "tollingNodeType", "TollingNodeType", false); throw;
                }
                try {
                    if (this.TollingDirection != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.TollingDirection.Value, _InternalMetadata.PerCodecMetaData.SortedEnum43, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum43);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingDirection.Value", "MsgFrame.TollingDirection", "tollingDirection", "TollingDirection", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingNodeInfo", null, "TollingNodeInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        long data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeUnconstrainedLongInteger();
                        else
                            data1 = dec.DecodeConstrainedLongInteger(32, 0);
                        if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 4294967295))
                            dec.RaiseExtRangeError(extPresent1);
                        this.Id = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "long", "id", "StationOrGantryId", false); throw;
                    }
                }
                else
                {
                    this.Id = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        Position3D data1 = new Position3D();

                        dec.DecodeType(data1);
                        this.Pos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                    }
                }
                else
                {
                    this.Pos = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum42, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum42, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum42);
                        this.TollingNodeType = (MsgFrame.TollingNodeType)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingNodeType", "MsgFrame.TollingNodeType", "tollingNodeType", "TollingNodeType", false); throw;
                    }
                }
                else
                {
                    this.TollingNodeType = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum43, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum43, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum43);
                        this.TollingDirection = (MsgFrame.TollingDirection)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingDirection", "MsgFrame.TollingDirection", "tollingDirection", "TollingDirection", false); throw;
                    }
                }
                else
                {
                    this.TollingDirection = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingNodeInfo", null, "TollingNodeInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TollingNodeType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TollingNodeType
    {
        EntranceStation = 0,
        ExitStatino = 1,
        EntranceAndExitStation = 2,
        Gantry = 3
    }
    /// <summary>
    /// Represents schema type 'TollingDirection' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TollingDirection
    {
        North = 0,
        Northeast = 1,
        East = 2,
        Southeast = 3,
        South = 4,
        Southwest = 5,
        West = 6,
        Northwest = 7
    }
    /// <summary>
    /// Represents schema type 'TollInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TollInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'price'</summary>
        public int? Price { get; set; }
        /// <summary>Field 'entrancePos'</summary>
        public PositionOffsetLLV EntrancePos { get; set; }
        /// <summary>Field 'exitPos'</summary>
        public PositionOffsetLLV ExitPos { get; set; }
        [System.Serializable]
        public partial class TollRoadType : System.Collections.Generic.List<NodeReferenceID>
        {
            /// <summary>
            /// Initializes a new instance of the TollRoadType class that is empty and has the default initial capacity.
            /// </summary>
            public TollRoadType() : base() {}
            /// <summary>
            /// Initializes a new instance of the TollRoadType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new TollRoadType.</param>
            /// </summary>
            public TollRoadType(System.Collections.Generic.IEnumerable<NodeReferenceID> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the TollRoadType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new TollRoadType can initially store.</param>
            /// </summary>
            public TollRoadType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                TollRoadType that = right as TollRoadType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'tollRoad'</summary>
        public TollRoadType TollRoad { get; set; }
        /// <summary>Field 'tollPath'</summary>
        public ReferencePath TollPath { get; set; }
        /// <summary>Field 'timeBegin'</summary>
        public DDateTime TimeBegin { get; set; }
        /// <summary>Field 'timeEnd'</summary>
        public DDateTime TimeEnd { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TollInfo that = right as TollInfo;
            if (Price != null) {
                if (Price != that.Price)
                    return false;
            } else if (that.Price != null)
                return false;
            if (EntrancePos != null) {
                if (!EntrancePos.Equals(that.EntrancePos))
                    return false;
            } else if (that.EntrancePos != null)
                return false;
            if (ExitPos != null) {
                if (!ExitPos.Equals(that.ExitPos))
                    return false;
            } else if (that.ExitPos != null)
                return false;
            if (TollRoad != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(TollRoad, that.TollRoad))
                    return false;
            } else if (that.TollRoad != null)
                return false;
            if (TollPath != null) {
                if (!TollPath.Equals(that.TollPath))
                    return false;
            } else if (that.TollPath != null)
                return false;
            if (TimeBegin != null) {
                if (!TimeBegin.Equals(that.TimeBegin))
                    return false;
            } else if (that.TimeBegin != null)
                return false;
            if (TimeEnd != null) {
                if (!TimeEnd.Equals(that.TimeEnd))
                    return false;
            } else if (that.TimeEnd != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Price != null)
                hash ^= Price.GetHashCode();
            if (EntrancePos != null)
                hash ^= EntrancePos.GetHashCode();
            if (ExitPos != null)
                hash ^= ExitPos.GetHashCode();
            if (TollRoad != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(TollRoad);
            if (TollPath != null)
                hash ^= TollPath.GetHashCode();
            if (TimeBegin != null)
                hash ^= TimeBegin.GetHashCode();
            if (TimeEnd != null)
                hash ^= TimeEnd.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TollInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Price != null) {
                        if (this.Price.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Price.Value > 424967295)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Price.Value", "int", "price", "INTEGER", false); throw;
                }
                try {
                    if (this.EntrancePos != null) {
                        this.EntrancePos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EntrancePos", "PositionOffsetLLV", "entrancePos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.ExitPos != null) {
                        this.ExitPos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ExitPos", "PositionOffsetLLV", "exitPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.TollRoad != null) {
                        for (int i2 = 0; i2 < this.TollRoad.Count; i2++)
                        {
                            try {
                                this.TollRoad[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "NodeReferenceID", "#" + i2.ToString(), "NodeReferenceID", false); throw;
                            }
                        }
                        if (this.TollRoad.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.TollRoad.Count > 256)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollRoad", "TollRoadType", "tollRoad", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.TollPath != null) {
                        this.TollPath.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollPath", "ReferencePath", "tollPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TimeBegin != null) {
                        this.TimeBegin.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeBegin", "DDateTime", "timeBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TimeEnd != null) {
                        this.TimeEnd.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeEnd", "DDateTime", "timeEnd", "DDateTime", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollInfo", null, "TollInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TollInfo obj0 = new TollInfo();
            {
                obj0.Price = this.Price;
            }
            {
                obj0.EntrancePos = Oss.Asn1.Internal.CopyUtil.CopyType(this.EntrancePos);
            }
            {
                obj0.ExitPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.ExitPos);
            }
            {
                TollRoadType seqof1 = this.TollRoad;
                TollRoadType data1 = null;
                if (seqof1 != null) {
                    data1 = new TollRoadType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.TollRoad = data1;
            }
            {
                obj0.TollPath = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollPath);
            }
            {
                obj0.TimeBegin = Oss.Asn1.Internal.CopyUtil.CopyType(this.TimeBegin);
            }
            {
                obj0.TimeEnd = Oss.Asn1.Internal.CopyUtil.CopyType(this.TimeEnd);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    int? data1 = this.Price;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("price ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    PositionOffsetLLV data1 = this.EntrancePos;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("entrancePos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PositionOffsetLLV data1 = this.ExitPos;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("exitPos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    TollRoadType data1 = this.TollRoad;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("tollRoad ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                {
                    ReferencePath data1 = this.TollPath;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("tollPath ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TimeBegin;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("timeBegin ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    DDateTime data1 = this.TimeEnd;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("timeEnd ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Price != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.EntrancePos != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.ExitPos != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.TollRoad != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.TollPath != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.TimeBegin != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                if (this.TimeEnd != null)
                    optMask0[0] |= (byte)(0x80 >> 6);
                enc.Output.WriteBits(optMask0, 0, 7);
                try {
                    if (this.Price != null)
                    {
                        if (enc.BitCount(this.Price.Value - 0) > 29 || this.Price.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Price.Value);
                        enc.EncodeConstrainedInteger((this.Price.Value - (0)), 29);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Price.Value", "int", "price", "INTEGER", false); throw;
                }
                try {
                    if (this.EntrancePos != null)
                    {
                        enc.EncodeType(this.EntrancePos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EntrancePos", "PositionOffsetLLV", "entrancePos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.ExitPos != null)
                    {
                        enc.EncodeType(this.ExitPos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ExitPos", "PositionOffsetLLV", "exitPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    TollRoadType data1 = this.TollRoad;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 2 || data1.Count > 256)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 2, 256);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "NodeReferenceID", "#" + i1.ToString(), "NodeReferenceID", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollRoad", "TollRoadType", "tollRoad", "SEQUENCE OF", false); throw;
                }
                try {
                    if (this.TollPath != null)
                    {
                        enc.EncodeType(this.TollPath);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollPath", "ReferencePath", "tollPath", "ReferencePath", false); throw;
                }
                try {
                    if (this.TimeBegin != null)
                    {
                        enc.EncodeType(this.TimeBegin);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeBegin", "DDateTime", "timeBegin", "DDateTime", false); throw;
                }
                try {
                    if (this.TimeEnd != null)
                    {
                        enc.EncodeType(this.TimeEnd);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeEnd", "DDateTime", "timeEnd", "DDateTime", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollInfo", null, "TollInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 8);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Price = dec.DecodeConstrainedInteger(29, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Price", "int", "price", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.Price = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PositionOffsetLLV data1 = new PositionOffsetLLV();

                        dec.DecodeType(data1);
                        this.EntrancePos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EntrancePos", "PositionOffsetLLV", "entrancePos", "PositionOffsetLLV", false); throw;
                    }
                }
                else
                {
                    this.EntrancePos = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        PositionOffsetLLV data1 = new PositionOffsetLLV();

                        dec.DecodeType(data1);
                        this.ExitPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ExitPos", "PositionOffsetLLV", "exitPos", "PositionOffsetLLV", false); throw;
                    }
                }
                else
                {
                    this.ExitPos = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        TollRoadType data1 = new TollRoadType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(2, 256, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    NodeReferenceID data2 = new NodeReferenceID();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "NodeReferenceID", "#" + data1.Count.ToString(), "NodeReferenceID", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.TollRoad = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollRoad", "TollRoadType", "tollRoad", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.TollRoad = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        ReferencePath data1 = new ReferencePath();

                        dec.DecodeType(data1);
                        this.TollPath = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollPath", "ReferencePath", "tollPath", "ReferencePath", false); throw;
                    }
                }
                else
                {
                    this.TollPath = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TimeBegin = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeBegin", "DDateTime", "timeBegin", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TimeBegin = null;
                }
                if ((optMask0[0] & 0x1) != 0)
                {
                    try {
                        DDateTime data1 = new DDateTime();

                        dec.DecodeType(data1);
                        this.TimeEnd = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeEnd", "DDateTime", "timeEnd", "DDateTime", false); throw;
                    }
                }
                else
                {
                    this.TimeEnd = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollInfo", null, "TollInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VSI' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VSI : Oss.Asn1.BaseType
    {
        /// <summary>Field 'time'</summary>
        public DDateTime Time { get; set; }
        /// <summary>Field 'obuId'</summary>
        public byte[] ObuId { get; set; }
        /// <summary>Field 'targetId'</summary>
        public byte[] TargetId { get; set; }
        /// <summary>Field 'obuInfo'</summary>
        public MsgFrame.OBUInfo ObuInfo { get; set; }
        /// <summary>Field 'vpapplicationList'</summary>
        public MsgFrame.VPApplicationList VpapplicationList { get; set; }
        /// <summary>Field 'rndOBU'</summary>
        public byte[] RndOBU { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VSI that = right as VSI;
            if (Time != null) {
                if (!Time.Equals(that.Time))
                    return false;
            } else if (that.Time != null)
                return false;
            if (ObuId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(ObuId, that.ObuId))
                    return false;
            } else if (that.ObuId != null)
                return false;
            if (TargetId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TargetId, that.TargetId))
                    return false;
            } else if (that.TargetId != null)
                return false;
            if (ObuInfo != null) {
                if (!ObuInfo.Equals(that.ObuInfo))
                    return false;
            } else if (that.ObuInfo != null)
                return false;
            if (VpapplicationList != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(VpapplicationList, that.VpapplicationList))
                    return false;
            } else if (that.VpapplicationList != null)
                return false;
            if (RndOBU != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(RndOBU, that.RndOBU))
                    return false;
            } else if (that.RndOBU != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Time != null)
                hash ^= Time.GetHashCode();
            if (ObuId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(ObuId);
            if (TargetId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TargetId);
            if (ObuInfo != null)
                hash ^= ObuInfo.GetHashCode();
            if (VpapplicationList != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(VpapplicationList);
            if (RndOBU != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(RndOBU);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VSI";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Time == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Time.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    if (this.ObuId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.ObuId.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuId", "byte[]", "obuId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null) {
                        if (this.TargetId.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.ObuInfo != null) {
                        this.ObuInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuInfo", "MsgFrame.OBUInfo", "obuInfo", "OBUInfo", false); throw;
                }
                try {
                    if (this.VpapplicationList != null) {
                        this.VpapplicationList.Validate();
                        if (this.VpapplicationList.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.VpapplicationList.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VpapplicationList", "MsgFrame.VPApplicationList", "vpapplicationList", "VPApplicationList", false); throw;
                }
                try {
                    if (this.RndOBU != null) {
                        if (this.RndOBU.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndOBU", "byte[]", "rndOBU", "RandStr8", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VSI", null, "VSI", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VSI obj0 = new VSI();
            {
                obj0.Time = Oss.Asn1.Internal.CopyUtil.CopyType(this.Time);
            }
            {
                obj0.ObuId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.ObuId);
            }
            {
                obj0.TargetId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TargetId);
            }
            {
                obj0.ObuInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObuInfo);
            }
            {
                obj0.VpapplicationList = this.VpapplicationList == null ? null : (MsgFrame.VPApplicationList)this.VpapplicationList.Copy();
            }
            {
                obj0.RndOBU = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.RndOBU);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("time ");
                    if (this.Time == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Time);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("obuId ");
                    if (this.ObuId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.ObuId);
                    }
                }
                {
                    byte[] data1 = this.TargetId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetId ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    MsgFrame.OBUInfo data1 = this.ObuInfo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("obuInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.VPApplicationList data1 = this.VpapplicationList;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("vpapplicationList ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    byte[] data1 = this.RndOBU;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("rndOBU ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TargetId != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ObuInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.VpapplicationList != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.RndOBU != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    enc.EncodeType(this.Time);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.ObuId, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuId", "byte[]", "obuId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null)
                    {
                        enc.EncodeOctetString(this.TargetId, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                    MsgFrame.OBUInfo data1 = this.ObuInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuInfo", "MsgFrame.OBUInfo", "obuInfo", "OBUInfo", false); throw;
                }
                try {
                    MsgFrame.VPApplicationList data1 = this.VpapplicationList;

                    if (data1 != null)
                    {
                        data1.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VpapplicationList", "MsgFrame.VPApplicationList", "vpapplicationList", "VPApplicationList", false); throw;
                }
                try {
                    if (this.RndOBU != null)
                    {
                        enc.EncodeOctetString(this.RndOBU, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndOBU", "byte[]", "rndOBU", "RandStr8", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VSI", null, "VSI", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.Time = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    this.ObuId = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuId", "byte[]", "obuId", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TargetId = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TargetId = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.OBUInfo data1 = new MsgFrame.OBUInfo();

                        dec.DecodeType(data1);
                        this.ObuInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuInfo", "MsgFrame.OBUInfo", "obuInfo", "OBUInfo", false); throw;
                    }
                }
                else
                {
                    this.ObuInfo = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.VPApplicationList data1 = new MsgFrame.VPApplicationList();

                        data1.DecodePer(dec);
                        this.VpapplicationList = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VpapplicationList", "MsgFrame.VPApplicationList", "vpapplicationList", "VPApplicationList", false); throw;
                    }
                }
                else
                {
                    this.VpapplicationList = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.RndOBU = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "RndOBU", "byte[]", "rndOBU", "RandStr8", false); throw;
                    }
                }
                else
                {
                    this.RndOBU = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VSI", null, "VSI", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'OBUInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class OBUInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'obuType'</summary>
        public MsgFrame.OBUType ObuType { get; set; }
        /// <summary>Field 'obuMotionStatus'</summary>
        public MsgFrame.OBUMotionStatus ObuMotionStatus { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            OBUInfo that = right as OBUInfo;
            if (ObuType != that.ObuType)
                return false;
            if (ObuMotionStatus != null) {
                if (!ObuMotionStatus.Equals(that.ObuMotionStatus))
                    return false;
            } else if (that.ObuMotionStatus != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= ObuType.GetHashCode();
            if (ObuMotionStatus != null)
                hash ^= ObuMotionStatus.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "OBUInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuType", "MsgFrame.OBUType", "obuType", "OBUType", false); throw;
                }
                try {
                    if (this.ObuMotionStatus != null) {
                        this.ObuMotionStatus.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuMotionStatus", "MsgFrame.OBUMotionStatus", "obuMotionStatus", "OBUMotionStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUInfo", null, "OBUInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            OBUInfo obj0 = new OBUInfo();
            {
                obj0.ObuType = this.ObuType;
            }
            {
                obj0.ObuMotionStatus = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObuMotionStatus);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("obuType ");
                    switch (this.ObuType) {
                    case MsgFrame.OBUType.OemObu:
                        prt.Write("oemObu");
                        break;
                    case MsgFrame.OBUType.AftermarketObu:
                        prt.Write("aftermarketObu");
                        break;
                    case MsgFrame.OBUType.MobilePhone:
                        prt.Write("mobilePhone");
                        break;
                    default:
                        prt.Write((int)this.ObuType);
                        break;
                    }
                }
                {
                    MsgFrame.OBUMotionStatus data1 = this.ObuMotionStatus;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("obuMotionStatus ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.ObuMotionStatus != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeEnumWithExtension((int)this.ObuType, _InternalMetadata.PerCodecMetaData.SortedEnum44, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum44);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuType", "MsgFrame.OBUType", "obuType", "OBUType", false); throw;
                }
                try {
                    MsgFrame.OBUMotionStatus data1 = this.ObuMotionStatus;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuMotionStatus", "MsgFrame.OBUMotionStatus", "obuMotionStatus", "OBUMotionStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUInfo", null, "OBUInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum44, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum44, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum44);
                    this.ObuType = (MsgFrame.OBUType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuType", "MsgFrame.OBUType", "obuType", "OBUType", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.OBUMotionStatus data1 = new MsgFrame.OBUMotionStatus();

                        dec.DecodeType(data1);
                        this.ObuMotionStatus = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuMotionStatus", "MsgFrame.OBUMotionStatus", "obuMotionStatus", "OBUMotionStatus", false); throw;
                    }
                }
                else
                {
                    this.ObuMotionStatus = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUInfo", null, "OBUInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'OBUType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum OBUType
    {
        OemObu = 0,
        AftermarketObu = 1,
        MobilePhone = 2
    }
    /// <summary>
    /// Represents schema type 'OBUMotionStatus' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class OBUMotionStatus : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }
        /// <summary>Field 'heading'</summary>
        public int? Heading { get; set; }
        /// <summary>Field 'speed'</summary>
        public int? Speed { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            OBUMotionStatus that = right as OBUMotionStatus;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            if (Heading != null) {
                if (Heading != that.Heading)
                    return false;
            } else if (that.Heading != null)
                return false;
            if (Speed != null) {
                if (Speed != that.Speed)
                    return false;
            } else if (that.Speed != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            if (Heading != null)
                hash ^= Heading.GetHashCode();
            if (Speed != null)
                hash ^= Speed.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "OBUMotionStatus";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Pos != null) {
                        this.Pos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.Heading != null) {
                        if (this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Heading.Value > 28800)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Speed != null) {
                        if (this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Speed.Value > 8191)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUMotionStatus", null, "OBUMotionStatus", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            OBUMotionStatus obj0 = new OBUMotionStatus();
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            {
                obj0.Heading = this.Heading;
            }
            {
                obj0.Speed = this.Speed;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Position3D data1 = this.Pos;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("pos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.Heading;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("heading ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.Speed;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("speed ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Pos != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Heading != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.Speed != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                enc.Output.WriteBits(optMask0, 0, 3);
                try {
                    if (this.Pos != null)
                    {
                        enc.EncodeType(this.Pos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
                try {
                    if (this.Heading != null)
                    {
                        if (enc.BitCount(this.Heading.Value - 0) > 15 || this.Heading.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Heading.Value);
                        enc.EncodeConstrainedInteger((this.Heading.Value - (0)), 15);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading.Value", "int", "heading", "Heading", false); throw;
                }
                try {
                    if (this.Speed != null)
                    {
                        if (enc.BitCount(this.Speed.Value - 0) > 13 || this.Speed.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Speed.Value);
                        enc.EncodeConstrainedInteger((this.Speed.Value - (0)), 13);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed.Value", "int", "speed", "Speed", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUMotionStatus", null, "OBUMotionStatus", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 4);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Position3D data1 = new Position3D();

                        dec.DecodeType(data1);
                        this.Pos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                    }
                }
                else
                {
                    this.Pos = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Heading = dec.DecodeConstrainedInteger(15, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Heading", "int", "heading", "Heading", false); throw;
                    }
                }
                else
                {
                    this.Heading = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        this.Speed = dec.DecodeConstrainedInteger(13, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Speed", "int", "speed", "Speed", false); throw;
                    }
                }
                else
                {
                    this.Speed = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUMotionStatus", null, "OBUMotionStatus", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VPApplicationList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class VPApplicationList : System.Collections.Generic.List<VPApplicationParameter>
    {
        /// <summary>
        /// Initializes a new instance of the VPApplicationList class that is empty and has the default initial capacity.
        /// </summary>
        public VPApplicationList() : base() {}
        /// <summary>
        /// Initializes a new instance of the VPApplicationList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new VPApplicationList.</param>
        /// </summary>
        public VPApplicationList(System.Collections.Generic.IEnumerable<VPApplicationParameter> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the VPApplicationList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new VPApplicationList can initially store.</param>
        /// </summary>
        public VPApplicationList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VPApplicationList that = right as VPApplicationList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        this[i1].Validate();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "VPApplicationParameter", "#" + i1.ToString(), "VPApplicationParameter", false); throw;
                    }
                }
                if (this.Count < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationList", null, "VPApplicationList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            VPApplicationList obj0 = new VPApplicationList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyType(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                if (this.Count < 1 || this.Count > 16)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + this.Count);
                enc.EncodeConstrainedLength(this.Count, 1, 16);
                for (i0 = 0; i0 < this.Count; i0++)
                {
                    try {
                        enc.EncodeType(this[i0]);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "VPApplicationParameter", "#" + i0.ToString(), "VPApplicationParameter", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationList", null, "VPApplicationList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeConstrainedLength(1, 16, ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            VPApplicationParameter data1 = new VPApplicationParameter();

                            dec.DecodeType(data1);
                            this.Add(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "VPApplicationParameter", "#" + this.Count.ToString(), "VPApplicationParameter", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationList", null, "VPApplicationList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VPApplicationParameter' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VPApplicationParameter : Oss.Asn1.BaseType
    {
        /// <summary>Field 'pid'</summary>
        public PaymentEntityID Pid { get; set; }
        /// <summary>Field 'obuPaymentInfo'</summary>
        public MsgFrame.OBUPaymentInfo ObuPaymentInfo { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VPApplicationParameter that = right as VPApplicationParameter;
            if (Pid != that.Pid)
                return false;
            if (ObuPaymentInfo != null) {
                if (!ObuPaymentInfo.Equals(that.ObuPaymentInfo))
                    return false;
            } else if (that.ObuPaymentInfo != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Pid.GetHashCode();
            if (ObuPaymentInfo != null)
                hash ^= ObuPaymentInfo.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VPApplicationParameter";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    if (this.ObuPaymentInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ObuPaymentInfo.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfo", "MsgFrame.OBUPaymentInfo", "obuPaymentInfo", "OBUPaymentInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationParameter", null, "VPApplicationParameter", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VPApplicationParameter obj0 = new VPApplicationParameter();
            {
                obj0.Pid = this.Pid;
            }
            {
                obj0.ObuPaymentInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObuPaymentInfo);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("pid ");
                    switch (this.Pid) {
                    case PaymentEntityID.SystemId:
                        prt.Write("system");
                        break;
                    case PaymentEntityID.Freeflow:
                        prt.Write("freeflow");
                        break;
                    case PaymentEntityID.Enclosed:
                        prt.Write("enclosed");
                        break;
                    case PaymentEntityID.Congestion:
                        prt.Write("congestion");
                        break;
                    case PaymentEntityID.Charging:
                        prt.Write("charging");
                        break;
                    case PaymentEntityID.Parking:
                        prt.Write("parking");
                        break;
                    default:
                        prt.Write((int)this.Pid);
                        break;
                    }
                }
                {
                    MsgFrame.OBUPaymentInfo data1 = this.ObuPaymentInfo;

                    prt.WriteLine(",");
                    prt.Write("obuPaymentInfo ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeEnumWithExtension((int)this.Pid, _InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    enc.EncodeType(this.ObuPaymentInfo);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfo", "MsgFrame.OBUPaymentInfo", "obuPaymentInfo", "OBUPaymentInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationParameter", null, "VPApplicationParameter", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum41);
                    this.Pid = (PaymentEntityID)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pid", "PaymentEntityID", "pid", "PaymentEntityID", false); throw;
                }
                try {
                    MsgFrame.OBUPaymentInfo data1 = new MsgFrame.OBUPaymentInfo();

                    dec.DecodeType(data1);
                    this.ObuPaymentInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfo", "MsgFrame.OBUPaymentInfo", "obuPaymentInfo", "OBUPaymentInfo", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VPApplicationParameter", null, "VPApplicationParameter", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'OBUPaymentInfo' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class OBUPaymentInfo : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            ObuPaymentInfoType1Chosen = 1
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'obuPaymentInfoType1'</summary>
        public MsgFrame.OBUPaymentInfoType1 ObuPaymentInfoType1 {
            get {
                if (_id == Id.ObuPaymentInfoType1Chosen)
                    return (_contained as MsgFrame.OBUPaymentInfoType1);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.ObuPaymentInfoType1Chosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            OBUPaymentInfo that = right as OBUPaymentInfo;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "OBUPaymentInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case OBUPaymentInfo.Id.ObuPaymentInfoType1Chosen:
                    try {
                        if (this.ObuPaymentInfoType1 == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.ObuPaymentInfoType1.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfoType1", "MsgFrame.OBUPaymentInfoType1", "obuPaymentInfoType1", "OBUPaymentInfoType1", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfo", null, "OBUPaymentInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            OBUPaymentInfo obj0 = new OBUPaymentInfo();
            switch (this.Selected) {
                case OBUPaymentInfo.Id.ObuPaymentInfoType1Chosen:
                {
                    obj0.ObuPaymentInfoType1 = Oss.Asn1.Internal.CopyUtil.CopyType(this.ObuPaymentInfoType1);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case OBUPaymentInfo.Id.ObuPaymentInfoType1Chosen:
                    {
                        MsgFrame.OBUPaymentInfoType1 data1 = this.ObuPaymentInfoType1;

                        prt.Write("obuPaymentInfoType1 : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 1)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 2);
                else
                {
                    // Only one alternative in the extension root - no index encoding
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case OBUPaymentInfo.Id.ObuPaymentInfoType1Chosen:
                        try {
                            MsgFrame.OBUPaymentInfoType1 data1 = this.ObuPaymentInfoType1;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfoType1", "MsgFrame.OBUPaymentInfoType1", "obuPaymentInfoType1", "OBUPaymentInfoType1", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfo", null, "OBUPaymentInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 2;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = 1;
                }
                switch ((OBUPaymentInfo.Id)choice_alt0)
                {
                    case OBUPaymentInfo.Id.ObuPaymentInfoType1Chosen:
                        try {
                            MsgFrame.OBUPaymentInfoType1 data1 = new MsgFrame.OBUPaymentInfoType1();

                            dec.DecodeType(data1);
                            this.ObuPaymentInfoType1 = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "ObuPaymentInfoType1", "MsgFrame.OBUPaymentInfoType1", "obuPaymentInfoType1", "OBUPaymentInfoType1", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfo", null, "OBUPaymentInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'OBUPaymentInfoType1' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class OBUPaymentInfoType1 : Oss.Asn1.BaseType
    {
        /// <summary>Field 'equipmentClass'</summary>
        public MsgFrame.EquipmentClass? EquipmentClass { get; set; }
        /// <summary>Field 'gbiCCInfo'</summary>
        public MsgFrame.GBICCInfo GbiCCInfo { get; set; }
        /// <summary>Field 'sysInfo'</summary>
        public MsgFrame.SysInfo SysInfo { get; set; }
        /// <summary>Field 'vehicleInfo'</summary>
        public MsgFrame.VehicleInfo VehicleInfo { get; set; }
        /// <summary>Field 'passedSitesInfo'</summary>
        public MsgFrame.PassedSitesInfo PassedSitesInfo { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            OBUPaymentInfoType1 that = right as OBUPaymentInfoType1;
            if (EquipmentClass != null) {
                if (EquipmentClass != that.EquipmentClass)
                    return false;
            } else if (that.EquipmentClass != null)
                return false;
            if (GbiCCInfo != null) {
                if (!GbiCCInfo.Equals(that.GbiCCInfo))
                    return false;
            } else if (that.GbiCCInfo != null)
                return false;
            if (SysInfo != null) {
                if (!SysInfo.Equals(that.SysInfo))
                    return false;
            } else if (that.SysInfo != null)
                return false;
            if (VehicleInfo != null) {
                if (!VehicleInfo.Equals(that.VehicleInfo))
                    return false;
            } else if (that.VehicleInfo != null)
                return false;
            if (PassedSitesInfo != null) {
                if (!PassedSitesInfo.Equals(that.PassedSitesInfo))
                    return false;
            } else if (that.PassedSitesInfo != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (EquipmentClass != null)
                hash ^= EquipmentClass.GetHashCode();
            if (GbiCCInfo != null)
                hash ^= GbiCCInfo.GetHashCode();
            if (SysInfo != null)
                hash ^= SysInfo.GetHashCode();
            if (VehicleInfo != null)
                hash ^= VehicleInfo.GetHashCode();
            if (PassedSitesInfo != null)
                hash ^= PassedSitesInfo.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "OBUPaymentInfoType1";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.EquipmentClass != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentClass.Value", "MsgFrame.EquipmentClass", "equipmentClass", "EquipmentClass", false); throw;
                }
                try {
                    if (this.GbiCCInfo != null) {
                        this.GbiCCInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "GbiCCInfo", "MsgFrame.GBICCInfo", "gbiCCInfo", "GBICCInfo", false); throw;
                }
                try {
                    if (this.SysInfo != null) {
                        this.SysInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SysInfo", "MsgFrame.SysInfo", "sysInfo", "SysInfo", false); throw;
                }
                try {
                    if (this.VehicleInfo != null) {
                        this.VehicleInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "MsgFrame.VehicleInfo", "vehicleInfo", "VehicleInfo", false); throw;
                }
                try {
                    if (this.PassedSitesInfo != null) {
                        this.PassedSitesInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedSitesInfo", "MsgFrame.PassedSitesInfo", "passedSitesInfo", "PassedSitesInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfoType1", null, "OBUPaymentInfoType1", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            OBUPaymentInfoType1 obj0 = new OBUPaymentInfoType1();
            {
                obj0.EquipmentClass = this.EquipmentClass;
            }
            {
                obj0.GbiCCInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.GbiCCInfo);
            }
            {
                obj0.SysInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.SysInfo);
            }
            {
                obj0.VehicleInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleInfo);
            }
            {
                obj0.PassedSitesInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.PassedSitesInfo);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    MsgFrame.EquipmentClass? data1 = this.EquipmentClass;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("equipmentClass ");
                        switch (data1.Value) {
                        case MsgFrame.EquipmentClass.OnechipOBU:
                            prt.Write("onechipOBU");
                            break;
                        case MsgFrame.EquipmentClass.IccOBU:
                            prt.Write("iccOBU");
                            break;
                        case MsgFrame.EquipmentClass.CpcOBU:
                            prt.Write("cpcOBU");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                {
                    MsgFrame.GBICCInfo data1 = this.GbiCCInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("gbiCCInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.SysInfo data1 = this.SysInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("sysInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.VehicleInfo data1 = this.VehicleInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("vehicleInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.PassedSitesInfo data1 = this.PassedSitesInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("passedSitesInfo ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.EquipmentClass != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.GbiCCInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.SysInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.VehicleInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.PassedSitesInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                enc.Output.WriteBits(optMask0, 0, 5);
                try {
                    if (this.EquipmentClass != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.EquipmentClass.Value, _InternalMetadata.PerCodecMetaData.SortedEnum45, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum45);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentClass.Value", "MsgFrame.EquipmentClass", "equipmentClass", "EquipmentClass", false); throw;
                }
                try {
                    MsgFrame.GBICCInfo data1 = this.GbiCCInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "GbiCCInfo", "MsgFrame.GBICCInfo", "gbiCCInfo", "GBICCInfo", false); throw;
                }
                try {
                    MsgFrame.SysInfo data1 = this.SysInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SysInfo", "MsgFrame.SysInfo", "sysInfo", "SysInfo", false); throw;
                }
                try {
                    MsgFrame.VehicleInfo data1 = this.VehicleInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "MsgFrame.VehicleInfo", "vehicleInfo", "VehicleInfo", false); throw;
                }
                try {
                    MsgFrame.PassedSitesInfo data1 = this.PassedSitesInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedSitesInfo", "MsgFrame.PassedSitesInfo", "passedSitesInfo", "PassedSitesInfo", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfoType1", null, "OBUPaymentInfoType1", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 6);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum45, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum45, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum45);
                        this.EquipmentClass = (MsgFrame.EquipmentClass)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EquipmentClass", "MsgFrame.EquipmentClass", "equipmentClass", "EquipmentClass", false); throw;
                    }
                }
                else
                {
                    this.EquipmentClass = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.GBICCInfo data1 = new MsgFrame.GBICCInfo();

                        dec.DecodeType(data1);
                        this.GbiCCInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GbiCCInfo", "MsgFrame.GBICCInfo", "gbiCCInfo", "GBICCInfo", false); throw;
                    }
                }
                else
                {
                    this.GbiCCInfo = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.SysInfo data1 = new MsgFrame.SysInfo();

                        dec.DecodeType(data1);
                        this.SysInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SysInfo", "MsgFrame.SysInfo", "sysInfo", "SysInfo", false); throw;
                    }
                }
                else
                {
                    this.SysInfo = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        MsgFrame.VehicleInfo data1 = new MsgFrame.VehicleInfo();

                        dec.DecodeType(data1);
                        this.VehicleInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "MsgFrame.VehicleInfo", "vehicleInfo", "VehicleInfo", false); throw;
                    }
                }
                else
                {
                    this.VehicleInfo = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        MsgFrame.PassedSitesInfo data1 = new MsgFrame.PassedSitesInfo();

                        dec.DecodeType(data1);
                        this.PassedSitesInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedSitesInfo", "MsgFrame.PassedSitesInfo", "passedSitesInfo", "PassedSitesInfo", false); throw;
                    }
                }
                else
                {
                    this.PassedSitesInfo = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "OBUPaymentInfoType1", null, "OBUPaymentInfoType1", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'EquipmentClass' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum EquipmentClass
    {
        OnechipOBU = 0,
        IccOBU = 1,
        CpcOBU = 2
    }
    /// <summary>
    /// Represents schema type 'GBICCInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class GBICCInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'iccIssueInfo'</summary>
        public byte[] IccIssueInfo { get; set; }
        /// <summary>Field 'iccUniTollInfo'</summary>
        public byte[] IccUniTollInfo { get; set; }
        /// <summary>Field 'iccBalance'</summary>
        public byte[] IccBalance { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            GBICCInfo that = right as GBICCInfo;
            if (IccIssueInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(IccIssueInfo, that.IccIssueInfo))
                    return false;
            } else if (that.IccIssueInfo != null)
                return false;
            if (IccUniTollInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(IccUniTollInfo, that.IccUniTollInfo))
                    return false;
            } else if (that.IccUniTollInfo != null)
                return false;
            if (IccBalance != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(IccBalance, that.IccBalance))
                    return false;
            } else if (that.IccBalance != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (IccIssueInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(IccIssueInfo);
            if (IccUniTollInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(IccUniTollInfo);
            if (IccBalance != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(IccBalance);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "GBICCInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.IccIssueInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.IccIssueInfo.Length < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.IccIssueInfo.Length > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccIssueInfo", "byte[]", "iccIssueInfo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.IccUniTollInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.IccUniTollInfo.Length < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.IccUniTollInfo.Length > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccUniTollInfo", "byte[]", "iccUniTollInfo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.IccBalance == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.IccBalance.Length < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.IccBalance.Length > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccBalance", "byte[]", "iccBalance", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GBICCInfo", null, "GBICCInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            GBICCInfo obj0 = new GBICCInfo();
            {
                obj0.IccIssueInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.IccIssueInfo);
            }
            {
                obj0.IccUniTollInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.IccUniTollInfo);
            }
            {
                obj0.IccBalance = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.IccBalance);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("iccIssueInfo ");
                    if (this.IccIssueInfo == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.IccIssueInfo);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("iccUniTollInfo ");
                    if (this.IccUniTollInfo == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.IccUniTollInfo);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("iccBalance ");
                    if (this.IccBalance == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.IccBalance);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    bool extPresent1 = !(this.IccIssueInfo.Length <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeOctetString(this.IccIssueInfo);
                    else {
                        enc.EncodeOctetString(this.IccIssueInfo, 0, 127);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccIssueInfo", "byte[]", "iccIssueInfo", "OCTET STRING", false); throw;
                }
                try {
                    bool extPresent1 = !(this.IccUniTollInfo.Length <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeOctetString(this.IccUniTollInfo);
                    else {
                        enc.EncodeOctetString(this.IccUniTollInfo, 0, 127);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccUniTollInfo", "byte[]", "iccUniTollInfo", "OCTET STRING", false); throw;
                }
                try {
                    bool extPresent1 = !(this.IccBalance.Length <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeOctetString(this.IccBalance);
                    else {
                        enc.EncodeOctetString(this.IccBalance, 0, 127);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccBalance", "byte[]", "iccBalance", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GBICCInfo", null, "GBICCInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    byte[] data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeOctetString();
                    else
                        data1 = dec.DecodeOctetString(0, 127);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length <= 127))
                        dec.RaiseExtLengthError(extPresent1);
                    this.IccIssueInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccIssueInfo", "byte[]", "iccIssueInfo", "OCTET STRING", false); throw;
                }
                try {
                    byte[] data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeOctetString();
                    else
                        data1 = dec.DecodeOctetString(0, 127);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length <= 127))
                        dec.RaiseExtLengthError(extPresent1);
                    this.IccUniTollInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccUniTollInfo", "byte[]", "iccUniTollInfo", "OCTET STRING", false); throw;
                }
                try {
                    byte[] data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeOctetString();
                    else
                        data1 = dec.DecodeOctetString(0, 127);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length <= 127))
                        dec.RaiseExtLengthError(extPresent1);
                    this.IccBalance = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "IccBalance", "byte[]", "iccBalance", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GBICCInfo", null, "GBICCInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SysInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SysInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'contractProvider'</summary>
        public byte[] ContractProvider { get; set; }
        /// <summary>Field 'contractType'</summary>
        public long ContractType { get; set; }
        /// <summary>Field 'contractVersion'</summary>
        public long ContractVersion { get; set; }
        /// <summary>Field 'contractSerialNumer'</summary>
        public byte[] ContractSerialNumer { get; set; }
        /// <summary>Field 'contractSignedDate'</summary>
        public DDateTime ContractSignedDate { get; set; }
        /// <summary>Field 'contractExpiredDate'</summary>
        public DDateTime ContractExpiredDate { get; set; }
        /// <summary>Field 'reserved'</summary>
        public byte[] Reserved { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SysInfo that = right as SysInfo;
            if (ContractProvider != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(ContractProvider, that.ContractProvider))
                    return false;
            } else if (that.ContractProvider != null)
                return false;
            if (ContractType != that.ContractType)
                return false;
            if (ContractVersion != that.ContractVersion)
                return false;
            if (ContractSerialNumer != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(ContractSerialNumer, that.ContractSerialNumer))
                    return false;
            } else if (that.ContractSerialNumer != null)
                return false;
            if (ContractSignedDate != null) {
                if (!ContractSignedDate.Equals(that.ContractSignedDate))
                    return false;
            } else if (that.ContractSignedDate != null)
                return false;
            if (ContractExpiredDate != null) {
                if (!ContractExpiredDate.Equals(that.ContractExpiredDate))
                    return false;
            } else if (that.ContractExpiredDate != null)
                return false;
            if (Reserved != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Reserved, that.Reserved))
                    return false;
            } else if (that.Reserved != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (ContractProvider != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(ContractProvider);
            hash ^= ContractType.GetHashCode();
            hash ^= ContractVersion.GetHashCode();
            if (ContractSerialNumer != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(ContractSerialNumer);
            if (ContractSignedDate != null)
                hash ^= ContractSignedDate.GetHashCode();
            if (ContractExpiredDate != null)
                hash ^= ContractExpiredDate.GetHashCode();
            if (Reserved != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Reserved);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SysInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.ContractProvider == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.ContractProvider.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractProvider", "byte[]", "contractProvider", "OCTET STRING", false); throw;
                }
                try {
                    try {
                        if (this.ContractType < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.ContractType > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractType", "long", "contractType", "INTEGER", false); throw;
                }
                try {
                    try {
                        if (this.ContractVersion < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.ContractVersion > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractVersion", "long", "contractVersion", "INTEGER", false); throw;
                }
                try {
                    if (this.ContractSerialNumer == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.ContractSerialNumer.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSerialNumer", "byte[]", "contractSerialNumer", "OCTET STRING", false); throw;
                }
                try {
                    if (this.ContractSignedDate == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ContractSignedDate.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSignedDate", "DDateTime", "contractSignedDate", "DDateTime", false); throw;
                }
                try {
                    if (this.ContractExpiredDate == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ContractExpiredDate.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractExpiredDate", "DDateTime", "contractExpiredDate", "DDateTime", false); throw;
                }
                try {
                    if (this.Reserved == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Reserved.Length != 64)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Reserved", "byte[]", "reserved", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SysInfo", null, "SysInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SysInfo obj0 = new SysInfo();
            {
                obj0.ContractProvider = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.ContractProvider);
            }
            {
                obj0.ContractType = this.ContractType;
            }
            {
                obj0.ContractVersion = this.ContractVersion;
            }
            {
                obj0.ContractSerialNumer = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.ContractSerialNumer);
            }
            {
                obj0.ContractSignedDate = Oss.Asn1.Internal.CopyUtil.CopyType(this.ContractSignedDate);
            }
            {
                obj0.ContractExpiredDate = Oss.Asn1.Internal.CopyUtil.CopyType(this.ContractExpiredDate);
            }
            {
                obj0.Reserved = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Reserved);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("contractProvider ");
                    if (this.ContractProvider == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.ContractProvider);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("contractType ");
                    prt.Write(this.ContractType);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("contractVersion ");
                    prt.Write(this.ContractVersion);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("contractSerialNumer ");
                    if (this.ContractSerialNumer == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.ContractSerialNumer);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("contractSignedDate ");
                    if (this.ContractSignedDate == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.ContractSignedDate);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("contractExpiredDate ");
                    if (this.ContractExpiredDate == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.ContractExpiredDate);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("reserved ");
                    if (this.Reserved == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Reserved);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeOctetString(this.ContractProvider, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractProvider", "byte[]", "contractProvider", "OCTET STRING", false); throw;
                }
                try {
                    bool extPresent1;

                    extPresent1 = !(0 <= this.ContractType && this.ContractType <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeUnconstrainedLongInteger(this.ContractType);
                    else {
                        enc.Output.Write7BitInt((int)(this.ContractType - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractType", "long", "contractType", "INTEGER", false); throw;
                }
                try {
                    bool extPresent1;

                    extPresent1 = !(0 <= this.ContractVersion && this.ContractVersion <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeUnconstrainedLongInteger(this.ContractVersion);
                    else {
                        enc.Output.Write7BitInt((int)(this.ContractVersion - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractVersion", "long", "contractVersion", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.ContractSerialNumer, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSerialNumer", "byte[]", "contractSerialNumer", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeType(this.ContractSignedDate);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSignedDate", "DDateTime", "contractSignedDate", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeType(this.ContractExpiredDate);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractExpiredDate", "DDateTime", "contractExpiredDate", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Reserved, 64);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Reserved", "byte[]", "reserved", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SysInfo", null, "SysInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.ContractProvider = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractProvider", "byte[]", "contractProvider", "OCTET STRING", false); throw;
                }
                try {
                    long data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeUnconstrainedLongInteger();
                    else
                        data1 = 0 + dec.Input.Read7BitInt();
                    if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 127))
                        dec.RaiseExtRangeError(extPresent1);
                    this.ContractType = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractType", "long", "contractType", "INTEGER", false); throw;
                }
                try {
                    long data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeUnconstrainedLongInteger();
                    else
                        data1 = 0 + dec.Input.Read7BitInt();
                    if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 127))
                        dec.RaiseExtRangeError(extPresent1);
                    this.ContractVersion = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractVersion", "long", "contractVersion", "INTEGER", false); throw;
                }
                try {
                    this.ContractSerialNumer = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSerialNumer", "byte[]", "contractSerialNumer", "OCTET STRING", false); throw;
                }
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.ContractSignedDate = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractSignedDate", "DDateTime", "contractSignedDate", "DDateTime", false); throw;
                }
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.ContractExpiredDate = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ContractExpiredDate", "DDateTime", "contractExpiredDate", "DDateTime", false); throw;
                }
                try {
                    this.Reserved = dec.DecodeOctetString(64);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Reserved", "byte[]", "reserved", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SysInfo", null, "SysInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleLicencePlateNumber'</summary>
        public byte[] VehicleLicencePlateNumber { get; set; }
        /// <summary>Field 'vehicleLicencePlateColor'</summary>
        public byte[] VehicleLicencePlateColor { get; set; }
        /// <summary>Field 'vehicleTollingClass'</summary>
        public long VehicleTollingClass { get; set; }
        /// <summary>Field 'vehicleUserType'</summary>
        public long VehicleUserType { get; set; }
        /// <summary>Field 'vehicleDimensions'</summary>
        public MsgFrame.VehicleDimensions VehicleDimensions { get; set; }
        /// <summary>Field 'vehicleWheels'</summary>
        public int VehicleWheels { get; set; }
        /// <summary>Field 'vehicleAxles'</summary>
        public int VehicleAxles { get; set; }
        /// <summary>Field 'vehicleWheelBases'</summary>
        public int VehicleWheelBases { get; set; }
        /// <summary>Field 'vehicleWeightLimits'</summary>
        public int VehicleWeightLimits { get; set; }
        /// <summary>Field 'vehicleSpecificInformation'</summary>
        public byte[] VehicleSpecificInformation { get; set; }
        /// <summary>Field 'vehicleEngineNumber'</summary>
        public byte[] VehicleEngineNumber { get; set; }
        /// <summary>Field 'description'</summary>
        public byte[] Description { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleInfo that = right as VehicleInfo;
            if (VehicleLicencePlateNumber != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehicleLicencePlateNumber, that.VehicleLicencePlateNumber))
                    return false;
            } else if (that.VehicleLicencePlateNumber != null)
                return false;
            if (VehicleLicencePlateColor != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehicleLicencePlateColor, that.VehicleLicencePlateColor))
                    return false;
            } else if (that.VehicleLicencePlateColor != null)
                return false;
            if (VehicleTollingClass != that.VehicleTollingClass)
                return false;
            if (VehicleUserType != that.VehicleUserType)
                return false;
            if (VehicleDimensions != null) {
                if (!VehicleDimensions.Equals(that.VehicleDimensions))
                    return false;
            } else if (that.VehicleDimensions != null)
                return false;
            if (VehicleWheels != that.VehicleWheels)
                return false;
            if (VehicleAxles != that.VehicleAxles)
                return false;
            if (VehicleWheelBases != that.VehicleWheelBases)
                return false;
            if (VehicleWeightLimits != that.VehicleWeightLimits)
                return false;
            if (VehicleSpecificInformation != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehicleSpecificInformation, that.VehicleSpecificInformation))
                    return false;
            } else if (that.VehicleSpecificInformation != null)
                return false;
            if (VehicleEngineNumber != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehicleEngineNumber, that.VehicleEngineNumber))
                    return false;
            } else if (that.VehicleEngineNumber != null)
                return false;
            if (Description != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Description, that.Description))
                    return false;
            } else if (that.Description != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehicleLicencePlateNumber != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehicleLicencePlateNumber);
            if (VehicleLicencePlateColor != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehicleLicencePlateColor);
            hash ^= VehicleTollingClass.GetHashCode();
            hash ^= VehicleUserType.GetHashCode();
            if (VehicleDimensions != null)
                hash ^= VehicleDimensions.GetHashCode();
            hash ^= VehicleWheels.GetHashCode();
            hash ^= VehicleAxles.GetHashCode();
            hash ^= VehicleWheelBases.GetHashCode();
            hash ^= VehicleWeightLimits.GetHashCode();
            if (VehicleSpecificInformation != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehicleSpecificInformation);
            if (VehicleEngineNumber != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehicleEngineNumber);
            if (Description != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Description);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleLicencePlateNumber == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehicleLicencePlateNumber.Length != 12)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateNumber", "byte[]", "vehicleLicencePlateNumber", "OCTET STRING", false); throw;
                }
                try {
                    if (this.VehicleLicencePlateColor == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehicleLicencePlateColor.Length != 2)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateColor", "byte[]", "vehicleLicencePlateColor", "OCTET STRING", false); throw;
                }
                try {
                    try {
                        if (this.VehicleTollingClass < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.VehicleTollingClass > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleTollingClass", "long", "vehicleTollingClass", "INTEGER", false); throw;
                }
                try {
                    try {
                        if (this.VehicleUserType < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.VehicleUserType > 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleUserType", "long", "vehicleUserType", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleDimensions == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.VehicleDimensions.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleDimensions", "MsgFrame.VehicleDimensions", "vehicleDimensions", "VehicleDimensions", false); throw;
                }
                try {
                    if (this.VehicleWheels < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleWheels > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheels", "int", "vehicleWheels", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleAxles < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleAxles > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleAxles", "int", "vehicleAxles", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleWheelBases < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleWheelBases > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheelBases", "int", "vehicleWheelBases", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleWeightLimits < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleWeightLimits > 16777215)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWeightLimits", "int", "vehicleWeightLimits", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleSpecificInformation == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehicleSpecificInformation.Length != 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleSpecificInformation", "byte[]", "vehicleSpecificInformation", "OCTET STRING", false); throw;
                }
                try {
                    if (this.VehicleEngineNumber == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehicleEngineNumber.Length != 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleEngineNumber", "byte[]", "vehicleEngineNumber", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Description != null) {
                        if (this.Description.Length < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.Description.Length > 256)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "byte[]", "description", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleInfo", null, "VehicleInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleInfo obj0 = new VehicleInfo();
            {
                obj0.VehicleLicencePlateNumber = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehicleLicencePlateNumber);
            }
            {
                obj0.VehicleLicencePlateColor = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehicleLicencePlateColor);
            }
            {
                obj0.VehicleTollingClass = this.VehicleTollingClass;
            }
            {
                obj0.VehicleUserType = this.VehicleUserType;
            }
            {
                obj0.VehicleDimensions = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleDimensions);
            }
            {
                obj0.VehicleWheels = this.VehicleWheels;
            }
            {
                obj0.VehicleAxles = this.VehicleAxles;
            }
            {
                obj0.VehicleWheelBases = this.VehicleWheelBases;
            }
            {
                obj0.VehicleWeightLimits = this.VehicleWeightLimits;
            }
            {
                obj0.VehicleSpecificInformation = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehicleSpecificInformation);
            }
            {
                obj0.VehicleEngineNumber = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehicleEngineNumber);
            }
            {
                obj0.Description = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Description);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleLicencePlateNumber ");
                    if (this.VehicleLicencePlateNumber == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehicleLicencePlateNumber);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleLicencePlateColor ");
                    if (this.VehicleLicencePlateColor == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehicleLicencePlateColor);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleTollingClass ");
                    prt.Write(this.VehicleTollingClass);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleUserType ");
                    prt.Write(this.VehicleUserType);
                }
                {
                    MsgFrame.VehicleDimensions data1 = this.VehicleDimensions;

                    prt.WriteLine(",");
                    prt.Write("vehicleDimensions ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleWheels ");
                    prt.Write(this.VehicleWheels);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleAxles ");
                    prt.Write(this.VehicleAxles);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleWheelBases ");
                    prt.Write(this.VehicleWheelBases);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleWeightLimits ");
                    prt.Write(this.VehicleWeightLimits);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleSpecificInformation ");
                    if (this.VehicleSpecificInformation == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehicleSpecificInformation);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleEngineNumber ");
                    if (this.VehicleEngineNumber == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehicleEngineNumber);
                    }
                }
                {
                    byte[] data1 = this.Description;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("description ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Description != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeOctetString(this.VehicleLicencePlateNumber, 12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateNumber", "byte[]", "vehicleLicencePlateNumber", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.VehicleLicencePlateColor, 2);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateColor", "byte[]", "vehicleLicencePlateColor", "OCTET STRING", false); throw;
                }
                try {
                    bool extPresent1;

                    extPresent1 = !(0 <= this.VehicleTollingClass && this.VehicleTollingClass <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeUnconstrainedLongInteger(this.VehicleTollingClass);
                    else {
                        enc.Output.Write7BitInt((int)(this.VehicleTollingClass - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleTollingClass", "long", "vehicleTollingClass", "INTEGER", false); throw;
                }
                try {
                    bool extPresent1;

                    extPresent1 = !(0 <= this.VehicleUserType && this.VehicleUserType <= 127);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeUnconstrainedLongInteger(this.VehicleUserType);
                    else {
                        enc.Output.Write7BitInt((int)(this.VehicleUserType - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleUserType", "long", "vehicleUserType", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeType(this.VehicleDimensions);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleDimensions", "MsgFrame.VehicleDimensions", "vehicleDimensions", "VehicleDimensions", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleWheels - 0) > 7 || this.VehicleWheels < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleWheels);
                    enc.Output.Write7BitInt((this.VehicleWheels - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheels", "int", "vehicleWheels", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleAxles - 0) > 7 || this.VehicleAxles < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleAxles);
                    enc.Output.Write7BitInt((this.VehicleAxles - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleAxles", "int", "vehicleAxles", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleWheelBases - 0) > 16 || this.VehicleWheelBases < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleWheelBases);
                    enc.EncodeConstrainedInteger((this.VehicleWheelBases - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheelBases", "int", "vehicleWheelBases", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleWeightLimits - 0) > 24 || this.VehicleWeightLimits < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleWeightLimits);
                    enc.EncodeConstrainedInteger((this.VehicleWeightLimits - (0)), 24);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWeightLimits", "int", "vehicleWeightLimits", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.VehicleSpecificInformation, 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleSpecificInformation", "byte[]", "vehicleSpecificInformation", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.VehicleEngineNumber, 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleEngineNumber", "byte[]", "vehicleEngineNumber", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Description != null)
                    {
                        enc.EncodeOctetString(this.Description, 1, 256);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "byte[]", "description", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleInfo", null, "VehicleInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.VehicleLicencePlateNumber = dec.DecodeOctetString(12);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateNumber", "byte[]", "vehicleLicencePlateNumber", "OCTET STRING", false); throw;
                }
                try {
                    this.VehicleLicencePlateColor = dec.DecodeOctetString(2);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLicencePlateColor", "byte[]", "vehicleLicencePlateColor", "OCTET STRING", false); throw;
                }
                try {
                    long data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeUnconstrainedLongInteger();
                    else
                        data1 = 0 + dec.Input.Read7BitInt();
                    if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 127))
                        dec.RaiseExtRangeError(extPresent1);
                    this.VehicleTollingClass = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleTollingClass", "long", "vehicleTollingClass", "INTEGER", false); throw;
                }
                try {
                    long data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeUnconstrainedLongInteger();
                    else
                        data1 = 0 + dec.Input.Read7BitInt();
                    if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 127))
                        dec.RaiseExtRangeError(extPresent1);
                    this.VehicleUserType = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleUserType", "long", "vehicleUserType", "INTEGER", false); throw;
                }
                try {
                    MsgFrame.VehicleDimensions data1 = new MsgFrame.VehicleDimensions();

                    dec.DecodeType(data1);
                    this.VehicleDimensions = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleDimensions", "MsgFrame.VehicleDimensions", "vehicleDimensions", "VehicleDimensions", false); throw;
                }
                try {
                    this.VehicleWheels = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheels", "int", "vehicleWheels", "INTEGER", false); throw;
                }
                try {
                    this.VehicleAxles = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleAxles", "int", "vehicleAxles", "INTEGER", false); throw;
                }
                try {
                    this.VehicleWheelBases = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWheelBases", "int", "vehicleWheelBases", "INTEGER", false); throw;
                }
                try {
                    this.VehicleWeightLimits = dec.DecodeConstrainedInteger(24, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWeightLimits", "int", "vehicleWeightLimits", "INTEGER", false); throw;
                }
                try {
                    this.VehicleSpecificInformation = dec.DecodeOctetString(16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleSpecificInformation", "byte[]", "vehicleSpecificInformation", "OCTET STRING", false); throw;
                }
                try {
                    this.VehicleEngineNumber = dec.DecodeOctetString(16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleEngineNumber", "byte[]", "vehicleEngineNumber", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Description = dec.DecodeOctetString(1, 256);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "byte[]", "description", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.Description = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleInfo", null, "VehicleInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'VehicleDimensions' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class VehicleDimensions : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleLength'</summary>
        public int VehicleLength { get; set; }
        /// <summary>Field 'vehicleWidth'</summary>
        public int VehicleWidth { get; set; }
        /// <summary>Field 'vehicleHeigth'</summary>
        public int VehicleHeigth { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            VehicleDimensions that = right as VehicleDimensions;
            if (VehicleLength != that.VehicleLength)
                return false;
            if (VehicleWidth != that.VehicleWidth)
                return false;
            if (VehicleHeigth != that.VehicleHeigth)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= VehicleLength.GetHashCode();
            hash ^= VehicleWidth.GetHashCode();
            hash ^= VehicleHeigth.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "VehicleDimensions";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleLength < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleLength > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLength", "int", "vehicleLength", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleWidth > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWidth", "int", "vehicleWidth", "INTEGER", false); throw;
                }
                try {
                    if (this.VehicleHeigth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.VehicleHeigth > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleHeigth", "int", "vehicleHeigth", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleDimensions", null, "VehicleDimensions", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            VehicleDimensions obj0 = new VehicleDimensions();
            {
                obj0.VehicleLength = this.VehicleLength;
            }
            {
                obj0.VehicleWidth = this.VehicleWidth;
            }
            {
                obj0.VehicleHeigth = this.VehicleHeigth;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleLength ");
                    prt.Write(this.VehicleLength);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleWidth ");
                    prt.Write(this.VehicleWidth);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("vehicleHeigth ");
                    prt.Write(this.VehicleHeigth);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    if (enc.BitCount(this.VehicleLength - 0) > 16 || this.VehicleLength < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleLength);
                    enc.EncodeConstrainedInteger((this.VehicleLength - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLength", "int", "vehicleLength", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleWidth - 0) > 8 || this.VehicleWidth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleWidth);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.VehicleWidth - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWidth", "int", "vehicleWidth", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.VehicleHeigth - 0) > 8 || this.VehicleHeigth < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.VehicleHeigth);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.VehicleHeigth - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleHeigth", "int", "vehicleHeigth", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleDimensions", null, "VehicleDimensions", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.VehicleLength = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleLength", "int", "vehicleLength", "INTEGER", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.VehicleWidth = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleWidth", "int", "vehicleWidth", "INTEGER", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.VehicleHeigth = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleHeigth", "int", "vehicleHeigth", "INTEGER", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "VehicleDimensions", null, "VehicleDimensions", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PassedSitesInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PassedSitesInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'entranceInfo'</summary>
        public MsgFrame.PassedPos EntranceInfo { get; set; }
        [System.Serializable]
        public partial class PassedPosType : System.Collections.Generic.List<MsgFrame.PassedPos>
        {
            /// <summary>
            /// Initializes a new instance of the PassedPosType class that is empty and has the default initial capacity.
            /// </summary>
            public PassedPosType() : base() {}
            /// <summary>
            /// Initializes a new instance of the PassedPosType class that contains elements copied from the specified collection
            /// and has sufficient capacity to accommodate the number of elements copied.
            /// <param name="collection">The collection whose elements are copied to the new PassedPosType.</param>
            /// </summary>
            public PassedPosType(System.Collections.Generic.IEnumerable<MsgFrame.PassedPos> collection) : base(collection) {}
            /// <summary>
            /// Initializes a new instance of the PassedPosType class that is empty and has the specified capacity.
            /// <param name="capacity">The number of elements that the new PassedPosType can initially store.</param>
            /// </summary>
            public PassedPosType(int capacity) : base(capacity) {}


            /// <summary>
            /// Determines whether the specified object is equal to the current object.
            /// </summary>
            /// <param name="right">The object to compare with this object. </param>
            /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
            public override bool Equals(object right)
            {
                if (right == null)
                    return false;
                if (object.ReferenceEquals(this, right))
                    return true;
                if (this.GetType() != right.GetType())
                    return false;
                PassedPosType that = right as PassedPosType;
                return Oss.Asn1.Internal.Comparer.CompareSeqOf(this, that);
            }
            /// <summary>
            /// Serves as a hash function for a particular type.
            /// </summary>
            /// <returns>A hash code for the current object.</returns>
            public override int GetHashCode()
            {
                return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOf(this);
            }
        }
        /// <summary>Field 'passedPos'</summary>
        public PassedPosType PassedPos { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PassedSitesInfo that = right as PassedSitesInfo;
            if (EntranceInfo != null) {
                if (!EntranceInfo.Equals(that.EntranceInfo))
                    return false;
            } else if (that.EntranceInfo != null)
                return false;
            if (PassedPos != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(PassedPos, that.PassedPos))
                    return false;
            } else if (that.PassedPos != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (EntranceInfo != null)
                hash ^= EntranceInfo.GetHashCode();
            if (PassedPos != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(PassedPos);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PassedSitesInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.EntranceInfo != null) {
                        this.EntranceInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EntranceInfo", "MsgFrame.PassedPos", "entranceInfo", "PassedPos", false); throw;
                }
                try {
                    if (this.PassedPos != null) {
                        for (int i2 = 0; i2 < this.PassedPos.Count; i2++)
                        {
                            try {
                                this.PassedPos[i2].Validate();
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i2), "MsgFrame.PassedPos", "#" + i2.ToString(), "PassedPos", false); throw;
                            }
                        }
                        if (this.PassedPos.Count < 2)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.PassedPos.Count > 512)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedPos", "PassedPosType", "passedPos", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedSitesInfo", null, "PassedSitesInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PassedSitesInfo obj0 = new PassedSitesInfo();
            {
                obj0.EntranceInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.EntranceInfo);
            }
            {
                PassedPosType seqof1 = this.PassedPos;
                PassedPosType data1 = null;
                if (seqof1 != null) {
                    data1 = new PassedPosType();
                    for (int i1 = 0; i1 < seqof1.Count; i1++) {
                        data1.Add(Oss.Asn1.Internal.CopyUtil.CopyType(seqof1[i1]));
                    }
                }
                obj0.PassedPos = data1;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    MsgFrame.PassedPos data1 = this.EntranceInfo;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("entranceInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PassedPosType data1 = this.PassedPos;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("passedPos ");
                        prt.BeginConstructedValue();
                        for (int i2 = 0; i2 < data1.Count; i2++) {
                            if (i2 != 0)
                                prt.Write(",");
                            if (data1[i2] == null)
                                prt.Write("<<<NULL>>>");
                            else {
                                prt.PrintContent(data1[i2]);
                            }
                        }
                        prt.EndConstructedValue();
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.EntranceInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.PassedPos != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.EntranceInfo != null)
                    {
                        enc.EncodeType(this.EntranceInfo);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "EntranceInfo", "MsgFrame.PassedPos", "entranceInfo", "PassedPos", false); throw;
                }
                try {
                    PassedPosType data1 = this.PassedPos;

                    if (data1 != null)
                    {
                        int i1 = 0;
                        if (data1.Count < 2 || data1.Count > 512)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint, ", length of value = " + data1.Count);
                        enc.EncodeConstrainedLength(data1.Count, 2, 512);
                        for (i1 = 0; i1 < data1.Count; i1++)
                        {
                            try {
                                enc.EncodeType(data1[i1]);
                            } catch (System.Exception ex) {
                                Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "MsgFrame.PassedPos", "#" + i1.ToString(), "PassedPos", false); throw;
                            }
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedPos", "PassedPosType", "passedPos", "SEQUENCE OF", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedSitesInfo", null, "PassedSitesInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.PassedPos data1 = new MsgFrame.PassedPos();

                        dec.DecodeType(data1);
                        this.EntranceInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "EntranceInfo", "MsgFrame.PassedPos", "entranceInfo", "PassedPos", false); throw;
                    }
                }
                else
                {
                    this.EntranceInfo = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PassedPosType data1 = new PassedPosType();
                        int i1 = 0;
                        int fragcount1 = 0;
                        int fraglast1 = 65536;
                        while (true)
                        {
                            fragcount1 = dec.DecodeConstrainedLength(2, 512, ref fraglast1);
                            for (i1 = 0; i1 < fragcount1; i1++)
                            {
                                try {
                                    MsgFrame.PassedPos data2 = new MsgFrame.PassedPos();

                                    dec.DecodeType(data2);
                                    data1.Add(data2);
                                } catch (System.Exception ex) {
                                    Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", data1.Count), "MsgFrame.PassedPos", "#" + data1.Count.ToString(), "PassedPos", false); throw;
                                }
                            }
                            if (fraglast1 < 0)
                                break;
                            fraglast1 = fragcount1;
                        }
                        this.PassedPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "PassedPos", "PassedPosType", "passedPos", "SEQUENCE OF", false); throw;
                    }
                }
                else
                {
                    this.PassedPos = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedSitesInfo", null, "PassedSitesInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PassedPos' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PassedPos : Oss.Asn1.BaseType
    {
        /// <summary>Field 'tollingPos'</summary>
        public MsgFrame.TollingPos TollingPos { get; set; }
        /// <summary>Field 'tollingTime'</summary>
        public DDateTime TollingTime { get; set; }
        /// <summary>Field 'tollingAmount'</summary>
        public byte[] TollingAmount { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PassedPos that = right as PassedPos;
            if (TollingPos != null) {
                if (!TollingPos.Equals(that.TollingPos))
                    return false;
            } else if (that.TollingPos != null)
                return false;
            if (TollingTime != null) {
                if (!TollingTime.Equals(that.TollingTime))
                    return false;
            } else if (that.TollingTime != null)
                return false;
            if (TollingAmount != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TollingAmount, that.TollingAmount))
                    return false;
            } else if (that.TollingAmount != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TollingPos != null)
                hash ^= TollingPos.GetHashCode();
            if (TollingTime != null)
                hash ^= TollingTime.GetHashCode();
            if (TollingAmount != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TollingAmount);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PassedPos";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TollingPos == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.TollingPos.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                }
                try {
                    if (this.TollingTime == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.TollingTime.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingTime", "DDateTime", "tollingTime", "DDateTime", false); throw;
                }
                try {
                    if (this.TollingAmount != null) {
                        if (this.TollingAmount.Length != 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingAmount", "byte[]", "tollingAmount", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedPos", null, "PassedPos", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PassedPos obj0 = new PassedPos();
            {
                obj0.TollingPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollingPos);
            }
            {
                obj0.TollingTime = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollingTime);
            }
            {
                obj0.TollingAmount = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TollingAmount);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("tollingPos ");
                    if (this.TollingPos == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.TollingPos);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("tollingTime ");
                    if (this.TollingTime == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.TollingTime);
                    }
                }
                {
                    byte[] data1 = this.TollingAmount;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tollingAmount ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TollingAmount != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeType(this.TollingPos);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                }
                try {
                    enc.EncodeType(this.TollingTime);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingTime", "DDateTime", "tollingTime", "DDateTime", false); throw;
                }
                try {
                    if (this.TollingAmount != null)
                    {
                        enc.EncodeOctetString(this.TollingAmount, 4);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingAmount", "byte[]", "tollingAmount", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedPos", null, "PassedPos", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    MsgFrame.TollingPos data1 = new MsgFrame.TollingPos();

                    dec.DecodeType(data1);
                    this.TollingPos = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                }
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.TollingTime = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingTime", "DDateTime", "tollingTime", "DDateTime", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TollingAmount = dec.DecodeOctetString(4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingAmount", "byte[]", "tollingAmount", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TollingAmount = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PassedPos", null, "PassedPos", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TollingPos' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TollingPos : Oss.Asn1.BaseType
    {
        /// <summary>Field 'id'</summary>
        public long Id { get; set; }
        /// <summary>Field 'pos'</summary>
        public Position3D Pos { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TollingPos that = right as TollingPos;
            if (Id != that.Id)
                return false;
            if (Pos != null) {
                if (!Pos.Equals(that.Pos))
                    return false;
            } else if (that.Pos != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Id.GetHashCode();
            if (Pos != null)
                hash ^= Pos.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TollingPos";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    try {
                        if (this.Id < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Id > 4294967295)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "long", "id", "StationOrGantryId", false); throw;
                }
                try {
                    if (this.Pos != null) {
                        this.Pos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingPos", null, "TollingPos", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TollingPos obj0 = new TollingPos();
            {
                obj0.Id = this.Id;
            }
            {
                obj0.Pos = Oss.Asn1.Internal.CopyUtil.CopyType(this.Pos);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("id ");
                    prt.Write(this.Id);
                }
                {
                    Position3D data1 = this.Pos;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("pos ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Pos != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    bool extPresent1;

                    extPresent1 = !(0 <= this.Id && this.Id <= 4294967295);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeUnconstrainedLongInteger(this.Id);
                    else {
                        enc.EncodeConstrainedLongInteger((long)(this.Id - (0)), 32);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "long", "id", "StationOrGantryId", false); throw;
                }
                try {
                    if (this.Pos != null)
                    {
                        enc.EncodeType(this.Pos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingPos", null, "TollingPos", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    long data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeUnconstrainedLongInteger();
                    else
                        data1 = dec.DecodeConstrainedLongInteger(32, 0);
                    if (dec.Options.StrictDecoding && extPresent1 == (0 <= data1 && data1 <= 4294967295))
                        dec.RaiseExtRangeError(extPresent1);
                    this.Id = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Id", "long", "id", "StationOrGantryId", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Position3D data1 = new Position3D();

                        dec.DecodeType(data1);
                        this.Pos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Pos", "Position3D", "pos", "Position3D", false); throw;
                    }
                }
                else
                {
                    this.Pos = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TollingPos", null, "TollingPos", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Action-Request' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ActionRequest : Oss.Asn1.BaseType
    {
        /// <summary>Field 'time'</summary>
        public DDateTime Time { get; set; }
        /// <summary>Field 'mode'</summary>
        public bool Mode { get; set; }
        /// <summary>Field 'sourceId'</summary>
        public byte[] SourceId { get; set; }
        /// <summary>Field 'targetId'</summary>
        public byte[] TargetId { get; set; }
        /// <summary>Field 'paymentEntityId'</summary>
        public MsgFrame.PaymentEntityID PaymentEntityId { get; set; }
        /// <summary>Field 'actionParameter'</summary>
        public TransInfo ActionParameter { get; set; }
        /// <summary>Field 'accessCredentials'</summary>
        public byte[] AccessCredentials { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ActionRequest that = right as ActionRequest;
            if (Time != null) {
                if (!Time.Equals(that.Time))
                    return false;
            } else if (that.Time != null)
                return false;
            if (Mode != that.Mode)
                return false;
            if (SourceId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(SourceId, that.SourceId))
                    return false;
            } else if (that.SourceId != null)
                return false;
            if (TargetId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TargetId, that.TargetId))
                    return false;
            } else if (that.TargetId != null)
                return false;
            if (PaymentEntityId != that.PaymentEntityId)
                return false;
            if (ActionParameter != null) {
                if (!ActionParameter.Equals(that.ActionParameter))
                    return false;
            } else if (that.ActionParameter != null)
                return false;
            if (AccessCredentials != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(AccessCredentials, that.AccessCredentials))
                    return false;
            } else if (that.AccessCredentials != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Time != null)
                hash ^= Time.GetHashCode();
            hash ^= Mode.GetHashCode();
            if (SourceId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(SourceId);
            if (TargetId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TargetId);
            hash ^= PaymentEntityId.GetHashCode();
            if (ActionParameter != null)
                hash ^= ActionParameter.GetHashCode();
            if (AccessCredentials != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(AccessCredentials);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Action-Request";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Time == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Time.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Mode", "bool", "mode", "BOOLEAN", false); throw;
                }
                try {
                    if (this.SourceId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.SourceId.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null) {
                        if (this.TargetId.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                try {
                    if (this.ActionParameter == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.ActionParameter.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionParameter", "TransInfo", "actionParameter", "TransInfo", false); throw;
                }
                try {
                    if (this.AccessCredentials != null) {
                        if (this.AccessCredentials.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccessCredentials", "byte[]", "accessCredentials", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionRequest", null, "Action-Request", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ActionRequest obj0 = new ActionRequest();
            {
                obj0.Time = Oss.Asn1.Internal.CopyUtil.CopyType(this.Time);
            }
            {
                obj0.Mode = this.Mode;
            }
            {
                obj0.SourceId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.SourceId);
            }
            {
                obj0.TargetId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TargetId);
            }
            {
                obj0.PaymentEntityId = this.PaymentEntityId;
            }
            {
                obj0.ActionParameter = Oss.Asn1.Internal.CopyUtil.CopyType(this.ActionParameter);
            }
            {
                obj0.AccessCredentials = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.AccessCredentials);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("time ");
                    if (this.Time == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Time);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("mode ");
                    prt.Write(this.Mode ? "TRUE" : "FALSE");
                }
                {
                    prt.WriteLine(",");
                    prt.Write("sourceId ");
                    if (this.SourceId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.SourceId);
                    }
                }
                {
                    byte[] data1 = this.TargetId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetId ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("paymentEntityId ");
                    switch (this.PaymentEntityId) {
                    case MsgFrame.PaymentEntityID.SystemId:
                        prt.Write("system");
                        break;
                    case MsgFrame.PaymentEntityID.Freeflow:
                        prt.Write("freeflow");
                        break;
                    case MsgFrame.PaymentEntityID.Enclosed:
                        prt.Write("enclosed");
                        break;
                    case MsgFrame.PaymentEntityID.Congestion:
                        prt.Write("congestion");
                        break;
                    case MsgFrame.PaymentEntityID.Charging:
                        prt.Write("charging");
                        break;
                    case MsgFrame.PaymentEntityID.Parking:
                        prt.Write("parking");
                        break;
                    default:
                        prt.Write((int)this.PaymentEntityId);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("actionParameter ");
                    if (this.ActionParameter == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.ActionParameter);
                    }
                }
                {
                    byte[] data1 = this.AccessCredentials;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("accessCredentials ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TargetId != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.AccessCredentials != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.Time);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeBool(this.Mode);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Mode", "bool", "mode", "BOOLEAN", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.SourceId, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null)
                    {
                        enc.EncodeOctetString(this.TargetId, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.PaymentEntityId, _InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                try {
                    enc.EncodeType(this.ActionParameter);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionParameter", "TransInfo", "actionParameter", "TransInfo", false); throw;
                }
                try {
                    if (this.AccessCredentials != null)
                    {
                        enc.EncodeOctetString(this.AccessCredentials, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccessCredentials", "byte[]", "accessCredentials", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionRequest", null, "Action-Request", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.Time = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    this.Mode = dec.DecodeBool();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Mode", "bool", "mode", "BOOLEAN", false); throw;
                }
                try {
                    this.SourceId = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TargetId = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TargetId = null;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum41);
                    this.PaymentEntityId = (MsgFrame.PaymentEntityID)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                try {
                    TransInfo data1 = new TransInfo();

                    dec.DecodeType(data1);
                    this.ActionParameter = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ActionParameter", "TransInfo", "actionParameter", "TransInfo", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.AccessCredentials = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccessCredentials", "byte[]", "accessCredentials", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.AccessCredentials = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionRequest", null, "Action-Request", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TransInfo' (CHOICE)
    /// </summary>
    [System.Serializable]
    public partial class TransInfo : Oss.Asn1.BaseType
    {
        /// <summary>CHOICE alternatives</summary>
        public enum Id {
            Unselected = 0,
            GetTollDataRqChosen = 1,
            GetTollDataRsChosen = 2,
            GetSecureRqChosen = 3,
            GetSecureRsChosen = 4,
            SetTollDataRqChosen = 5,
            SetTollDataRsChosen = 6,
            TransferChannelRqChosen = 7,
            SetMMIRqChosen = 8
        }
        private Id _id;
        private object _contained;
        /// <summary>Gets current selection</summary>
        public Id Selected {
            get { return _id; }
        }
        /// <summary>Gets or selects alternative 'getTollDataRq'</summary>
        public MsgFrame.GetTollDataRq GetTollDataRq {
            get {
                if (_id == Id.GetTollDataRqChosen)
                    return (_contained as MsgFrame.GetTollDataRq);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.GetTollDataRqChosen;
            }
        }
        /// <summary>Gets or selects alternative 'getTollDataRs'</summary>
        public MsgFrame.GetTollDataRs GetTollDataRs {
            get {
                if (_id == Id.GetTollDataRsChosen)
                    return (_contained as MsgFrame.GetTollDataRs);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.GetTollDataRsChosen;
            }
        }
        /// <summary>Gets or selects alternative 'getSecureRq'</summary>
        public MsgFrame.GetSecureRq GetSecureRq {
            get {
                if (_id == Id.GetSecureRqChosen)
                    return (_contained as MsgFrame.GetSecureRq);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.GetSecureRqChosen;
            }
        }
        /// <summary>Gets or selects alternative 'getSecureRs'</summary>
        public MsgFrame.GetSecureRs GetSecureRs {
            get {
                if (_id == Id.GetSecureRsChosen)
                    return (_contained as MsgFrame.GetSecureRs);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.GetSecureRsChosen;
            }
        }
        /// <summary>Gets or selects alternative 'setTollDataRq'</summary>
        public MsgFrame.SetTollDataRq SetTollDataRq {
            get {
                if (_id == Id.SetTollDataRqChosen)
                    return (_contained as MsgFrame.SetTollDataRq);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SetTollDataRqChosen;
            }
        }
        /// <summary>Gets or selects alternative 'setTollDataRs'</summary>
        public MsgFrame.SetTollDataRs SetTollDataRs {
            get {
                if (_id == Id.SetTollDataRsChosen)
                    return (_contained as MsgFrame.SetTollDataRs);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SetTollDataRsChosen;
            }
        }
        /// <summary>Gets or selects alternative 'transferChannelRq'</summary>
        public ChannelRq TransferChannelRq {
            get {
                if (_id == Id.TransferChannelRqChosen)
                    return (_contained as ChannelRq);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.TransferChannelRqChosen;
            }
        }
        /// <summary>Gets or selects alternative 'setMMIRq'</summary>
        public MsgFrame.SetMMIRq SetMMIRq {
            get {
                if (_id == Id.SetMMIRqChosen)
                    return (_contained as MsgFrame.SetMMIRq);
                else
                    return null;
            }
            set {
                _contained = value;
                _id = Id.SetMMIRqChosen;
            }
        }

        public void Clear()
        {
            _id = Id.Unselected;
            _contained = null;
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TransInfo that = right as TransInfo;
            if (_id != that._id)
                return false;
            return _contained.Equals(that._contained);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ _id.GetHashCode() ^ _contained.GetHashCode();
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TransInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                switch (this.Selected) {
                case TransInfo.Id.GetTollDataRqChosen:
                    try {
                        if (this.GetTollDataRq == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.GetTollDataRq.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRq", "MsgFrame.GetTollDataRq", "getTollDataRq", "GetTollDataRq", false); throw;
                    }
                    break;
                case TransInfo.Id.GetTollDataRsChosen:
                    try {
                        if (this.GetTollDataRs == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.GetTollDataRs.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRs", "MsgFrame.GetTollDataRs", "getTollDataRs", "GetTollDataRs", false); throw;
                    }
                    break;
                case TransInfo.Id.GetSecureRqChosen:
                    try {
                        if (this.GetSecureRq == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.GetSecureRq.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRq", "MsgFrame.GetSecureRq", "getSecureRq", "GetSecureRq", false); throw;
                    }
                    break;
                case TransInfo.Id.GetSecureRsChosen:
                    try {
                        if (this.GetSecureRs == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.GetSecureRs.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRs", "MsgFrame.GetSecureRs", "getSecureRs", "GetSecureRs", false); throw;
                    }
                    break;
                case TransInfo.Id.SetTollDataRqChosen:
                    try {
                        if (this.SetTollDataRq == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SetTollDataRq.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRq", "MsgFrame.SetTollDataRq", "setTollDataRq", "SetTollDataRq", false); throw;
                    }
                    break;
                case TransInfo.Id.SetTollDataRsChosen:
                    try {
                        if (this.SetTollDataRs == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SetTollDataRs.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRs", "MsgFrame.SetTollDataRs", "setTollDataRs", "SetTollDataRs", false); throw;
                    }
                    break;
                case TransInfo.Id.TransferChannelRqChosen:
                    try {
                        if (this.TransferChannelRq == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.TransferChannelRq.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TransferChannelRq", "ChannelRq", "transferChannelRq", "ChannelRq", false); throw;
                    }
                    break;
                case TransInfo.Id.SetMMIRqChosen:
                    try {
                        if (this.SetMMIRq == null)
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                        else {
                            this.SetMMIRq.Validate();
                        }
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SetMMIRq", "MsgFrame.SetMMIRq", "setMMIRq", "SetMMIRq", false); throw;
                    }
                    break;
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransInfo", null, "TransInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TransInfo obj0 = new TransInfo();
            switch (this.Selected) {
                case TransInfo.Id.GetTollDataRqChosen:
                {
                    obj0.GetTollDataRq = Oss.Asn1.Internal.CopyUtil.CopyType(this.GetTollDataRq);
                    break;
                }
                case TransInfo.Id.GetTollDataRsChosen:
                {
                    obj0.GetTollDataRs = Oss.Asn1.Internal.CopyUtil.CopyType(this.GetTollDataRs);
                    break;
                }
                case TransInfo.Id.GetSecureRqChosen:
                {
                    obj0.GetSecureRq = Oss.Asn1.Internal.CopyUtil.CopyType(this.GetSecureRq);
                    break;
                }
                case TransInfo.Id.GetSecureRsChosen:
                {
                    obj0.GetSecureRs = Oss.Asn1.Internal.CopyUtil.CopyType(this.GetSecureRs);
                    break;
                }
                case TransInfo.Id.SetTollDataRqChosen:
                {
                    obj0.SetTollDataRq = Oss.Asn1.Internal.CopyUtil.CopyType(this.SetTollDataRq);
                    break;
                }
                case TransInfo.Id.SetTollDataRsChosen:
                {
                    obj0.SetTollDataRs = Oss.Asn1.Internal.CopyUtil.CopyType(this.SetTollDataRs);
                    break;
                }
                case TransInfo.Id.TransferChannelRqChosen:
                {
                    obj0.TransferChannelRq = Oss.Asn1.Internal.CopyUtil.CopyType(this.TransferChannelRq);
                    break;
                }
                case TransInfo.Id.SetMMIRqChosen:
                {
                    obj0.SetMMIRq = Oss.Asn1.Internal.CopyUtil.CopyType(this.SetMMIRq);
                    break;
                }
                default:
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                switch (this.Selected) {
                case TransInfo.Id.SetMMIRqChosen:
                    {
                        MsgFrame.SetMMIRq data1 = this.SetMMIRq;

                        prt.Write("setMMIRq : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.TransferChannelRqChosen:
                    {
                        ChannelRq data1 = this.TransferChannelRq;

                        prt.Write("transferChannelRq : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.SetTollDataRsChosen:
                    {
                        MsgFrame.SetTollDataRs data1 = this.SetTollDataRs;

                        prt.Write("setTollDataRs : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.SetTollDataRqChosen:
                    {
                        MsgFrame.SetTollDataRq data1 = this.SetTollDataRq;

                        prt.Write("setTollDataRq : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.GetSecureRsChosen:
                    {
                        MsgFrame.GetSecureRs data1 = this.GetSecureRs;

                        prt.Write("getSecureRs : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.GetSecureRqChosen:
                    {
                        MsgFrame.GetSecureRq data1 = this.GetSecureRq;

                        prt.Write("getSecureRq : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.GetTollDataRsChosen:
                    {
                        MsgFrame.GetTollDataRs data1 = this.GetTollDataRs;

                        prt.Write("getTollDataRs : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                case TransInfo.Id.GetTollDataRqChosen:
                    {
                        MsgFrame.GetTollDataRq data1 = this.GetTollDataRq;

                        prt.Write("getTollDataRq : ");
                        if (data1 == null)
                            prt.Write("<<<NULL>>>");
                        else {
                            prt.PrintContent(data1);
                        }
                    }
                    break;
                default:
                    prt.Write("<unknown choice>");
                    break;
                }
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0;
                Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                if ((int)this.Selected - 1 < 8)
                    extPresent0 = false;
                else
                    extPresent0 = true;
                enc.EncodeBool(extPresent0);
                if (extPresent0)
                    enc.EncodeNormSmallNonNegativeInteger((int)this.Selected - 9);
                else
                {
                    enc.Output.Write3BitInt((int)this.Selected - 1);
                }
                if (extPresent0)
                    enc.Output = tempOut0;
                switch (this.Selected)
                {
                    case TransInfo.Id.GetTollDataRqChosen:
                        try {
                            MsgFrame.GetTollDataRq data1 = this.GetTollDataRq;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRq", "MsgFrame.GetTollDataRq", "getTollDataRq", "GetTollDataRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetTollDataRsChosen:
                        try {
                            MsgFrame.GetTollDataRs data1 = this.GetTollDataRs;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRs", "MsgFrame.GetTollDataRs", "getTollDataRs", "GetTollDataRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetSecureRqChosen:
                        try {
                            MsgFrame.GetSecureRq data1 = this.GetSecureRq;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRq", "MsgFrame.GetSecureRq", "getSecureRq", "GetSecureRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetSecureRsChosen:
                        try {
                            MsgFrame.GetSecureRs data1 = this.GetSecureRs;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRs", "MsgFrame.GetSecureRs", "getSecureRs", "GetSecureRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetTollDataRqChosen:
                        try {
                            MsgFrame.SetTollDataRq data1 = this.SetTollDataRq;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRq", "MsgFrame.SetTollDataRq", "setTollDataRq", "SetTollDataRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetTollDataRsChosen:
                        try {
                            MsgFrame.SetTollDataRs data1 = this.SetTollDataRs;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRs", "MsgFrame.SetTollDataRs", "setTollDataRs", "SetTollDataRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.TransferChannelRqChosen:
                        try {
                            ChannelRq data1 = this.TransferChannelRq;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TransferChannelRq", "ChannelRq", "transferChannelRq", "ChannelRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetMMIRqChosen:
                        try {
                            MsgFrame.SetMMIRq data1 = this.SetMMIRq;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetMMIRq", "MsgFrame.SetMMIRq", "setMMIRq", "SetMMIRq", false); throw;
                        }
                        break;
                    default:
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                if (extPresent0)
                {
                    enc.CompleteEncoding();
                    enc.Output = savedOut0;
                    enc.EncodeOctetString(tempOut0.Consolidate());
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransInfo", null, "TransInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int choice_alt0 = 0;
                bool extPresent0 = dec.DecodeBool();
                int fraglast0 = 65536;
                Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;
                int extLen0 = 0;
                int bitPos0 = 0;

                if (extPresent0)
                {
                    choice_alt0 = dec.DecodeNormSmallNonNegativeInteger() + 9;
                    extLen0 = dec.DecodeExtAdditonLength(ref fraglast0);
                    if (fraglast0 >= 0)
                        extLen0 = dec.PrepareExtInputFrag(extLen0);
                    bitPos0 = dec.Input.BitsRead();
                }
                else
                {
                    choice_alt0 = dec.Input.Read3BitInt() + 1;
                    if (choice_alt0 > 8)
                        throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                }
                switch ((TransInfo.Id)choice_alt0)
                {
                    case TransInfo.Id.GetTollDataRqChosen:
                        try {
                            MsgFrame.GetTollDataRq data1 = new MsgFrame.GetTollDataRq();

                            dec.DecodeType(data1);
                            this.GetTollDataRq = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRq", "MsgFrame.GetTollDataRq", "getTollDataRq", "GetTollDataRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetTollDataRsChosen:
                        try {
                            MsgFrame.GetTollDataRs data1 = new MsgFrame.GetTollDataRs();

                            dec.DecodeType(data1);
                            this.GetTollDataRs = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetTollDataRs", "MsgFrame.GetTollDataRs", "getTollDataRs", "GetTollDataRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetSecureRqChosen:
                        try {
                            MsgFrame.GetSecureRq data1 = new MsgFrame.GetSecureRq();

                            dec.DecodeType(data1);
                            this.GetSecureRq = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRq", "MsgFrame.GetSecureRq", "getSecureRq", "GetSecureRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.GetSecureRsChosen:
                        try {
                            MsgFrame.GetSecureRs data1 = new MsgFrame.GetSecureRs();

                            dec.DecodeType(data1);
                            this.GetSecureRs = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "GetSecureRs", "MsgFrame.GetSecureRs", "getSecureRs", "GetSecureRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetTollDataRqChosen:
                        try {
                            MsgFrame.SetTollDataRq data1 = new MsgFrame.SetTollDataRq();

                            dec.DecodeType(data1);
                            this.SetTollDataRq = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRq", "MsgFrame.SetTollDataRq", "setTollDataRq", "SetTollDataRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetTollDataRsChosen:
                        try {
                            MsgFrame.SetTollDataRs data1 = new MsgFrame.SetTollDataRs();

                            dec.DecodeType(data1);
                            this.SetTollDataRs = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetTollDataRs", "MsgFrame.SetTollDataRs", "setTollDataRs", "SetTollDataRs", false); throw;
                        }
                        break;
                    case TransInfo.Id.TransferChannelRqChosen:
                        try {
                            ChannelRq data1 = new ChannelRq();

                            dec.DecodeType(data1);
                            this.TransferChannelRq = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "TransferChannelRq", "ChannelRq", "transferChannelRq", "ChannelRq", false); throw;
                        }
                        break;
                    case TransInfo.Id.SetMMIRqChosen:
                        try {
                            MsgFrame.SetMMIRq data1 = new MsgFrame.SetMMIRq();

                            dec.DecodeType(data1);
                            this.SetMMIRq = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "SetMMIRq", "MsgFrame.SetMMIRq", "setMMIRq", "SetMMIRq", false); throw;
                        }
                        break;
                    default:
                        if (!extPresent0)
                            throw new Oss.Asn1.Asn1InvalidEncodingException(Oss.Asn1.Internal.ExceptionDescriptor._bad_choice);
                        this.Clear();
                        break;
                }
                if (extPresent0)
                {
                    if (dec.Options.StrictDecoding)
                        dec.CheckExtEncodingCompletion(bitPos0, extLen0);
                    if (fraglast0 < 0)
                        dec.Input.SkipBits(extLen0 * 8 - (dec.Input.BitsRead() - bitPos0));
                }
                dec.Input = savedInput0;
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransInfo", null, "TransInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'GetTollDataRq' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class GetTollDataRq : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleInfo'</summary>
        public RangeOfFile VehicleInfo { get; set; }
        /// <summary>Field 'tollInfo'</summary>
        public RangeOfFile TollInfo { get; set; }
        /// <summary>Field 'keyIdForAC'</summary>
        public int? KeyIdForAC { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            GetTollDataRq that = right as GetTollDataRq;
            if (VehicleInfo != null) {
                if (!VehicleInfo.Equals(that.VehicleInfo))
                    return false;
            } else if (that.VehicleInfo != null)
                return false;
            if (TollInfo != null) {
                if (!TollInfo.Equals(that.TollInfo))
                    return false;
            } else if (that.TollInfo != null)
                return false;
            if (KeyIdForAC != null) {
                if (KeyIdForAC != that.KeyIdForAC)
                    return false;
            } else if (that.KeyIdForAC != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehicleInfo != null)
                hash ^= VehicleInfo.GetHashCode();
            if (TollInfo != null)
                hash ^= TollInfo.GetHashCode();
            if (KeyIdForAC != null)
                hash ^= KeyIdForAC.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "GetTollDataRq";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.VehicleInfo.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                try {
                    if (this.TollInfo != null) {
                        this.TollInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "RangeOfFile", "tollInfo", "RangeOfFile", false); throw;
                }
                try {
                    if (this.KeyIdForAC != null) {
                        if (this.KeyIdForAC.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.KeyIdForAC.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAC.Value", "int", "keyIdForAC", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRq", null, "GetTollDataRq", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            GetTollDataRq obj0 = new GetTollDataRq();
            {
                obj0.VehicleInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleInfo);
            }
            {
                obj0.TollInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollInfo);
            }
            {
                obj0.KeyIdForAC = this.KeyIdForAC;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleInfo ");
                    if (this.VehicleInfo == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.VehicleInfo);
                    }
                }
                {
                    RangeOfFile data1 = this.TollInfo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tollInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.KeyIdForAC;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("keyIdForAC ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TollInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.KeyIdForAC != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.VehicleInfo);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                try {
                    if (this.TollInfo != null)
                    {
                        enc.EncodeType(this.TollInfo);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "RangeOfFile", "tollInfo", "RangeOfFile", false); throw;
                }
                try {
                    if (this.KeyIdForAC != null)
                    {
                        if (enc.BitCount(this.KeyIdForAC.Value - 0) > 8 || this.KeyIdForAC.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.KeyIdForAC.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.KeyIdForAC.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAC.Value", "int", "keyIdForAC", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRq", null, "GetTollDataRq", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    RangeOfFile data1 = new RangeOfFile();

                    dec.DecodeType(data1);
                    this.VehicleInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        RangeOfFile data1 = new RangeOfFile();

                        dec.DecodeType(data1);
                        this.TollInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "RangeOfFile", "tollInfo", "RangeOfFile", false); throw;
                    }
                }
                else
                {
                    this.TollInfo = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.KeyIdForAC = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAC", "int", "keyIdForAC", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.KeyIdForAC = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRq", null, "GetTollDataRq", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'RangeOfFile' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RangeOfFile : Oss.Asn1.BaseType
    {
        /// <summary>Field 'offset'</summary>
        public int Offset { get; set; }
        /// <summary>Field 'lengh'</summary>
        public int Lengh { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RangeOfFile that = right as RangeOfFile;
            if (Offset != that.Offset)
                return false;
            if (Lengh != that.Lengh)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Offset.GetHashCode();
            hash ^= Lengh.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RangeOfFile";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Offset < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Offset > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    if (this.Lengh < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lengh > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lengh", "int", "lengh", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RangeOfFile", null, "RangeOfFile", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RangeOfFile obj0 = new RangeOfFile();
            {
                obj0.Offset = this.Offset;
            }
            {
                obj0.Lengh = this.Lengh;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("offset ");
                    prt.Write(this.Offset);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lengh ");
                    prt.Write(this.Lengh);
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Offset - 0) > 15 || this.Offset < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset);
                    enc.EncodeConstrainedInteger((this.Offset - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lengh - 0) > 7 || this.Lengh < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lengh);
                    enc.Output.Write7BitInt((this.Lengh - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lengh", "int", "lengh", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RangeOfFile", null, "RangeOfFile", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Offset = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    this.Lengh = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lengh", "int", "lengh", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RangeOfFile", null, "RangeOfFile", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'GetTollDataRs' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class GetTollDataRs : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleInfo'</summary>
        public byte[] VehicleInfo { get; set; }
        /// <summary>Field 'tollInfo'</summary>
        public byte[] TollInfo { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            GetTollDataRs that = right as GetTollDataRs;
            if (VehicleInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(VehicleInfo, that.VehicleInfo))
                    return false;
            } else if (that.VehicleInfo != null)
                return false;
            if (TollInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TollInfo, that.TollInfo))
                    return false;
            } else if (that.TollInfo != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehicleInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(VehicleInfo);
            if (TollInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TollInfo);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "GetTollDataRs";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.VehicleInfo.Length != 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "byte[]", "vehicleInfo", "File", false); throw;
                }
                try {
                    if (this.TollInfo != null) {
                        if (this.TollInfo.Length != 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "byte[]", "tollInfo", "File", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRs", null, "GetTollDataRs", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            GetTollDataRs obj0 = new GetTollDataRs();
            {
                obj0.VehicleInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.VehicleInfo);
            }
            {
                obj0.TollInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TollInfo);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleInfo ");
                    if (this.VehicleInfo == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.VehicleInfo);
                    }
                }
                {
                    byte[] data1 = this.TollInfo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tollInfo ");
                        prt.PrintOctetString(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TollInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeOctetString(this.VehicleInfo, 127);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "byte[]", "vehicleInfo", "File", false); throw;
                }
                try {
                    if (this.TollInfo != null)
                    {
                        enc.EncodeOctetString(this.TollInfo, 127);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "byte[]", "tollInfo", "File", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRs", null, "GetTollDataRs", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    this.VehicleInfo = dec.DecodeOctetString(127);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "byte[]", "vehicleInfo", "File", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TollInfo = dec.DecodeOctetString(127);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "byte[]", "tollInfo", "File", false); throw;
                    }
                }
                else
                {
                    this.TollInfo = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetTollDataRs", null, "GetTollDataRs", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'GetSecureRq' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class GetSecureRq : Oss.Asn1.BaseType
    {
        /// <summary>Field 'vehicleInfo'</summary>
        public RangeOfFile VehicleInfo { get; set; }
        /// <summary>Field 'rndRsuForAuthen'</summary>
        public byte[] RndRsuForAuthen { get; set; }
        /// <summary>Field 'keyIdForAuthen'</summary>
        public int KeyIdForAuthen { get; set; }
        /// <summary>Field 'keyIdForEncrypt'</summary>
        public int? KeyIdForEncrypt { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            GetSecureRq that = right as GetSecureRq;
            if (VehicleInfo != null) {
                if (!VehicleInfo.Equals(that.VehicleInfo))
                    return false;
            } else if (that.VehicleInfo != null)
                return false;
            if (RndRsuForAuthen != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(RndRsuForAuthen, that.RndRsuForAuthen))
                    return false;
            } else if (that.RndRsuForAuthen != null)
                return false;
            if (KeyIdForAuthen != that.KeyIdForAuthen)
                return false;
            if (KeyIdForEncrypt != null) {
                if (KeyIdForEncrypt != that.KeyIdForEncrypt)
                    return false;
            } else if (that.KeyIdForEncrypt != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (VehicleInfo != null)
                hash ^= VehicleInfo.GetHashCode();
            if (RndRsuForAuthen != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(RndRsuForAuthen);
            hash ^= KeyIdForAuthen.GetHashCode();
            if (KeyIdForEncrypt != null)
                hash ^= KeyIdForEncrypt.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "GetSecureRq";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.VehicleInfo == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.VehicleInfo.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                try {
                    if (this.RndRsuForAuthen == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.RndRsuForAuthen.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRsuForAuthen", "byte[]", "rndRsuForAuthen", "RandStr8", false); throw;
                }
                try {
                    if (this.KeyIdForAuthen < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.KeyIdForAuthen > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen", "int", "keyIdForAuthen", "INTEGER", false); throw;
                }
                try {
                    if (this.KeyIdForEncrypt != null) {
                        if (this.KeyIdForEncrypt.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.KeyIdForEncrypt.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForEncrypt.Value", "int", "keyIdForEncrypt", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRq", null, "GetSecureRq", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            GetSecureRq obj0 = new GetSecureRq();
            {
                obj0.VehicleInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.VehicleInfo);
            }
            {
                obj0.RndRsuForAuthen = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.RndRsuForAuthen);
            }
            {
                obj0.KeyIdForAuthen = this.KeyIdForAuthen;
            }
            {
                obj0.KeyIdForEncrypt = this.KeyIdForEncrypt;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("vehicleInfo ");
                    if (this.VehicleInfo == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.VehicleInfo);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rndRsuForAuthen ");
                    if (this.RndRsuForAuthen == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.RndRsuForAuthen);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("keyIdForAuthen ");
                    prt.Write(this.KeyIdForAuthen);
                }
                {
                    int? data1 = this.KeyIdForEncrypt;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("keyIdForEncrypt ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.KeyIdForEncrypt != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                enc.Output.WriteBits(optMask0, 0, 1);
                try {
                    enc.EncodeType(this.VehicleInfo);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.RndRsuForAuthen, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRsuForAuthen", "byte[]", "rndRsuForAuthen", "RandStr8", false); throw;
                }
                try {
                    if (enc.BitCount(this.KeyIdForAuthen - 0) > 8 || this.KeyIdForAuthen < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.KeyIdForAuthen);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.KeyIdForAuthen - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen", "int", "keyIdForAuthen", "INTEGER", false); throw;
                }
                try {
                    if (this.KeyIdForEncrypt != null)
                    {
                        if (enc.BitCount(this.KeyIdForEncrypt.Value - 0) > 8 || this.KeyIdForEncrypt.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.KeyIdForEncrypt.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.KeyIdForEncrypt.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForEncrypt.Value", "int", "keyIdForEncrypt", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRq", null, "GetSecureRq", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 2);
                try {
                    RangeOfFile data1 = new RangeOfFile();

                    dec.DecodeType(data1);
                    this.VehicleInfo = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "VehicleInfo", "RangeOfFile", "vehicleInfo", "RangeOfFile", false); throw;
                }
                try {
                    this.RndRsuForAuthen = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRsuForAuthen", "byte[]", "rndRsuForAuthen", "RandStr8", false); throw;
                }
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.KeyIdForAuthen = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen", "int", "keyIdForAuthen", "INTEGER", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.KeyIdForEncrypt = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForEncrypt", "int", "keyIdForEncrypt", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.KeyIdForEncrypt = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRq", null, "GetSecureRq", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'GetSecureRs' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class GetSecureRs : Oss.Asn1.BaseType
    {
        /// <summary>Field 'file'</summary>
        public RangeOfFile File { get; set; }
        /// <summary>Field 'authenticator'</summary>
        public byte[] Authenticator { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            GetSecureRs that = right as GetSecureRs;
            if (File != null) {
                if (!File.Equals(that.File))
                    return false;
            } else if (that.File != null)
                return false;
            if (Authenticator != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Authenticator, that.Authenticator))
                    return false;
            } else if (that.Authenticator != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (File != null)
                hash ^= File.GetHashCode();
            if (Authenticator != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Authenticator);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "GetSecureRs";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.File == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.File.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "File", "RangeOfFile", "file", "RangeOfFile", false); throw;
                }
                try {
                    if (this.Authenticator == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Authenticator.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRs", null, "GetSecureRs", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            GetSecureRs obj0 = new GetSecureRs();
            {
                obj0.File = Oss.Asn1.Internal.CopyUtil.CopyType(this.File);
            }
            {
                obj0.Authenticator = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Authenticator);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("file ");
                    if (this.File == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.File);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("authenticator ");
                    if (this.Authenticator == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Authenticator);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeType(this.File);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "File", "RangeOfFile", "file", "RangeOfFile", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.Authenticator, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRs", null, "GetSecureRs", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    RangeOfFile data1 = new RangeOfFile();

                    dec.DecodeType(data1);
                    this.File = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "File", "RangeOfFile", "file", "RangeOfFile", false); throw;
                }
                try {
                    this.Authenticator = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "GetSecureRs", null, "GetSecureRs", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SetTollDataRq' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SetTollDataRq : Oss.Asn1.BaseType
    {
        /// <summary>Field 'rndRSU'</summary>
        public byte[] RndRSU { get; set; }
        /// <summary>Field 'transPara'</summary>
        public MsgFrame.TransPara TransPara { get; set; }
        /// <summary>Field 'tollInfo'</summary>
        public PartOfFile TollInfo { get; set; }
        /// <summary>Field 'tollingPos'</summary>
        public MsgFrame.TollingPos TollingPos { get; set; }
        /// <summary>Field 'keyIdForAuthen'</summary>
        public int? KeyIdForAuthen { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SetTollDataRq that = right as SetTollDataRq;
            if (RndRSU != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(RndRSU, that.RndRSU))
                    return false;
            } else if (that.RndRSU != null)
                return false;
            if (TransPara != null) {
                if (!TransPara.Equals(that.TransPara))
                    return false;
            } else if (that.TransPara != null)
                return false;
            if (TollInfo != null) {
                if (!TollInfo.Equals(that.TollInfo))
                    return false;
            } else if (that.TollInfo != null)
                return false;
            if (TollingPos != null) {
                if (!TollingPos.Equals(that.TollingPos))
                    return false;
            } else if (that.TollingPos != null)
                return false;
            if (KeyIdForAuthen != null) {
                if (KeyIdForAuthen != that.KeyIdForAuthen)
                    return false;
            } else if (that.KeyIdForAuthen != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (RndRSU != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(RndRSU);
            if (TransPara != null)
                hash ^= TransPara.GetHashCode();
            if (TollInfo != null)
                hash ^= TollInfo.GetHashCode();
            if (TollingPos != null)
                hash ^= TollingPos.GetHashCode();
            if (KeyIdForAuthen != null)
                hash ^= KeyIdForAuthen.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SetTollDataRq";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RndRSU == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.RndRSU.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRSU", "byte[]", "rndRSU", "RandStr8", false); throw;
                }
                try {
                    if (this.TransPara != null) {
                        this.TransPara.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransPara", "MsgFrame.TransPara", "transPara", "TransPara", false); throw;
                }
                try {
                    if (this.TollInfo != null) {
                        this.TollInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "PartOfFile", "tollInfo", "PartOfFile", false); throw;
                }
                try {
                    if (this.TollingPos != null) {
                        this.TollingPos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                }
                try {
                    if (this.KeyIdForAuthen != null) {
                        if (this.KeyIdForAuthen.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.KeyIdForAuthen.Value > 255)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen.Value", "int", "keyIdForAuthen", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRq", null, "SetTollDataRq", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SetTollDataRq obj0 = new SetTollDataRq();
            {
                obj0.RndRSU = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.RndRSU);
            }
            {
                obj0.TransPara = Oss.Asn1.Internal.CopyUtil.CopyType(this.TransPara);
            }
            {
                obj0.TollInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollInfo);
            }
            {
                obj0.TollingPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.TollingPos);
            }
            {
                obj0.KeyIdForAuthen = this.KeyIdForAuthen;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("rndRSU ");
                    if (this.RndRSU == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.RndRSU);
                    }
                }
                {
                    MsgFrame.TransPara data1 = this.TransPara;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("transPara ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    PartOfFile data1 = this.TollInfo;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tollInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.TollingPos data1 = this.TollingPos;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("tollingPos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    int? data1 = this.KeyIdForAuthen;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("keyIdForAuthen ");
                        prt.Write(data1.Value);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TransPara != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TollInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TollingPos != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.KeyIdForAuthen != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    enc.EncodeOctetString(this.RndRSU, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRSU", "byte[]", "rndRSU", "RandStr8", false); throw;
                }
                try {
                    MsgFrame.TransPara data1 = this.TransPara;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransPara", "MsgFrame.TransPara", "transPara", "TransPara", false); throw;
                }
                try {
                    PartOfFile data1 = this.TollInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "PartOfFile", "tollInfo", "PartOfFile", false); throw;
                }
                try {
                    if (this.TollingPos != null)
                    {
                        enc.EncodeType(this.TollingPos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                }
                try {
                    if (this.KeyIdForAuthen != null)
                    {
                        if (enc.BitCount(this.KeyIdForAuthen.Value - 0) > 8 || this.KeyIdForAuthen.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.KeyIdForAuthen.Value);
                        if (enc.IsAligned)
                            enc.Output.WritePadding();
                        enc.Output.Write8BitInt((this.KeyIdForAuthen.Value - (0)));
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen.Value", "int", "keyIdForAuthen", "INTEGER", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRq", null, "SetTollDataRq", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                try {
                    this.RndRSU = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RndRSU", "byte[]", "rndRSU", "RandStr8", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        MsgFrame.TransPara data1 = new MsgFrame.TransPara();

                        dec.DecodeType(data1);
                        this.TransPara = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TransPara", "MsgFrame.TransPara", "transPara", "TransPara", false); throw;
                    }
                }
                else
                {
                    this.TransPara = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        PartOfFile data1 = new PartOfFile();

                        dec.DecodeType(data1);
                        this.TollInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollInfo", "PartOfFile", "tollInfo", "PartOfFile", false); throw;
                    }
                }
                else
                {
                    this.TollInfo = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.TollingPos data1 = new MsgFrame.TollingPos();

                        dec.DecodeType(data1);
                        this.TollingPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TollingPos", "MsgFrame.TollingPos", "tollingPos", "TollingPos", false); throw;
                    }
                }
                else
                {
                    this.TollingPos = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        if (dec.IsAligned)
                            dec.Input.SkipPadding();
                        this.KeyIdForAuthen = 0 + dec.Input.Read8BitInt();
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "KeyIdForAuthen", "int", "keyIdForAuthen", "INTEGER", false); throw;
                    }
                }
                else
                {
                    this.KeyIdForAuthen = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRq", null, "SetTollDataRq", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TransPara' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TransPara : Oss.Asn1.BaseType
    {
        /// <summary>Field 'transAmount'</summary>
        public byte[] TransAmount { get; set; }
        /// <summary>Field 'transType'</summary>
        public byte[] TransType { get; set; }
        /// <summary>Field 'terminalID'</summary>
        public byte[] TerminalID { get; set; }
        /// <summary>Field 'transSN'</summary>
        public byte[] TransSN { get; set; }
        /// <summary>Field 'transTime'</summary>
        public byte[] TransTime { get; set; }
        /// <summary>Field 'transStationID'</summary>
        public byte[] TransStationID { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TransPara that = right as TransPara;
            if (TransAmount != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TransAmount, that.TransAmount))
                    return false;
            } else if (that.TransAmount != null)
                return false;
            if (TransType != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TransType, that.TransType))
                    return false;
            } else if (that.TransType != null)
                return false;
            if (TerminalID != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TerminalID, that.TerminalID))
                    return false;
            } else if (that.TerminalID != null)
                return false;
            if (TransSN != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TransSN, that.TransSN))
                    return false;
            } else if (that.TransSN != null)
                return false;
            if (TransTime != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TransTime, that.TransTime))
                    return false;
            } else if (that.TransTime != null)
                return false;
            if (TransStationID != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TransStationID, that.TransStationID))
                    return false;
            } else if (that.TransStationID != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TransAmount != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TransAmount);
            if (TransType != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TransType);
            if (TerminalID != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TerminalID);
            if (TransSN != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TransSN);
            if (TransTime != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TransTime);
            if (TransStationID != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TransStationID);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TransPara";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TransAmount == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TransAmount.Length != 4)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransAmount", "byte[]", "transAmount", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TransType == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TransType.Length != 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransType", "byte[]", "transType", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TerminalID == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TerminalID.Length != 6)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TerminalID", "byte[]", "terminalID", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TransSN == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TransSN.Length != 4)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransSN", "byte[]", "transSN", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TransTime == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TransTime.Length != 7)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransTime", "byte[]", "transTime", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TransStationID == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.TransStationID.Length != 3)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransStationID", "byte[]", "transStationID", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransPara", null, "TransPara", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TransPara obj0 = new TransPara();
            {
                obj0.TransAmount = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TransAmount);
            }
            {
                obj0.TransType = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TransType);
            }
            {
                obj0.TerminalID = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TerminalID);
            }
            {
                obj0.TransSN = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TransSN);
            }
            {
                obj0.TransTime = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TransTime);
            }
            {
                obj0.TransStationID = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TransStationID);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("transAmount ");
                    if (this.TransAmount == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TransAmount);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("transType ");
                    if (this.TransType == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TransType);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("terminalID ");
                    if (this.TerminalID == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TerminalID);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("transSN ");
                    if (this.TransSN == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TransSN);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("transTime ");
                    if (this.TransTime == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TransTime);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("transStationID ");
                    if (this.TransStationID == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.TransStationID);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeOctetString(this.TransAmount, 4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransAmount", "byte[]", "transAmount", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.TransType, 1);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransType", "byte[]", "transType", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.TerminalID, 6);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TerminalID", "byte[]", "terminalID", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.TransSN, 4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransSN", "byte[]", "transSN", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.TransTime, 7);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransTime", "byte[]", "transTime", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.TransStationID, 3);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransStationID", "byte[]", "transStationID", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransPara", null, "TransPara", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.TransAmount = dec.DecodeOctetString(4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransAmount", "byte[]", "transAmount", "OCTET STRING", false); throw;
                }
                try {
                    this.TransType = dec.DecodeOctetString(1);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransType", "byte[]", "transType", "OCTET STRING", false); throw;
                }
                try {
                    this.TerminalID = dec.DecodeOctetString(6);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TerminalID", "byte[]", "terminalID", "OCTET STRING", false); throw;
                }
                try {
                    this.TransSN = dec.DecodeOctetString(4);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransSN", "byte[]", "transSN", "OCTET STRING", false); throw;
                }
                try {
                    this.TransTime = dec.DecodeOctetString(7);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransTime", "byte[]", "transTime", "OCTET STRING", false); throw;
                }
                try {
                    this.TransStationID = dec.DecodeOctetString(3);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransStationID", "byte[]", "transStationID", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransPara", null, "TransPara", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'PartOfFile' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class PartOfFile : Oss.Asn1.BaseType
    {
        /// <summary>Field 'offset'</summary>
        public int Offset { get; set; }
        /// <summary>Field 'lenght'</summary>
        public int Lenght { get; set; }
        /// <summary>Field 'fileContent'</summary>
        public byte[] FileContent { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            PartOfFile that = right as PartOfFile;
            if (Offset != that.Offset)
                return false;
            if (Lenght != that.Lenght)
                return false;
            if (FileContent != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(FileContent, that.FileContent))
                    return false;
            } else if (that.FileContent != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Offset.GetHashCode();
            hash ^= Lenght.GetHashCode();
            if (FileContent != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(FileContent);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "PartOfFile";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Offset < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Offset > 32767)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    if (this.Lenght < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.Lenght > 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lenght", "int", "lenght", "INTEGER", false); throw;
                }
                try {
                    if (this.FileContent == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.FileContent.Length != 127)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "FileContent", "byte[]", "fileContent", "File", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PartOfFile", null, "PartOfFile", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            PartOfFile obj0 = new PartOfFile();
            {
                obj0.Offset = this.Offset;
            }
            {
                obj0.Lenght = this.Lenght;
            }
            {
                obj0.FileContent = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.FileContent);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("offset ");
                    prt.Write(this.Offset);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("lenght ");
                    prt.Write(this.Lenght);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("fileContent ");
                    if (this.FileContent == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.FileContent);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    if (enc.BitCount(this.Offset - 0) > 15 || this.Offset < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Offset);
                    enc.EncodeConstrainedInteger((this.Offset - (0)), 15);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.Lenght - 0) > 7 || this.Lenght < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Lenght);
                    enc.Output.Write7BitInt((this.Lenght - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lenght", "int", "lenght", "INTEGER", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.FileContent, 127);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "FileContent", "byte[]", "fileContent", "File", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PartOfFile", null, "PartOfFile", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    this.Offset = dec.DecodeConstrainedInteger(15, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Offset", "int", "offset", "INTEGER", false); throw;
                }
                try {
                    this.Lenght = 0 + dec.Input.Read7BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Lenght", "int", "lenght", "INTEGER", false); throw;
                }
                try {
                    this.FileContent = dec.DecodeOctetString(127);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "FileContent", "byte[]", "fileContent", "File", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "PartOfFile", null, "PartOfFile", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SetTollDataRs' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SetTollDataRs : Oss.Asn1.BaseType
    {
        /// <summary>Field 'tacInfo'</summary>
        public byte[] TacInfo { get; set; }
        /// <summary>Field 'authenticator'</summary>
        public byte[] Authenticator { get; set; }
        /// <summary>Field 'accountInfo'</summary>
        public MsgFrame.AccountInfo AccountInfo { get; set; }
        /// <summary>Field 'transCredential'</summary>
        public MsgFrame.TransCredential TransCredential { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SetTollDataRs that = right as SetTollDataRs;
            if (TacInfo != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TacInfo, that.TacInfo))
                    return false;
            } else if (that.TacInfo != null)
                return false;
            if (Authenticator != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Authenticator, that.Authenticator))
                    return false;
            } else if (that.Authenticator != null)
                return false;
            if (AccountInfo != null) {
                if (!AccountInfo.Equals(that.AccountInfo))
                    return false;
            } else if (that.AccountInfo != null)
                return false;
            if (TransCredential != null) {
                if (!TransCredential.Equals(that.TransCredential))
                    return false;
            } else if (that.TransCredential != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (TacInfo != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TacInfo);
            if (Authenticator != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Authenticator);
            if (AccountInfo != null)
                hash ^= AccountInfo.GetHashCode();
            if (TransCredential != null)
                hash ^= TransCredential.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SetTollDataRs";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.TacInfo != null) {
                        if (this.TacInfo.Length != 4)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TacInfo", "byte[]", "tacInfo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Authenticator != null) {
                        if (this.Authenticator.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                }
                try {
                    if (this.AccountInfo != null) {
                        this.AccountInfo.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccountInfo", "MsgFrame.AccountInfo", "accountInfo", "AccountInfo", false); throw;
                }
                try {
                    if (this.TransCredential != null) {
                        this.TransCredential.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransCredential", "MsgFrame.TransCredential", "transCredential", "TransCredential", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRs", null, "SetTollDataRs", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SetTollDataRs obj0 = new SetTollDataRs();
            {
                obj0.TacInfo = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TacInfo);
            }
            {
                obj0.Authenticator = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Authenticator);
            }
            {
                obj0.AccountInfo = Oss.Asn1.Internal.CopyUtil.CopyType(this.AccountInfo);
            }
            {
                obj0.TransCredential = Oss.Asn1.Internal.CopyUtil.CopyType(this.TransCredential);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    byte[] data1 = this.TacInfo;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("tacInfo ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    byte[] data1 = this.Authenticator;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("authenticator ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    MsgFrame.AccountInfo data1 = this.AccountInfo;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("accountInfo ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.TransCredential data1 = this.TransCredential;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("transCredential ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TacInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Authenticator != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.AccountInfo != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.TransCredential != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                enc.Output.WriteBits(optMask0, 0, 4);
                try {
                    if (this.TacInfo != null)
                    {
                        enc.EncodeOctetString(this.TacInfo, 4);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TacInfo", "byte[]", "tacInfo", "OCTET STRING", false); throw;
                }
                try {
                    if (this.Authenticator != null)
                    {
                        enc.EncodeOctetString(this.Authenticator, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                }
                try {
                    MsgFrame.AccountInfo data1 = this.AccountInfo;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AccountInfo", "MsgFrame.AccountInfo", "accountInfo", "AccountInfo", false); throw;
                }
                try {
                    MsgFrame.TransCredential data1 = this.TransCredential;

                    if (data1 != null)
                    {
                        enc.EncodeType(data1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TransCredential", "MsgFrame.TransCredential", "transCredential", "TransCredential", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRs", null, "SetTollDataRs", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 5);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TacInfo = dec.DecodeOctetString(4);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TacInfo", "byte[]", "tacInfo", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TacInfo = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.Authenticator = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Authenticator", "byte[]", "authenticator", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.Authenticator = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        MsgFrame.AccountInfo data1 = new MsgFrame.AccountInfo();

                        dec.DecodeType(data1);
                        this.AccountInfo = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "AccountInfo", "MsgFrame.AccountInfo", "accountInfo", "AccountInfo", false); throw;
                    }
                }
                else
                {
                    this.AccountInfo = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        MsgFrame.TransCredential data1 = new MsgFrame.TransCredential();

                        dec.DecodeType(data1);
                        this.TransCredential = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TransCredential", "MsgFrame.TransCredential", "transCredential", "TransCredential", false); throw;
                    }
                }
                else
                {
                    this.TransCredential = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetTollDataRs", null, "SetTollDataRs", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AccountInfo' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AccountInfo : Oss.Asn1.BaseType
    {
        /// <summary>Field 'account'</summary>
        public byte[] Account { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AccountInfo that = right as AccountInfo;
            if (Account != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Account, that.Account))
                    return false;
            } else if (that.Account != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Account != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Account);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AccountInfo";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Account == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Account.Length < 2)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Account.Length > 32)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Account", "byte[]", "account", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccountInfo", null, "AccountInfo", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AccountInfo obj0 = new AccountInfo();
            {
                obj0.Account = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Account);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("account ");
                    if (this.Account == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Account);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeOctetString(this.Account, 2, 32);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Account", "byte[]", "account", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccountInfo", null, "AccountInfo", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Account = dec.DecodeOctetString(2, 32);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Account", "byte[]", "account", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AccountInfo", null, "AccountInfo", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TransCredential' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class TransCredential : Oss.Asn1.BaseType
    {
        /// <summary>Field 'tc'</summary>
        public byte[] Tc { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            TransCredential that = right as TransCredential;
            if (Tc != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Tc, that.Tc))
                    return false;
            } else if (that.Tc != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Tc != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Tc);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "TransCredential";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Tc == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    try {
                        if (this.Tc.Length != 32)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tc", "byte[]", "tc", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransCredential", null, "TransCredential", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            TransCredential obj0 = new TransCredential();
            {
                obj0.Tc = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Tc);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("tc ");
                    if (this.Tc == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.Tc);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    bool extPresent1 = !(this.Tc.Length == 32);
                    enc.EncodeBool(extPresent1);
                    if (extPresent1)
                        enc.EncodeOctetString(this.Tc);
                    else {
                        enc.EncodeOctetString(this.Tc, 32);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tc", "byte[]", "tc", "OCTET STRING", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransCredential", null, "TransCredential", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    byte[] data1;
                    bool extPresent1 = dec.Input.ReadBool();
                    if (extPresent1)
                        data1 = dec.DecodeOctetString();
                    else
                        data1 = dec.DecodeOctetString(32);
                    if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 32))
                        dec.RaiseExtLengthError(extPresent1);
                    this.Tc = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Tc", "byte[]", "tc", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "TransCredential", null, "TransCredential", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ChannelRq' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ChannelRq : Oss.Asn1.BaseType
    {
        /// <summary>Field 'channelid'</summary>
        public MsgFrame.ChannelID Channelid { get; set; }
        /// <summary>Field 'apdu'</summary>
        public ApduList Apdu { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ChannelRq that = right as ChannelRq;
            if (Channelid != that.Channelid)
                return false;
            if (Apdu != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOfArrays(Apdu, that.Apdu))
                    return false;
            } else if (that.Apdu != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Channelid.GetHashCode();
            if (Apdu != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOfArrays(Apdu);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "ChannelRq";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.Channelid)
                    {
                        case MsgFrame.ChannelID.Obu:
                        case MsgFrame.ChannelID.Esam:
                        case MsgFrame.ChannelID.Icc:
                        case MsgFrame.ChannelID.Hmi:
                        case MsgFrame.ChannelID.Beeper:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Channelid", "MsgFrame.ChannelID", "channelid", "ChannelID", false); throw;
                }
                try {
                    if (this.Apdu == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Apdu.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Apdu", "ApduList", "apdu", "ApduList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ChannelRq", null, "ChannelRq", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ChannelRq obj0 = new ChannelRq();
            {
                obj0.Channelid = this.Channelid;
            }
            {
                obj0.Apdu = this.Apdu == null ? null : (ApduList)this.Apdu.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("channelid ");
                    switch (this.Channelid) {
                    case MsgFrame.ChannelID.Obu:
                        prt.Write("obu");
                        break;
                    case MsgFrame.ChannelID.Esam:
                        prt.Write("esam");
                        break;
                    case MsgFrame.ChannelID.Icc:
                        prt.Write("icc");
                        break;
                    case MsgFrame.ChannelID.Hmi:
                        prt.Write("hmi");
                        break;
                    case MsgFrame.ChannelID.Beeper:
                        prt.Write("beeper");
                        break;
                    default:
                        prt.Write((int)this.Channelid);
                        break;
                    }
                }
                {
                    ApduList data1 = this.Apdu;

                    prt.WriteLine(",");
                    prt.Write("apdu ");
                    if (data1 == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeEnum((int)this.Channelid, _InternalMetadata.PerCodecMetaData.SortedEnum46);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Channelid", "MsgFrame.ChannelID", "channelid", "ChannelID", false); throw;
                }
                try {
                    this.Apdu.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Apdu", "ApduList", "apdu", "ApduList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ChannelRq", null, "ChannelRq", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Channelid = (MsgFrame.ChannelID)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum46);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Channelid", "MsgFrame.ChannelID", "channelid", "ChannelID", false); throw;
                }
                try {
                    ApduList data1 = new ApduList();

                    data1.DecodePer(dec);
                    this.Apdu = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Apdu", "ApduList", "apdu", "ApduList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ChannelRq", null, "ChannelRq", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ChannelID' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ChannelID
    {
        Obu = 0,
        Esam = 1,
        Icc = 2,
        Hmi = 3,
        Beeper = 4
    }
    /// <summary>
    /// Represents schema type 'ApduList' (SEQUENCE OF)
    /// </summary>
    [System.Serializable]
    public partial class ApduList : System.Collections.Generic.List<byte[]>
    {
        /// <summary>
        /// Initializes a new instance of the ApduList class that is empty and has the default initial capacity.
        /// </summary>
        public ApduList() : base() {}
        /// <summary>
        /// Initializes a new instance of the ApduList class that contains elements copied from the specified collection
        /// and has sufficient capacity to accommodate the number of elements copied.
        /// <param name="collection">The collection whose elements are copied to the new ApduList.</param>
        /// </summary>
        public ApduList(System.Collections.Generic.IEnumerable<byte[]> collection) : base(collection) {}
        /// <summary>
        /// Initializes a new instance of the ApduList class that is empty and has the specified capacity.
        /// <param name="capacity">The number of elements that the new ApduList can initially store.</param>
        /// </summary>
        public ApduList(int capacity) : base(capacity) {}


        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ApduList that = right as ApduList;
            return Oss.Asn1.Internal.Comparer.CompareSeqOfArrays(this, that);
        }
        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashSeqOfArrays(this);
        }

        public override string ToString()
        {
            return Oss.Asn1.BaseType.ToString(PrintAsn1ValueNotation);
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public void Validate()
        {
            try {
                for (int i1 = 0; i1 < this.Count; i1++)
                {
                    try {
                        if (this[i1].Length != 127)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i1), "byte[]", "#" + i1.ToString(), "OCTET STRING", false); throw;
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApduList", null, "ApduList", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public object Copy()
        {
            ApduList obj0 = new ApduList();
            for (int i0 = 0; i0 < this.Count; i0++) {
                obj0.Add(Oss.Asn1.Internal.CopyUtil.CopyByteArray(this[i0]));
            }
            return obj0;
        }

        public void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                for (int i1 = 0; i1 < this.Count; i1++) {
                    if (i1 != 0)
                        prt.Write(",");
                    prt.WriteLine();
                    if (this[i1] == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this[i1]);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        public void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                int i0 = 0;
                int cur_i0 = 0;
                int fragcount0 = 0;
                int length0 = this.Count;
                do
                {
                    fragcount0 = enc.EncodeLength(length0);
                    for (i0 = cur_i0; i0 < cur_i0 + fragcount0; i0++)
                    {
                        try {
                            enc.EncodeOctetString(this[i0], 127);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", i0), "byte[]", "#" + i0.ToString(), "OCTET STRING", false); throw;
                        }
                    }
                    cur_i0 += fragcount0;
                } while ((length0 -= fragcount0) > 0);
                if (fragcount0 >= 16384 && length0 == 0) 
                    enc.Output.Write8BitInt(0x00);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApduList", null, "ApduList", false); throw;
            }
        }

        public void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                int i0 = 0;
                int fragcount0 = 0;
                int fraglast0 = 65536;
                while (true)
                {
                    fragcount0 = dec.DecodeLength(ref fraglast0);
                    for (i0 = 0; i0 < fragcount0; i0++)
                    {
                        try {
                            this.Add(dec.DecodeOctetString(127));
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, System.String.Format("[{0}]", this.Count), "byte[]", "#" + this.Count.ToString(), "OCTET STRING", false); throw;
                        }
                    }
                    if (fraglast0 < 0)
                        break;
                    fraglast0 = fragcount0;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ApduList", null, "ApduList", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'SetMMIRq' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SetMMIRq : Oss.Asn1.BaseType
    {
        /// <summary>Field 'toll'</summary>
        public TollResult Toll { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SetMMIRq that = right as SetMMIRq;
            if (Toll != that.Toll)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= Toll.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SetMMIRq";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    switch (this.Toll)
                    {
                        case TollResult.Ok:
                        case TollResult.Nok:
                        case TollResult.ContactOperator:
                            break;
                        default:
                            throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._not_enumerated);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Toll", "TollResult", "toll", "TollResult", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetMMIRq", null, "SetMMIRq", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SetMMIRq obj0 = new SetMMIRq();
            {
                obj0.Toll = this.Toll;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("toll ");
                    switch (this.Toll) {
                    case TollResult.Ok:
                        prt.Write("ok");
                        break;
                    case TollResult.Nok:
                        prt.Write("nok");
                        break;
                    case TollResult.ContactOperator:
                        prt.Write("contactOperator");
                        break;
                    default:
                        prt.Write((int)this.Toll);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;

                enc.Output.WriteBool(extPresent0);
                try {
                    enc.EncodeEnum((int)this.Toll, _InternalMetadata.PerCodecMetaData.SortedEnum47);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Toll", "TollResult", "toll", "TollResult", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetMMIRq", null, "SetMMIRq", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 1);
                try {
                    this.Toll = (TollResult)dec.DecodeEnum(_InternalMetadata.PerCodecMetaData.SortedEnum47);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Toll", "TollResult", "toll", "TollResult", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SetMMIRq", null, "SetMMIRq", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'TollResult' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum TollResult
    {
        Ok = 0,
        Nok = 1,
        ContactOperator = 2
    }
    /// <summary>
    /// Represents schema type 'Action-Response' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class ActionResponse : Oss.Asn1.BaseType
    {
        /// <summary>Field 'time'</summary>
        public DDateTime Time { get; set; }
        /// <summary>Field 'sourceId'</summary>
        public byte[] SourceId { get; set; }
        /// <summary>Field 'targetId'</summary>
        public byte[] TargetId { get; set; }
        /// <summary>Field 'paymentEntityId'</summary>
        public MsgFrame.PaymentEntityID PaymentEntityId { get; set; }
        /// <summary>Field 'responseParameter'</summary>
        public TransInfo ResponseParameter { get; set; }
        /// <summary>Field 'ret'</summary>
        public ReturnStatus Ret { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            ActionResponse that = right as ActionResponse;
            if (Time != null) {
                if (!Time.Equals(that.Time))
                    return false;
            } else if (that.Time != null)
                return false;
            if (SourceId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(SourceId, that.SourceId))
                    return false;
            } else if (that.SourceId != null)
                return false;
            if (TargetId != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(TargetId, that.TargetId))
                    return false;
            } else if (that.TargetId != null)
                return false;
            if (PaymentEntityId != that.PaymentEntityId)
                return false;
            if (ResponseParameter != null) {
                if (!ResponseParameter.Equals(that.ResponseParameter))
                    return false;
            } else if (that.ResponseParameter != null)
                return false;
            if (Ret != that.Ret)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Time != null)
                hash ^= Time.GetHashCode();
            if (SourceId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(SourceId);
            if (TargetId != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(TargetId);
            hash ^= PaymentEntityId.GetHashCode();
            if (ResponseParameter != null)
                hash ^= ResponseParameter.GetHashCode();
            hash ^= Ret.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "Action-Response";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Time == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Time.Validate();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    if (this.SourceId == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.SourceId.Length != 8)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null) {
                        if (this.TargetId.Length != 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                try {
                    if (this.ResponseParameter != null) {
                        this.ResponseParameter.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ResponseParameter", "TransInfo", "responseParameter", "TransInfo", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ret", "ReturnStatus", "ret", "ReturnStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionResponse", null, "Action-Response", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            ActionResponse obj0 = new ActionResponse();
            {
                obj0.Time = Oss.Asn1.Internal.CopyUtil.CopyType(this.Time);
            }
            {
                obj0.SourceId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.SourceId);
            }
            {
                obj0.TargetId = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.TargetId);
            }
            {
                obj0.PaymentEntityId = this.PaymentEntityId;
            }
            {
                obj0.ResponseParameter = Oss.Asn1.Internal.CopyUtil.CopyType(this.ResponseParameter);
            }
            {
                obj0.Ret = this.Ret;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("time ");
                    if (this.Time == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintContent(this.Time);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("sourceId ");
                    if (this.SourceId == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintOctetString(this.SourceId);
                    }
                }
                {
                    byte[] data1 = this.TargetId;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("targetId ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("paymentEntityId ");
                    switch (this.PaymentEntityId) {
                    case MsgFrame.PaymentEntityID.SystemId:
                        prt.Write("system");
                        break;
                    case MsgFrame.PaymentEntityID.Freeflow:
                        prt.Write("freeflow");
                        break;
                    case MsgFrame.PaymentEntityID.Enclosed:
                        prt.Write("enclosed");
                        break;
                    case MsgFrame.PaymentEntityID.Congestion:
                        prt.Write("congestion");
                        break;
                    case MsgFrame.PaymentEntityID.Charging:
                        prt.Write("charging");
                        break;
                    case MsgFrame.PaymentEntityID.Parking:
                        prt.Write("parking");
                        break;
                    default:
                        prt.Write((int)this.PaymentEntityId);
                        break;
                    }
                }
                {
                    TransInfo data1 = this.ResponseParameter;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("responseParameter ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("ret ");
                    switch (this.Ret) {
                    case ReturnStatus.NoError:
                        prt.Write("noError");
                        break;
                    case ReturnStatus.AccessDenied:
                        prt.Write("accessDenied");
                        break;
                    case ReturnStatus.ArgumnetError:
                        prt.Write("argumnetError");
                        break;
                    case ReturnStatus.ComplexityLimitation:
                        prt.Write("complexityLimitation");
                        break;
                    case ReturnStatus.ProcessingFailure:
                        prt.Write("processingFailure");
                        break;
                    case ReturnStatus.Processing:
                        prt.Write("processing");
                        break;
                    default:
                        prt.Write((int)this.Ret);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.TargetId != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.ResponseParameter != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    enc.EncodeType(this.Time);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    enc.EncodeOctetString(this.SourceId, 8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                try {
                    if (this.TargetId != null)
                    {
                        enc.EncodeOctetString(this.TargetId, 8);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.PaymentEntityId, _InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                try {
                    if (this.ResponseParameter != null)
                    {
                        enc.EncodeType(this.ResponseParameter);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ResponseParameter", "TransInfo", "responseParameter", "TransInfo", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.Ret, _InternalMetadata.PerCodecMetaData.SortedEnum48, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum48);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ret", "ReturnStatus", "ret", "ReturnStatus", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionResponse", null, "Action-Response", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    DDateTime data1 = new DDateTime();

                    dec.DecodeType(data1);
                    this.Time = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Time", "DDateTime", "time", "DDateTime", false); throw;
                }
                try {
                    this.SourceId = dec.DecodeOctetString(8);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SourceId", "byte[]", "sourceId", "OCTET STRING", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.TargetId = dec.DecodeOctetString(8);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TargetId", "byte[]", "targetId", "OCTET STRING", false); throw;
                    }
                }
                else
                {
                    this.TargetId = null;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum41, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum41, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum41);
                    this.PaymentEntityId = (MsgFrame.PaymentEntityID)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "PaymentEntityId", "MsgFrame.PaymentEntityID", "paymentEntityId", "PaymentEntityID", false); throw;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        TransInfo data1 = new TransInfo();

                        dec.DecodeType(data1);
                        this.ResponseParameter = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ResponseParameter", "TransInfo", "responseParameter", "TransInfo", false); throw;
                    }
                }
                else
                {
                    this.ResponseParameter = null;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum48, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum48, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum48);
                    this.Ret = (ReturnStatus)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Ret", "ReturnStatus", "ret", "ReturnStatus", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "ActionResponse", null, "Action-Response", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'ReturnStatus' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum ReturnStatus
    {
        NoError = 0,
        AccessDenied = 1,
        ArgumnetError = 2,
        ComplexityLimitation = 3,
        ProcessingFailure = 4,
        Processing = 5
    }
    /// <summary>
    /// Represents schema type 'SignalState' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class SignalState : Oss.Asn1.BasePdu
    {
        /// <summary>Field 'status'</summary>
        public Oss.Asn1.BitStringWithNamedBits Status { get; set; }
        /// <summary>Field 'moy'</summary>
        public int? Moy { get; set; }
        /// <summary>Field 'timeStamp'</summary>
        public int? TimeStamp { get; set; }
        /// <summary>Field 'phases'</summary>
        public PhaseList Phases { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            SignalState that = right as SignalState;
            if (Status != null) {
                if (!Status.Equals(that.Status))
                    return false;
            } else if (that.Status != null)
                return false;
            if (Moy != null) {
                if (Moy != that.Moy)
                    return false;
            } else if (that.Moy != null)
                return false;
            if (TimeStamp != null) {
                if (TimeStamp != that.TimeStamp)
                    return false;
            } else if (that.TimeStamp != null)
                return false;
            if (Phases != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(Phases, that.Phases))
                    return false;
            } else if (that.Phases != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (Status != null)
                hash ^= Status.GetHashCode();
            if (Moy != null)
                hash ^= Moy.GetHashCode();
            if (TimeStamp != null)
                hash ^= TimeStamp.GetHashCode();
            if (Phases != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(Phases);
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "SignalState";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.Status == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    if (this.Status.Count != 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                try {
                    if (this.Moy != null) {
                        if (this.Moy.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.Moy.Value > 527040)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy.Value", "int", "moy", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.TimeStamp != null) {
                        if (this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                        if (this.TimeStamp.Value > 60000)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "DSecond", false); throw;
                }
                try {
                    if (this.Phases == null)
                        throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                    this.Phases.Validate();
                    if (this.Phases.Count < 1)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    if (this.Phases.Count > 16)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalState", null, "SignalState", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            SignalState obj0 = new SignalState();
            {
                obj0.Status = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.Status);
            }
            {
                obj0.Moy = this.Moy;
            }
            {
                obj0.TimeStamp = this.TimeStamp;
            }
            {
                obj0.Phases = this.Phases == null ? null : (PhaseList)this.Phases.Copy();
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("status ");
                    if (this.Status == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        prt.PrintBitString(this.Status, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "manualControllsEnabled";
                                    case (int)1: return "stopTimelsActivated";
                                    case (int)2: return "failureFlash";
                                    case (int)3: return "preernptisActive";
                                    case (int)4: return "signalPrioritylsActive";
                                    case (int)5: return "fixedTimeOperation";
                                    case (int)6: return "trafficOependentOperation";
                                    case (int)7: return "standbyOperation";
                                    case (int)8: return "failureMode";
                                    case (int)9: return "off";
                                    case (int)10: return "recentMAPmessageUpdate";
                                    case (int)11: return "recentChangelnMAPassignedLanesIDsUsed";
                                    case (int)12: return "noValidMAPisAvailableAtThisTime";
                                    case (int)13: return "noValidSPATisAvailableAtThisTime";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    int? data1 = this.Moy;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("moy ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    int? data1 = this.TimeStamp;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeStamp ");
                        prt.Write(data1.Value);
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("phases ");
                    if (this.Phases == null)
                        prt.Write("<<<NULL>>>");
                    else {
                        this.Phases.PrintAsn1ValueNotation(prt);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.Moy != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.TimeStamp != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges7, this.Status.LastOneBitPos() + 1);
                    enc.EncodeBitStringWithNamedBits(this.Status, length1, 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                try {
                    if (this.Moy != null)
                    {
                        if (enc.BitCount(this.Moy.Value - 0) > 20 || this.Moy.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.Moy.Value);
                        enc.EncodeConstrainedInteger((this.Moy.Value - (0)), 20);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy.Value", "int", "moy", "MinuteOfTheYear", false); throw;
                }
                try {
                    if (this.TimeStamp != null)
                    {
                        if (enc.BitCount(this.TimeStamp.Value - 0) > 16 || this.TimeStamp.Value < 0)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.TimeStamp.Value);
                        enc.EncodeConstrainedInteger((this.TimeStamp.Value - (0)), 16);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp.Value", "int", "timeStamp", "DSecond", false); throw;
                }
                try {
                    this.Phases.EncodePer(enc);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalState", null, "SignalState", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                try {
                    this.Status = dec.DecodeBitStringWithNamedBits(16, _InternalMetadata.BerCodecMetaData.Ranges7);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Status", "Oss.Asn1.BitStringWithNamedBits", "status", "IntersectionStatusObject", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        this.Moy = dec.DecodeConstrainedInteger(20, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Moy", "int", "moy", "MinuteOfTheYear", false); throw;
                    }
                }
                else
                {
                    this.Moy = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        this.TimeStamp = dec.DecodeConstrainedInteger(16, 0);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeStamp", "int", "timeStamp", "DSecond", false); throw;
                    }
                }
                else
                {
                    this.TimeStamp = null;
                }
                try {
                    PhaseList data1 = new PhaseList();

                    data1.DecodePer(dec);
                    this.Phases = data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Phases", "PhaseList", "phases", "PhaseList", false); throw;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "SignalState", null, "SignalState", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'LaneLineType' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class LaneLineType : Oss.Asn1.BasePdu
    {
        /// <summary>Field 'leftLaneLine'</summary>
        public DottedSolidMarkingLineType LeftLaneLine { get; set; }
        /// <summary>Field 'rightLaneLine'</summary>
        public DottedSolidMarkingLineType RightLaneLine { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            LaneLineType that = right as LaneLineType;
            if (LeftLaneLine != that.LeftLaneLine)
                return false;
            if (RightLaneLine != that.RightLaneLine)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= LeftLaneLine.GetHashCode();
            hash ^= RightLaneLine.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "LaneLineType";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeftLaneLine", "DottedSolidMarkingLineType", "leftLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
                try {
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RightLaneLine", "DottedSolidMarkingLineType", "rightLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneLineType", null, "LaneLineType", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            LaneLineType obj0 = new LaneLineType();
            {
                obj0.LeftLaneLine = this.LeftLaneLine;
            }
            {
                obj0.RightLaneLine = this.RightLaneLine;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("leftLaneLine ");
                    switch (this.LeftLaneLine) {
                    case DottedSolidMarkingLineType.WhiteDottedLine:
                        prt.Write("whiteDottedLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteSolidLine:
                        prt.Write("whiteSolidLine");
                        break;
                    case DottedSolidMarkingLineType.YellowDottedLine:
                        prt.Write("yellowDottedLine");
                        break;
                    case DottedSolidMarkingLineType.YellowSolidLine:
                        prt.Write("yellowSolidLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteDottedSolidLine:
                        prt.Write("whiteDotted-solidLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteSottedDottedLine:
                        prt.Write("whiteSotted-dottedLine");
                        break;
                    case DottedSolidMarkingLineType.YellowDottedSolidLine:
                        prt.Write("yellowDotted-solidLine");
                        break;
                    case DottedSolidMarkingLineType.YellowSottedDottedLine:
                        prt.Write("yellowSotted-dottedLine");
                        break;
                    default:
                        prt.Write((int)this.LeftLaneLine);
                        break;
                    }
                }
                {
                    prt.WriteLine(",");
                    prt.Write("rightLaneLine ");
                    switch (this.RightLaneLine) {
                    case DottedSolidMarkingLineType.WhiteDottedLine:
                        prt.Write("whiteDottedLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteSolidLine:
                        prt.Write("whiteSolidLine");
                        break;
                    case DottedSolidMarkingLineType.YellowDottedLine:
                        prt.Write("yellowDottedLine");
                        break;
                    case DottedSolidMarkingLineType.YellowSolidLine:
                        prt.Write("yellowSolidLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteDottedSolidLine:
                        prt.Write("whiteDotted-solidLine");
                        break;
                    case DottedSolidMarkingLineType.WhiteSottedDottedLine:
                        prt.Write("whiteSotted-dottedLine");
                        break;
                    case DottedSolidMarkingLineType.YellowDottedSolidLine:
                        prt.Write("yellowDotted-solidLine");
                        break;
                    case DottedSolidMarkingLineType.YellowSottedDottedLine:
                        prt.Write("yellowSotted-dottedLine");
                        break;
                    default:
                        prt.Write((int)this.RightLaneLine);
                        break;
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                try {
                    enc.EncodeEnumWithExtension((int)this.LeftLaneLine, _InternalMetadata.PerCodecMetaData.SortedEnum49, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum49);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeftLaneLine", "DottedSolidMarkingLineType", "leftLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
                try {
                    enc.EncodeEnumWithExtension((int)this.RightLaneLine, _InternalMetadata.PerCodecMetaData.SortedEnum49, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum49);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RightLaneLine", "DottedSolidMarkingLineType", "rightLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneLineType", null, "LaneLineType", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum49, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum49, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum49);
                    this.LeftLaneLine = (DottedSolidMarkingLineType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "LeftLaneLine", "DottedSolidMarkingLineType", "leftLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
                try {
                    long data1;

                    data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum49, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum49, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum49);
                    this.RightLaneLine = (DottedSolidMarkingLineType)data1;
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RightLaneLine", "DottedSolidMarkingLineType", "rightLaneLine", "Dotted-SolidMarkingLineType", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "LaneLineType", null, "LaneLineType", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'Dotted-SolidMarkingLineType' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum DottedSolidMarkingLineType
    {
        WhiteDottedLine = 0,
        WhiteSolidLine = 1,
        YellowDottedLine = 2,
        YellowSolidLine = 3,
        WhiteDottedSolidLine = 4,
        WhiteSottedDottedLine = 5,
        YellowDottedSolidLine = 6,
        YellowSottedDottedLine = 7
    }
    /// <summary>
    /// Represents schema type 'RTSData' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class RTSData : Oss.Asn1.BasePdu
    {
        /// <summary>Field 'rtsId'</summary>
        public int RtsId { get; set; }
        /// <summary>Field 'signType'</summary>
        public int SignType { get; set; }
        /// <summary>Field 'signPos'</summary>
        public PositionOffsetLLV SignPos { get; set; }
        /// <summary>Field 'description'</summary>
        public MsgFrame.Description Description { get; set; }
        /// <summary>Field 'timeDetails'</summary>
        public RSITimeDetails TimeDetails { get; set; }
        /// <summary>Field 'priority'</summary>
        public byte[] Priority { get; set; }
        /// <summary>Field 'referencePaths'</summary>
        public ReferencePathList ReferencePaths { get; set; }
        /// <summary>Field 'referenceLinks'</summary>
        public ReferenceLinkList ReferenceLinks { get; set; }
        /// <summary>Field 'auxiliarySign'</summary>
        public MsgFrame.AuxiliarySign AuxiliarySign { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTSData that = right as RTSData;
            if (RtsId != that.RtsId)
                return false;
            if (SignType != that.SignType)
                return false;
            if (SignPos != null) {
                if (!SignPos.Equals(that.SignPos))
                    return false;
            } else if (that.SignPos != null)
                return false;
            if (Description != null) {
                if (!Description.Equals(that.Description))
                    return false;
            } else if (that.Description != null)
                return false;
            if (TimeDetails != null) {
                if (!TimeDetails.Equals(that.TimeDetails))
                    return false;
            } else if (that.TimeDetails != null)
                return false;
            if (Priority != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareArrays(Priority, that.Priority))
                    return false;
            } else if (that.Priority != null)
                return false;
            if (ReferencePaths != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ReferencePaths, that.ReferencePaths))
                    return false;
            } else if (that.ReferencePaths != null)
                return false;
            if (ReferenceLinks != null) {
                if (!Oss.Asn1.Internal.Comparer.CompareSeqOf(ReferenceLinks, that.ReferenceLinks))
                    return false;
            } else if (that.ReferenceLinks != null)
                return false;
            if (AuxiliarySign != null) {
                if (!AuxiliarySign.Equals(that.AuxiliarySign))
                    return false;
            } else if (that.AuxiliarySign != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            hash ^= RtsId.GetHashCode();
            hash ^= SignType.GetHashCode();
            if (SignPos != null)
                hash ^= SignPos.GetHashCode();
            if (Description != null)
                hash ^= Description.GetHashCode();
            if (TimeDetails != null)
                hash ^= TimeDetails.GetHashCode();
            if (Priority != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashArray(Priority);
            if (ReferencePaths != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ReferencePaths);
            if (ReferenceLinks != null)
                hash ^= Oss.Asn1.Internal.Comparer.HashSeqOf(ReferenceLinks);
            if (AuxiliarySign != null)
                hash ^= AuxiliarySign.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RTSData";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.RtsId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.RtsId > 255)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RtsId", "int", "rtsId", "INTEGER", false); throw;
                }
                try {
                    if (this.SignType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                    if (this.SignType > 65535)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignType", "int", "signType", "SignType", false); throw;
                }
                try {
                    if (this.SignPos != null) {
                        this.SignPos.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignPos", "PositionOffsetLLV", "signPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.Description != null) {
                        this.Description.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
                try {
                    if (this.TimeDetails != null) {
                        this.TimeDetails.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                }
                try {
                    if (this.Priority != null) {
                        if (this.Priority.Length != 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "RSIPriority", false); throw;
                }
                try {
                    if (this.ReferencePaths != null) {
                        this.ReferencePaths.Validate();
                        if (this.ReferencePaths.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ReferencePaths.Count > 8)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                }
                try {
                    if (this.ReferenceLinks != null) {
                        this.ReferenceLinks.Validate();
                        if (this.ReferenceLinks.Count < 1)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        if (this.ReferenceLinks.Count > 16)
                            throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                }
                try {
                    if (this.AuxiliarySign != null) {
                        this.AuxiliarySign.Validate();
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxiliarySign", "MsgFrame.AuxiliarySign", "auxiliarySign", "AuxiliarySign", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTSData", null, "RTSData", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RTSData obj0 = new RTSData();
            {
                obj0.RtsId = this.RtsId;
            }
            {
                obj0.SignType = this.SignType;
            }
            {
                obj0.SignPos = Oss.Asn1.Internal.CopyUtil.CopyType(this.SignPos);
            }
            {
                obj0.Description = Oss.Asn1.Internal.CopyUtil.CopyType(this.Description);
            }
            {
                obj0.TimeDetails = Oss.Asn1.Internal.CopyUtil.CopyType(this.TimeDetails);
            }
            {
                obj0.Priority = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Priority);
            }
            {
                obj0.ReferencePaths = this.ReferencePaths == null ? null : (ReferencePathList)this.ReferencePaths.Copy();
            }
            {
                obj0.ReferenceLinks = this.ReferenceLinks == null ? null : (ReferenceLinkList)this.ReferenceLinks.Copy();
            }
            {
                obj0.AuxiliarySign = Oss.Asn1.Internal.CopyUtil.CopyType(this.AuxiliarySign);
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                prt.BeginConstructedValue();
                {
                    prt.WriteLine();
                    prt.Write("rtsId ");
                    prt.Write(this.RtsId);
                }
                {
                    prt.WriteLine(",");
                    prt.Write("signType ");
                    prt.Write(this.SignType);
                }
                {
                    PositionOffsetLLV data1 = this.SignPos;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("signPos ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    MsgFrame.Description data1 = this.Description;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("description ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    RSITimeDetails data1 = this.TimeDetails;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("timeDetails ");
                        prt.PrintContent(data1);
                    }
                }
                {
                    byte[] data1 = this.Priority;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("priority ");
                        prt.PrintOctetString(data1);
                    }
                }
                {
                    ReferencePathList data1 = this.ReferencePaths;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("referencePaths ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    ReferenceLinkList data1 = this.ReferenceLinks;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("referenceLinks ");
                        data1.PrintAsn1ValueNotation(prt);
                    }
                }
                {
                    MsgFrame.AuxiliarySign data1 = this.AuxiliarySign;

                    if (data1 != null) {
                        prt.WriteLine(",");
                        prt.Write("auxiliarySign ");
                        prt.PrintContent(data1);
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] extMask0 = new byte[1];
                byte[] optMask0 = new byte[1];

                if (this.AuxiliarySign != null)
                {
                    extPresent0 = true;
                    extMask0[0] |= (byte)(0x80 >> 0);
                }
                enc.Output.WriteBool(extPresent0);
                if (this.SignPos != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.Description != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                if (this.TimeDetails != null)
                    optMask0[0] |= (byte)(0x80 >> 2);
                if (this.Priority != null)
                    optMask0[0] |= (byte)(0x80 >> 3);
                if (this.ReferencePaths != null)
                    optMask0[0] |= (byte)(0x80 >> 4);
                if (this.ReferenceLinks != null)
                    optMask0[0] |= (byte)(0x80 >> 5);
                enc.Output.WriteBits(optMask0, 0, 6);
                try {
                    if (enc.BitCount(this.RtsId - 0) > 8 || this.RtsId < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.RtsId);
                    if (enc.IsAligned)
                        enc.Output.WritePadding();
                    enc.Output.Write8BitInt((this.RtsId - (0)));
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RtsId", "int", "rtsId", "INTEGER", false); throw;
                }
                try {
                    if (enc.BitCount(this.SignType - 0) > 16 || this.SignType < 0)
                        throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._valueRange, ", value = " + this.SignType);
                    enc.EncodeConstrainedInteger((this.SignType - (0)), 16);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignType", "int", "signType", "SignType", false); throw;
                }
                try {
                    if (this.SignPos != null)
                    {
                        enc.EncodeType(this.SignPos);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignPos", "PositionOffsetLLV", "signPos", "PositionOffsetLLV", false); throw;
                }
                try {
                    if (this.Description != null)
                    {
                        enc.EncodeType(this.Description);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                }
                try {
                    if (this.TimeDetails != null)
                    {
                        enc.EncodeType(this.TimeDetails);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                }
                try {
                    if (this.Priority != null)
                    {
                        enc.EncodeOctetString(this.Priority, 1);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "RSIPriority", false); throw;
                }
                try {
                    if (this.ReferencePaths != null)
                    {
                        this.ReferencePaths.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                }
                try {
                    if (this.ReferenceLinks != null)
                    {
                        this.ReferenceLinks.EncodePer(enc);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                }
                if (extPresent0)
                {
                    Oss.Asn1.Internal.ArrayBitOutput tempOut0 = new Oss.Asn1.Internal.ArrayBitOutput();
                    Oss.Asn1.Internal.IBitOutput savedOut0 = (Oss.Asn1.Internal.IBitOutput)enc.Output;

                    enc.EncodeNormallySmallLength(1);
                    enc.Output.WriteBits(extMask0, 0, 1);
                    if ((extMask0[0] & (0x80 >> 0)) != 0)
                    {
                        enc.Output = tempOut0;
                        try {
                            MsgFrame.AuxiliarySign data1 = this.AuxiliarySign;

                            enc.EncodeType(data1);
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxiliarySign", "MsgFrame.AuxiliarySign", "auxiliarySign", "AuxiliarySign", false); throw;
                        }
                        enc.CompleteEncoding();
                        enc.Output = savedOut0;
                        enc.EncodeOctetString(tempOut0.Consolidate());
                        tempOut0.Clear();
                    }
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTSData", null, "RTSData", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 7);
                try {
                    if (dec.IsAligned)
                        dec.Input.SkipPadding();
                    this.RtsId = 0 + dec.Input.Read8BitInt();
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "RtsId", "int", "rtsId", "INTEGER", false); throw;
                }
                try {
                    this.SignType = dec.DecodeConstrainedInteger(16, 0);
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignType", "int", "signType", "SignType", false); throw;
                }
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        PositionOffsetLLV data1 = new PositionOffsetLLV();

                        dec.DecodeType(data1);
                        this.SignPos = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SignPos", "PositionOffsetLLV", "signPos", "PositionOffsetLLV", false); throw;
                    }
                }
                else
                {
                    this.SignPos = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        MsgFrame.Description data1 = new MsgFrame.Description();

                        dec.DecodeType(data1);
                        this.Description = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Description", "MsgFrame.Description", "description", "Description", false); throw;
                    }
                }
                else
                {
                    this.Description = null;
                }
                if ((optMask0[0] & 0x10) != 0)
                {
                    try {
                        RSITimeDetails data1 = new RSITimeDetails();

                        dec.DecodeType(data1);
                        this.TimeDetails = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "TimeDetails", "RSITimeDetails", "timeDetails", "RSITimeDetails", false); throw;
                    }
                }
                else
                {
                    this.TimeDetails = null;
                }
                if ((optMask0[0] & 0x8) != 0)
                {
                    try {
                        this.Priority = dec.DecodeOctetString(1);
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "Priority", "byte[]", "priority", "RSIPriority", false); throw;
                    }
                }
                else
                {
                    this.Priority = null;
                }
                if ((optMask0[0] & 0x4) != 0)
                {
                    try {
                        ReferencePathList data1 = new ReferencePathList();

                        data1.DecodePer(dec);
                        this.ReferencePaths = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferencePaths", "ReferencePathList", "referencePaths", "ReferencePathList", false); throw;
                    }
                }
                else
                {
                    this.ReferencePaths = null;
                }
                if ((optMask0[0] & 0x2) != 0)
                {
                    try {
                        ReferenceLinkList data1 = new ReferenceLinkList();

                        data1.DecodePer(dec);
                        this.ReferenceLinks = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "ReferenceLinks", "ReferenceLinkList", "referenceLinks", "ReferenceLinkList", false); throw;
                    }
                }
                else
                {
                    this.ReferenceLinks = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int fraglast0;
                    int length0;
                    int begin0;
                    Oss.Asn1.Internal.IBitInput savedInput0 = dec.Input;

                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0 && (extMask0[0] & 0x80) != 0)
                    {
                        fraglast0 = 65536;
                        length0 = dec.DecodeExtAdditonLength(ref fraglast0);
                        if (fraglast0 >= 0)
                            length0 = dec.PrepareExtInputFrag(length0);
                        begin0 = dec.Input.BitsRead();
                        try {
                            MsgFrame.AuxiliarySign data1 = new MsgFrame.AuxiliarySign();

                            dec.DecodeType(data1);
                            this.AuxiliarySign = data1;
                        } catch (System.Exception ex) {
                            Oss.Asn1.Asn1Exception.AppendContext(ex, "AuxiliarySign", "MsgFrame.AuxiliarySign", "auxiliarySign", "AuxiliarySign", false); throw;
                        }
                        if (dec.Options.StrictDecoding)
                            dec.CheckExtEncodingCompletion(begin0, length0);
                        if (fraglast0 < 0)
                            dec.Input.SkipBits(length0 * 8 - (dec.Input.BitsRead() - begin0));
                        dec.Input = savedInput0;
                    }
                    else
                    {
                        this.AuxiliarySign = null;
                    }
                    if (extMaskLen0 > 1)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 1);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "RTSData", null, "RTSData", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AuxiliarySign' (SEQUENCE)
    /// </summary>
    [System.Serializable]
    public partial class AuxiliarySign : Oss.Asn1.BaseType
    {
        /// <summary>Field 'signWithVehicleType'</summary>
        public Oss.Asn1.BitStringWithNamedBits SignWithVehicleType { get; set; }
        /// <summary>Field 'signDirection'</summary>
        public AuxiliarySignDirection? SignDirection { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            AuxiliarySign that = right as AuxiliarySign;
            if (SignWithVehicleType != null) {
                if (!SignWithVehicleType.Equals(that.SignWithVehicleType))
                    return false;
            } else if (that.SignWithVehicleType != null)
                return false;
            if (SignDirection != null) {
                if (SignDirection != that.SignDirection)
                    return false;
            } else if (that.SignDirection != null)
                return false;
            return true;
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            int hash = GetType().GetHashCode();
            if (SignWithVehicleType != null)
                hash ^= SignWithVehicleType.GetHashCode();
            if (SignDirection != null)
                hash ^= SignDirection.GetHashCode();
            return hash;
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "AuxiliarySign";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                try {
                    if (this.SignWithVehicleType != null) {
                        try {
                            if (this.SignWithVehicleType.Count != 5)
                                throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                        } catch (System.Exception) {
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignWithVehicleType", "Oss.Asn1.BitStringWithNamedBits", "signWithVehicleType", "AuxiliarySignVehicleType", false); throw;
                }
                try {
                    if (this.SignDirection != null) {
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignDirection.Value", "AuxiliarySignDirection", "signDirection", "AuxiliarySignDirection", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AuxiliarySign", null, "AuxiliarySign", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            AuxiliarySign obj0 = new AuxiliarySign();
            {
                obj0.SignWithVehicleType = Oss.Asn1.Internal.CopyUtil.CopyBitString(this.SignWithVehicleType);
            }
            {
                obj0.SignDirection = this.SignDirection;
            }
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                bool first0 = true;

                prt.BeginConstructedValue();
                {
                    Oss.Asn1.BitStringWithNamedBits data1 = this.SignWithVehicleType;

                    if (data1 != null) {
                        prt.WriteLine();
                        first0 = false;
                        prt.Write("signWithVehicleType ");
                        prt.PrintBitString(data1, 
                            delegate(int index)
                            {
                                switch (index)
                                {
                                    case (int)0: return "restrictedFromBus";
                                    case (int)1: return "vehicle";
                                    case (int)2: return "truck";
                                    case (int)3: return "tractor";
                                    case (int)4: return "private";
                                }
                                return null;
                            }
                        );
                    }
                }
                {
                    AuxiliarySignDirection? data1 = this.SignDirection;

                    if (data1 != null) {
                        prt.WriteLine(first0 ? "" : ",");
                        first0 = false;
                        prt.Write("signDirection ");
                        switch (data1.Value) {
                        case AuxiliarySignDirection.Straight:
                            prt.Write("straight");
                            break;
                        case AuxiliarySignDirection.LeftAndRight:
                            prt.Write("leftAndRight");
                            break;
                        case AuxiliarySignDirection.Right:
                            prt.Write("right");
                            break;
                        case AuxiliarySignDirection.Left:
                            prt.Write("left");
                            break;
                        case AuxiliarySignDirection.LeftFrontTurn:
                            prt.Write("leftFrontTurn");
                            break;
                        case AuxiliarySignDirection.RightFronTurn:
                            prt.Write("rightFronTurn");
                            break;
                        case AuxiliarySignDirection.RightRearTurn:
                            prt.Write("rightRearTurn");
                            break;
                        case AuxiliarySignDirection.LeftRearTurn:
                            prt.Write("leftRearTurn");
                            break;
                        default:
                            prt.Write((int)data1.Value);
                            break;
                        }
                    }
                }
                prt.EndConstructedValue();
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                bool extPresent0 = false;
                byte[] optMask0 = new byte[1];

                enc.Output.WriteBool(extPresent0);
                if (this.SignWithVehicleType != null)
                    optMask0[0] |= (byte)(0x80 >> 0);
                if (this.SignDirection != null)
                    optMask0[0] |= (byte)(0x80 >> 1);
                enc.Output.WriteBits(optMask0, 0, 2);
                try {
                    if (this.SignWithVehicleType != null)
                    {
                        int length1 = Oss.Asn1.Internal.MiscUtil.SearchGreaterOrEqual(_InternalMetadata.BerCodecMetaData.Ranges1, this.SignWithVehicleType.LastOneBitPos() + 1);
                        bool extPresent1 = !(length1 == 5);
                        enc.EncodeBool(extPresent1);
                        if (extPresent1)
                            enc.EncodeBitStringWithNamedBits(this.SignWithVehicleType, length1);
                        else {
                            enc.EncodeBitStringWithNamedBits(this.SignWithVehicleType, length1, 5);
                        }
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignWithVehicleType", "Oss.Asn1.BitStringWithNamedBits", "signWithVehicleType", "AuxiliarySignVehicleType", false); throw;
                }
                try {
                    if (this.SignDirection != null)
                    {
                        enc.EncodeEnumWithExtension((int)this.SignDirection.Value, _InternalMetadata.PerCodecMetaData.SortedEnum50, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum50);
                    }
                } catch (System.Exception ex) {
                    Oss.Asn1.Asn1Exception.AppendContext(ex, "SignDirection.Value", "AuxiliarySignDirection", "signDirection", "AuxiliarySignDirection", false); throw;
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AuxiliarySign", null, "AuxiliarySign", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                byte[] optMask0 = new byte[1];

                dec.Input.ReadBits(optMask0, 3);
                if ((optMask0[0] & 0x40) != 0)
                {
                    try {
                        Oss.Asn1.BitStringWithNamedBits data1;
                        bool extPresent1 = dec.Input.ReadBool();
                        if (extPresent1)
                            data1 = dec.DecodeExtBitStringWithNamedBits(_InternalMetadata.BerCodecMetaData.Ranges1);
                        else
                            data1 = dec.DecodeBitStringWithNamedBits(5, _InternalMetadata.BerCodecMetaData.Ranges1);
                        if (dec.Options.StrictDecoding && extPresent1 == (data1.Length == 5))
                            dec.RaiseExtLengthError(extPresent1);
                        this.SignWithVehicleType = data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SignWithVehicleType", "Oss.Asn1.BitStringWithNamedBits", "signWithVehicleType", "AuxiliarySignVehicleType", false); throw;
                    }
                }
                else
                {
                    this.SignWithVehicleType = null;
                }
                if ((optMask0[0] & 0x20) != 0)
                {
                    try {
                        long data1;

                        data1 = dec.DecodeEnumWithExtension(_InternalMetadata.PerCodecMetaData.SortedEnum50, _InternalMetadata.PerCodecMetaData.SortedExtensionEnum50, _InternalMetadata.PerCodecMetaData.UnknownExtensionEnum50);
                        this.SignDirection = (AuxiliarySignDirection)data1;
                    } catch (System.Exception ex) {
                        Oss.Asn1.Asn1Exception.AppendContext(ex, "SignDirection", "AuxiliarySignDirection", "signDirection", "AuxiliarySignDirection", false); throw;
                    }
                }
                else
                {
                    this.SignDirection = null;
                }
                if ((optMask0[0] & 0x80) != 0)
                {
                    int extMaskLen0 = 0;
                    byte[] extMask0 = dec.DecodeExtPreamble(out extMaskLen0);
                    if (extMaskLen0 > 0)
                        dec.SkipUnknownExtensions(extMask0, extMaskLen0, 0);
                }
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "", "AuxiliarySign", null, "AuxiliarySign", false); throw;
            }
        }
    }
    /// <summary>
    /// Represents schema type 'AuxiliarySignVehicleType' (BIT STRING)
    /// </summary>
    [System.Serializable]
    public enum AuxiliarySignVehicleType
    {
        RestrictedFromBus = 0,
        Vehicle = 1,
        Truck = 2,
        Tractor = 3,
        Private = 4
    }
    /// <summary>
    /// Represents schema type 'AuxiliarySignDirection' (ENUMERATED)
    /// </summary>
    [System.Serializable]
    public enum AuxiliarySignDirection
    {
        NoValue = 0,
        Straight = 1,
        LeftAndRight = 2,
        Right = 3,
        Left = 4,
        LeftFrontTurn = 5,
        RightFronTurn = 6,
        RightRearTurn = 7,
        LeftRearTurn = 8
    }
    /// <summary>
    /// Represents schema PDU 'RTCMmessage' (OCTET STRING)
    /// </summary>
    [System.Serializable]
    public partial class RTCMmessage : Oss.Asn1.BasePdu
    {
        public byte[] Value { get; set; }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="right">The object to compare with this object. </param>
        /// <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(object right)
        {
            if (right == null)
                return false;
            if (object.ReferenceEquals(this, right))
                return true;
            if (this.GetType() != right.GetType())
                return false;
            RTCMmessage that = right as RTCMmessage;
            return Oss.Asn1.Internal.Comparer.CompareArrays(Value, that.Value);
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return GetType().GetHashCode() ^ Oss.Asn1.Internal.Comparer.HashArray(Value);
        }

        /// <summary>
        /// Returns the name of the ASN.1 schema type represented by this class.
        /// </summary>
        /// <returns>the string containing the name of the ASN.1 schema type.</returns>
        public override string GetAsn1TypeName()
        {
            return "RTCMmessage";
        }

        /// <summary>
        /// Asserts the validity of this object`s ASN.1 data.
        /// </summary>
        /// <exception cref="Oss.Asn1.Asn1InvalidDataException">Thrown if the instance contains invalid data.</exception>
        public override void Validate()
        {
            try {
                if (this.Value == null) {
                    throw new Oss.Asn1.Asn1InvalidDataException(Oss.Asn1.Internal.ExceptionDescriptor._null_component_element);
                }
                if (this.Value.Length < 1)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
                if (this.Value.Length > 2047)
                    throw new Oss.Asn1.Asn1ConstraintException(Oss.Asn1.Internal.ExceptionDescriptor._sizeConstraint);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "Value", "RTCMmessage", null, "RTCMmessage", false); throw;
            }
        }

        /// <summary>
        /// Creates the deep copy of this object.
        /// </summary>
        /// <returns>A new object that is a deep copy of this instance.</returns>
        public override object Copy()
        {
            RTCMmessage obj0 = new RTCMmessage();
            obj0.Value = Oss.Asn1.Internal.CopyUtil.CopyByteArray(this.Value);
            return obj0;
        }

        protected override void PrintAsn1ValueNotation(Oss.Asn1.Internal.ValueNotationHelper prt)
        {
            try
            {
                if (this.Value == null) {
                    prt.Write("<<<NULL>>>");
                    return;
                }
                prt.PrintOctetString(this.Value);
            }
            catch (System.Exception)
            {
                prt.ResetIndent();
                throw;
            }
        }

        protected override void EncodePer(Oss.Asn1.Internal.PerEncoder enc)
        {
            try {
                enc.EncodeOctetString(this.Value, 1, 2047);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "Value", "RTCMmessage", null, "RTCMmessage", false); throw;
            }
        }

        protected override void DecodePer(Oss.Asn1.Internal.PerDecoder dec)
        {
            try {
                this.Value = dec.DecodeOctetString(1, 2047);
            } catch (System.Exception ex) {
                Oss.Asn1.Asn1Exception.AppendContext(ex, "Value", "RTCMmessage", null, "RTCMmessage", false); throw;
            }
        }
    }
    internal partial class _InternalMetadata
    {
        internal static class BerCodecMetaData
        {
            internal static readonly int[] Ranges9 = new int[] { 0, 14, 15, int.MaxValue };
            internal static readonly int[] Ranges8 = new int[] { 0, 6, 7, int.MaxValue };
            internal static readonly int[] Ranges7 = new int[] { 0, 16, 17, int.MaxValue };
            internal static readonly int[] Ranges6 = new int[] { 0, 10, 11, int.MaxValue };
            internal static readonly int[] Ranges5 = new int[] { 0, 12, 13, int.MaxValue };
            internal static readonly int[] Ranges4 = new int[] { 0, 8, 9, int.MaxValue };
            internal static readonly int[] Ranges3 = new int[] { 0, 9, 10, int.MaxValue };
            internal static readonly int[] Ranges2 = new int[] { 0, 13, 14, int.MaxValue };
            internal static readonly int[] Ranges1 = new int[] { 0, 5, 6, int.MaxValue };
        }
    }
    /// <summary>
    /// Represents values defined in the 'MsgFrame' ASN.1 module.
    /// </summary>
    public static class Values
    {
        private static readonly int _unknownVehicleClass = 0;
        /// <summary>Represents schema value 'MsgFrame.unknownVehicleClass'</summary>
        public static int UnknownVehicleClass {
            get {
                return _unknownVehicleClass;
            }
        }
        private static readonly int _specialVehicleClass = 1;
        /// <summary>Represents schema value 'MsgFrame.specialVehicleClass'</summary>
        public static int SpecialVehicleClass {
            get {
                return _specialVehicleClass;
            }
        }
        private static readonly int _passengerVehicleTypeUnknown = 10;
        /// <summary>Represents schema value 'MsgFrame.passenger-Vehicle-TypeUnknown'</summary>
        public static int PassengerVehicleTypeUnknown {
            get {
                return _passengerVehicleTypeUnknown;
            }
        }
        private static readonly int _passengerVehicleTypeOther = 11;
        /// <summary>Represents schema value 'MsgFrame.passenger-Vehicle-TypeOther'</summary>
        public static int PassengerVehicleTypeOther {
            get {
                return _passengerVehicleTypeOther;
            }
        }
        private static readonly int _lightTruckVehicleTypeUnknown = 20;
        /// <summary>Represents schema value 'MsgFrame.lightTruck-Vehicle-TypeUnknown'</summary>
        public static int LightTruckVehicleTypeUnknown {
            get {
                return _lightTruckVehicleTypeUnknown;
            }
        }
        private static readonly int _lightTruckVehicleTypeOther = 21;
        /// <summary>Represents schema value 'MsgFrame.lightTruck-Vehicle-TypeOther'</summary>
        public static int LightTruckVehicleTypeOther {
            get {
                return _lightTruckVehicleTypeOther;
            }
        }
        private static readonly int _truckVehicleTypeUnknown = 25;
        /// <summary>Represents schema value 'MsgFrame.truck-Vehicle-TypeUnknown'</summary>
        public static int TruckVehicleTypeUnknown {
            get {
                return _truckVehicleTypeUnknown;
            }
        }
        private static readonly int _truckVehicleTypeOther = 26;
        /// <summary>Represents schema value 'MsgFrame.truck-Vehicle-TypeOther'</summary>
        public static int TruckVehicleTypeOther {
            get {
                return _truckVehicleTypeOther;
            }
        }
        private static readonly int _truckAxleCnt2 = 27;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt2'</summary>
        public static int TruckAxleCnt2 {
            get {
                return _truckAxleCnt2;
            }
        }
        private static readonly int _truckAxleCnt3 = 28;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt3'</summary>
        public static int TruckAxleCnt3 {
            get {
                return _truckAxleCnt3;
            }
        }
        private static readonly int _truckAxleCnt4 = 29;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt4'</summary>
        public static int TruckAxleCnt4 {
            get {
                return _truckAxleCnt4;
            }
        }
        private static readonly int _truckAxleCnt4Trailer = 30;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt4Trailer'</summary>
        public static int TruckAxleCnt4Trailer {
            get {
                return _truckAxleCnt4Trailer;
            }
        }
        private static readonly int _truckAxleCnt5Trailer = 31;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt5Trailer'</summary>
        public static int TruckAxleCnt5Trailer {
            get {
                return _truckAxleCnt5Trailer;
            }
        }
        private static readonly int _truckAxleCnt6Trailer = 32;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt6Trailer'</summary>
        public static int TruckAxleCnt6Trailer {
            get {
                return _truckAxleCnt6Trailer;
            }
        }
        private static readonly int _truckAxleCnt5MultiTrailer = 33;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt5MultiTrailer'</summary>
        public static int TruckAxleCnt5MultiTrailer {
            get {
                return _truckAxleCnt5MultiTrailer;
            }
        }
        private static readonly int _truckAxleCnt6MultiTrailer = 34;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt6MultiTrailer'</summary>
        public static int TruckAxleCnt6MultiTrailer {
            get {
                return _truckAxleCnt6MultiTrailer;
            }
        }
        private static readonly int _truckAxleCnt7MultiTrailer = 35;
        /// <summary>Represents schema value 'MsgFrame.truck-axleCnt7MultiTrailer'</summary>
        public static int TruckAxleCnt7MultiTrailer {
            get {
                return _truckAxleCnt7MultiTrailer;
            }
        }
        private static readonly int _motorcycleTypeUnknown = 40;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-TypeUnknown'</summary>
        public static int MotorcycleTypeUnknown {
            get {
                return _motorcycleTypeUnknown;
            }
        }
        private static readonly int _motorcycleTypeOther = 41;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-TypeOther'</summary>
        public static int MotorcycleTypeOther {
            get {
                return _motorcycleTypeOther;
            }
        }
        private static readonly int _motorcycleCruiserStandard = 42;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-Cruiser-Standard'</summary>
        public static int MotorcycleCruiserStandard {
            get {
                return _motorcycleCruiserStandard;
            }
        }
        private static readonly int _motorcycleSportUnclad = 43;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-SportUnclad'</summary>
        public static int MotorcycleSportUnclad {
            get {
                return _motorcycleSportUnclad;
            }
        }
        private static readonly int _motorcycleSportTouring = 44;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-SportTouring'</summary>
        public static int MotorcycleSportTouring {
            get {
                return _motorcycleSportTouring;
            }
        }
        private static readonly int _motorcycleSuperSport = 45;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-SuperSport'</summary>
        public static int MotorcycleSuperSport {
            get {
                return _motorcycleSuperSport;
            }
        }
        private static readonly int _motorcycleTouring = 46;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-Touring'</summary>
        public static int MotorcycleTouring {
            get {
                return _motorcycleTouring;
            }
        }
        private static readonly int _motorcycleTrike = 47;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-Trike'</summary>
        public static int MotorcycleTrike {
            get {
                return _motorcycleTrike;
            }
        }
        private static readonly int _motorcycleWPassengers = 48;
        /// <summary>Represents schema value 'MsgFrame.motorcycle-wPassengers'</summary>
        public static int MotorcycleWPassengers {
            get {
                return _motorcycleWPassengers;
            }
        }
        private static readonly int _transitTypeUnknown = 50;
        /// <summary>Represents schema value 'MsgFrame.transit-TypeUnknown'</summary>
        public static int TransitTypeUnknown {
            get {
                return _transitTypeUnknown;
            }
        }
        private static readonly int _transitTypeOther = 51;
        /// <summary>Represents schema value 'MsgFrame.transit-TypeOther'</summary>
        public static int TransitTypeOther {
            get {
                return _transitTypeOther;
            }
        }
        private static readonly int _transitBRT = 52;
        /// <summary>Represents schema value 'MsgFrame.transit-BRT'</summary>
        public static int TransitBRT {
            get {
                return _transitBRT;
            }
        }
        private static readonly int _transitExpressBus = 53;
        /// <summary>Represents schema value 'MsgFrame.transit-ExpressBus'</summary>
        public static int TransitExpressBus {
            get {
                return _transitExpressBus;
            }
        }
        private static readonly int _transitLocalBus = 54;
        /// <summary>Represents schema value 'MsgFrame.transit-LocalBus'</summary>
        public static int TransitLocalBus {
            get {
                return _transitLocalBus;
            }
        }
        private static readonly int _transitSchoolBus = 55;
        /// <summary>Represents schema value 'MsgFrame.transit-SchoolBus'</summary>
        public static int TransitSchoolBus {
            get {
                return _transitSchoolBus;
            }
        }
        private static readonly int _transitFixedGuideway = 56;
        /// <summary>Represents schema value 'MsgFrame.transit-FixedGuideway'</summary>
        public static int TransitFixedGuideway {
            get {
                return _transitFixedGuideway;
            }
        }
        private static readonly int _transitParatransit = 57;
        /// <summary>Represents schema value 'MsgFrame.transit-Paratransit'</summary>
        public static int TransitParatransit {
            get {
                return _transitParatransit;
            }
        }
        private static readonly int _transitParatransitAmbulance = 58;
        /// <summary>Represents schema value 'MsgFrame.transit-Paratransit-Ambulance'</summary>
        public static int TransitParatransitAmbulance {
            get {
                return _transitParatransitAmbulance;
            }
        }
        private static readonly int _emergencyTypeUnknown = 60;
        /// <summary>Represents schema value 'MsgFrame.emergency-TypeUnknown'</summary>
        public static int EmergencyTypeUnknown {
            get {
                return _emergencyTypeUnknown;
            }
        }
        private static readonly int _emergencyTypeOther = 61;
        /// <summary>Represents schema value 'MsgFrame.emergency-TypeOther'</summary>
        public static int EmergencyTypeOther {
            get {
                return _emergencyTypeOther;
            }
        }
        private static readonly int _emergencyFireLightVehicle = 62;
        /// <summary>Represents schema value 'MsgFrame.emergency-Fire-Light-Vehicle'</summary>
        public static int EmergencyFireLightVehicle {
            get {
                return _emergencyFireLightVehicle;
            }
        }
        private static readonly int _emergencyFireHeavyVehicle = 63;
        /// <summary>Represents schema value 'MsgFrame.emergency-Fire-Heavy-Vehicle'</summary>
        public static int EmergencyFireHeavyVehicle {
            get {
                return _emergencyFireHeavyVehicle;
            }
        }
        private static readonly int _emergencyFireParamedicVehicle = 64;
        /// <summary>Represents schema value 'MsgFrame.emergency-Fire-Paramedic-Vehicle'</summary>
        public static int EmergencyFireParamedicVehicle {
            get {
                return _emergencyFireParamedicVehicle;
            }
        }
        private static readonly int _emergencyFireAmbulanceVehicle = 65;
        /// <summary>Represents schema value 'MsgFrame.emergency-Fire-Ambulance-Vehicle'</summary>
        public static int EmergencyFireAmbulanceVehicle {
            get {
                return _emergencyFireAmbulanceVehicle;
            }
        }
        private static readonly int _emergencyPoliceLightVehicle = 66;
        /// <summary>Represents schema value 'MsgFrame.emergency-Police-Light-Vehicle'</summary>
        public static int EmergencyPoliceLightVehicle {
            get {
                return _emergencyPoliceLightVehicle;
            }
        }
        private static readonly int _emergencyPoliceHeavyVehicle = 67;
        /// <summary>Represents schema value 'MsgFrame.emergency-Police-Heavy-Vehicle'</summary>
        public static int EmergencyPoliceHeavyVehicle {
            get {
                return _emergencyPoliceHeavyVehicle;
            }
        }
        private static readonly int _emergencyOtherResponder = 68;
        /// <summary>Represents schema value 'MsgFrame.emergency-Other-Responder'</summary>
        public static int EmergencyOtherResponder {
            get {
                return _emergencyOtherResponder;
            }
        }
        private static readonly int _emergencyOtherAmbulance = 69;
        /// <summary>Represents schema value 'MsgFrame.emergency-Other-Ambulance'</summary>
        public static int EmergencyOtherAmbulance {
            get {
                return _emergencyOtherAmbulance;
            }
        }
        private static readonly int _otherTravelerTypeUnknown = 80;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-TypeUnknown'</summary>
        public static int OtherTravelerTypeUnknown {
            get {
                return _otherTravelerTypeUnknown;
            }
        }
        private static readonly int _otherTravelerTypeOther = 81;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-TypeOther'</summary>
        public static int OtherTravelerTypeOther {
            get {
                return _otherTravelerTypeOther;
            }
        }
        private static readonly int _otherTravelerPedestrian = 82;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-Pedestrian'</summary>
        public static int OtherTravelerPedestrian {
            get {
                return _otherTravelerPedestrian;
            }
        }
        private static readonly int _otherTravelerVisuallyDisabled = 83;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-Visually-Disabled'</summary>
        public static int OtherTravelerVisuallyDisabled {
            get {
                return _otherTravelerVisuallyDisabled;
            }
        }
        private static readonly int _otherTravelerPhysicallyDisabled = 84;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-Physically-Disabled'</summary>
        public static int OtherTravelerPhysicallyDisabled {
            get {
                return _otherTravelerPhysicallyDisabled;
            }
        }
        private static readonly int _otherTravelerBicycle = 85;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-Bicycle'</summary>
        public static int OtherTravelerBicycle {
            get {
                return _otherTravelerBicycle;
            }
        }
        private static readonly int _otherTravelerVulnerableRoadworker = 86;
        /// <summary>Represents schema value 'MsgFrame.otherTraveler-Vulnerable-Roadworker'</summary>
        public static int OtherTravelerVulnerableRoadworker {
            get {
                return _otherTravelerVulnerableRoadworker;
            }
        }
        private static readonly int _infrastructureTypeUnknown = 90;
        /// <summary>Represents schema value 'MsgFrame.infrastructure-TypeUnknown'</summary>
        public static int InfrastructureTypeUnknown {
            get {
                return _infrastructureTypeUnknown;
            }
        }
        private static readonly int _infrastructureFixed = 91;
        /// <summary>Represents schema value 'MsgFrame.infrastructure-Fixed'</summary>
        public static int InfrastructureFixed {
            get {
                return _infrastructureFixed;
            }
        }
        private static readonly int _infrastructureMovable = 92;
        /// <summary>Represents schema value 'MsgFrame.infrastructure-Movable'</summary>
        public static int InfrastructureMovable {
            get {
                return _infrastructureMovable;
            }
        }
        private static readonly int _equippedCargoTrailer = 93;
        /// <summary>Represents schema value 'MsgFrame.equipped-CargoTrailer'</summary>
        public static int EquippedCargoTrailer {
            get {
                return _equippedCargoTrailer;
            }
        }
        private static readonly int _unknownFuel = 0;
        /// <summary>Represents schema value 'MsgFrame.unknownFuel'</summary>
        public static int UnknownFuel {
            get {
                return _unknownFuel;
            }
        }
        private static readonly int _gasoline = 1;
        /// <summary>Represents schema value 'MsgFrame.gasoline'</summary>
        public static int Gasoline {
            get {
                return _gasoline;
            }
        }
        private static readonly int _ethanol = 2;
        /// <summary>Represents schema value 'MsgFrame.ethanol'</summary>
        public static int Ethanol {
            get {
                return _ethanol;
            }
        }
        private static readonly int _diesel = 3;
        /// <summary>Represents schema value 'MsgFrame.diesel'</summary>
        public static int Diesel {
            get {
                return _diesel;
            }
        }
        private static readonly int _electric = 4;
        /// <summary>Represents schema value 'MsgFrame.electric'</summary>
        public static int Electric {
            get {
                return _electric;
            }
        }
        private static readonly int _hybrid = 5;
        /// <summary>Represents schema value 'MsgFrame.hybrid'</summary>
        public static int Hybrid {
            get {
                return _hybrid;
            }
        }
        private static readonly int _hydrogen = 6;
        /// <summary>Represents schema value 'MsgFrame.hydrogen'</summary>
        public static int Hydrogen {
            get {
                return _hydrogen;
            }
        }
        private static readonly int _natGasLiquid = 7;
        /// <summary>Represents schema value 'MsgFrame.natGasLiquid'</summary>
        public static int NatGasLiquid {
            get {
                return _natGasLiquid;
            }
        }
        private static readonly int _natGasComp = 8;
        /// <summary>Represents schema value 'MsgFrame.natGasComp'</summary>
        public static int NatGasComp {
            get {
                return _natGasComp;
            }
        }
        private static readonly int _propane = 9;
        /// <summary>Represents schema value 'MsgFrame.propane'</summary>
        public static int Propane {
            get {
                return _propane;
            }
        }
    }
}
